
H7-BSP-LCD-OS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e548  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ce4  0800e7e8  0800e7e8  0001e7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080104cc  080104cc  000204cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080104d4  080104d4  000204d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080104d8  080104d8  000204d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  24000000  080104dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00021ca0  240000a0  08010578  000300a0  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24021d40  08010578  00031d40  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000361c8  00000000  00000000  000300ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005d53  00000000  00000000  00066292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000025c8  00000000  00000000  0006bfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002390  00000000  00000000  0006e5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000a203  00000000  00000000  00070940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00034b37  00000000  00000000  0007ab43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a90f1  00000000  00000000  000af67a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0025876b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000aa8c  00000000  00000000  002587bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000a0 	.word	0x240000a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e7d0 	.word	0x0800e7d0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000a4 	.word	0x240000a4
 80002dc:	0800e7d0 	.word	0x0800e7d0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <MDMA_SDRAM_Config>:
}



HAL_StatusTypeDef MDMA_SDRAM_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 800068a:	4b2f      	ldr	r3, [pc, #188]	; (8000748 <MDMA_SDRAM_Config+0xc4>)
 800068c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000690:	4a2d      	ldr	r2, [pc, #180]	; (8000748 <MDMA_SDRAM_Config+0xc4>)
 8000692:	f043 0301 	orr.w	r3, r3, #1
 8000696:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800069a:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <MDMA_SDRAM_Config+0xc4>)
 800069c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 80006a8:	4b28      	ldr	r3, [pc, #160]	; (800074c <MDMA_SDRAM_Config+0xc8>)
 80006aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ae:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 80006b0:	4b26      	ldr	r3, [pc, #152]	; (800074c <MDMA_SDRAM_Config+0xc8>)
 80006b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006b6:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 80006b8:	4b24      	ldr	r3, [pc, #144]	; (800074c <MDMA_SDRAM_Config+0xc8>)
 80006ba:	2280      	movs	r2, #128	; 0x80
 80006bc:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <MDMA_SDRAM_Config+0xc8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 80006c4:	4b21      	ldr	r3, [pc, #132]	; (800074c <MDMA_SDRAM_Config+0xc8>)
 80006c6:	f240 2202 	movw	r2, #514	; 0x202
 80006ca:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MDMA_SDRAM_Config+0xc8>)
 80006ce:	f640 0208 	movw	r2, #2056	; 0x808
 80006d2:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80006d4:	4b1d      	ldr	r3, [pc, #116]	; (800074c <MDMA_SDRAM_Config+0xc8>)
 80006d6:	2220      	movs	r2, #32
 80006d8:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MDMA_SDRAM_Config+0xc8>)
 80006dc:	2280      	movs	r2, #128	; 0x80
 80006de:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MDMA_SDRAM_Config+0xc8>)
 80006e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80006e6:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80006e8:	4b18      	ldr	r3, [pc, #96]	; (800074c <MDMA_SDRAM_Config+0xc8>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <MDMA_SDRAM_Config+0xc8>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <MDMA_SDRAM_Config+0xc8>)
 80006f6:	2280      	movs	r2, #128	; 0x80
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <MDMA_SDRAM_Config+0xc8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MDMA_SDRAM_Config+0xc8>)
 8000702:	2200      	movs	r2, #0
 8000704:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MDMA_SDRAM_Config+0xc8>)
 8000708:	4a11      	ldr	r2, [pc, #68]	; (8000750 <MDMA_SDRAM_Config+0xcc>)
 800070a:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(&hsdram[0], hmdma, mdma_handle);
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MDMA_SDRAM_Config+0xd0>)
 800070e:	4a0f      	ldr	r2, [pc, #60]	; (800074c <MDMA_SDRAM_Config+0xc8>)
 8000710:	631a      	str	r2, [r3, #48]	; 0x30
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MDMA_SDRAM_Config+0xc8>)
 8000714:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <MDMA_SDRAM_Config+0xd0>)
 8000716:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <MDMA_SDRAM_Config+0xc8>)
 800071a:	f006 fef1 	bl	8007500 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  if (HAL_MDMA_Init(&mdma_handle) != HAL_OK) {
 800071e:	480b      	ldr	r0, [pc, #44]	; (800074c <MDMA_SDRAM_Config+0xc8>)
 8000720:	f006 fea2 	bl	8007468 <HAL_MDMA_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MDMA_SDRAM_Config+0xaa>
	  return HAL_ERROR;
 800072a:	2301      	movs	r3, #1
 800072c:	e008      	b.n	8000740 <MDMA_SDRAM_Config+0xbc>
  }

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	210f      	movs	r1, #15
 8000732:	207a      	movs	r0, #122	; 0x7a
 8000734:	f003 fcd9 	bl	80040ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8000738:	207a      	movs	r0, #122	; 0x7a
 800073a:	f003 fcf0 	bl	800411e <HAL_NVIC_EnableIRQ>
  return HAL_OK;
 800073e:	2300      	movs	r3, #0
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	58024400 	.word	0x58024400
 800074c:	240000bc 	.word	0x240000bc
 8000750:	52000040 	.word	0x52000040
 8000754:	240217e0 	.word	0x240217e0

08000758 <HAL_SDRAM_DMA_XferCpltCallback>:


void HAL_SDRAM_DMA_XferCpltCallback(MDMA_HandleTypeDef *hmdma){
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	if (hmdma->Instance == SDRAM_MDMAx_CHANNEL){
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a05      	ldr	r2, [pc, #20]	; (800077c <HAL_SDRAM_DMA_XferCpltCallback+0x24>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d102      	bne.n	8000770 <HAL_SDRAM_DMA_XferCpltCallback+0x18>
		mdma_complete = 1;
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <HAL_SDRAM_DMA_XferCpltCallback+0x28>)
 800076c:	2201      	movs	r2, #1
 800076e:	701a      	strb	r2, [r3, #0]
	}
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	52000040 	.word	0x52000040
 8000780:	2400013e 	.word	0x2400013e

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b09c      	sub	sp, #112	; 0x70
 8000788:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  uint8_t time_str1[60];
  uint8_t time_str2[40];

  /* Configure the MPU attributes as Write Through */
  MPU_Config();
 800078a:	f000 fa63 	bl	8000c54 <MPU_Config>

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 800078e:	f000 fa89 	bl	8000ca4 <CPU_CACHE_Enable>
           duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
           handled in milliseconds basis.
         - Set NVIC Group Priority to 4
         - Low Level Initialization
  */
  HAL_Init();
 8000792:	f003 fafd 	bl	8003d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock to 400 MHz */
  SystemClock_Config();
 8000796:	f000 f9c7 	bl	8000b28 <SystemClock_Config>

  /* USER CODE BEGIN 2 */
  /* When system initialization is finished, Cortex-M7 could wakeup (when needed) the Cortex-M4  by means of
        HSEM notification or by any D2 wakeup source (SEV,EXTI..)   */

  BSP_LED_Init(LED_GREEN);
 800079a:	2000      	movs	r0, #0
 800079c:	f001 fd5c 	bl	8002258 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80007a0:	2001      	movs	r0, #1
 80007a2:	f001 fd59 	bl	8002258 <BSP_LED_Init>
  BSP_LED_Off(LED_GREEN);
 80007a6:	2000      	movs	r0, #0
 80007a8:	f001 fdd2 	bl	8002350 <BSP_LED_Off>

  /* Configure the User push-button in EXTI Mode */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80007ac:	2101      	movs	r1, #1
 80007ae:	2000      	movs	r0, #0
 80007b0:	f001 fdec 	bl	800238c <BSP_PB_Init>

  /* Configure TIM3 timebase */
  Init_TIM3(&TIM3Handle);
 80007b4:	4881      	ldr	r0, [pc, #516]	; (80009bc <main+0x238>)
 80007b6:	f000 fd07 	bl	80011c8 <Init_TIM3>

  /* Init UART3*/
  if (USART3_Init(&UART3Handle) != HAL_OK){
 80007ba:	4881      	ldr	r0, [pc, #516]	; (80009c0 <main+0x23c>)
 80007bc:	f001 fb34 	bl	8001e28 <USART3_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <main+0x46>
	  Error_Handler();
 80007c6:	f000 fadb 	bl	8000d80 <Error_Handler>
  }
  RetargetInit(&UART3Handle);
 80007ca:	487d      	ldr	r0, [pc, #500]	; (80009c0 <main+0x23c>)
 80007cc:	f000 fd64 	bl	8001298 <RetargetInit>
	  Error_Handler();
  }
  */

  // Configure DMA2 for SDRAM:
  if (MDMA_SDRAM_Config() != HAL_OK) {
 80007d0:	f7ff ff58 	bl	8000684 <MDMA_SDRAM_Config>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <main+0x5a>
	  Error_Handler();
 80007da:	f000 fad1 	bl	8000d80 <Error_Handler>
  }

  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 80007de:	2101      	movs	r1, #1
 80007e0:	2000      	movs	r0, #0
 80007e2:	f002 fa3d 	bl	8002c60 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 80007e6:	4877      	ldr	r0, [pc, #476]	; (80009c4 <main+0x240>)
 80007e8:	f000 fe1c 	bl	8001424 <UTIL_LCD_SetFuncDriver>
  Display_InitialContent();
 80007ec:	f000 f904 	bl	80009f8 <Display_InitialContent>

  Init_SDRAM();
 80007f0:	f000 face 	bl	8000d90 <Init_SDRAM>
  simple_SDRAM_test();
 80007f4:	f000 fb86 	bl	8000f04 <simple_SDRAM_test>
  SDRAM_init_matrices();
 80007f8:	f000 fc0a 	bl	8001010 <SDRAM_init_matrices>
  Display_InitialContent();
 80007fc:	f000 f8fc 	bl	80009f8 <Display_InitialContent>


  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
 8000800:	4871      	ldr	r0, [pc, #452]	; (80009c8 <main+0x244>)
 8000802:	f000 fe65 	bl	80014d0 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font16);
 8000806:	4871      	ldr	r0, [pc, #452]	; (80009cc <main+0x248>)
 8000808:	f000 fe8a 	bl	8001520 <UTIL_LCD_SetFont>
  sprintf((char* )time_str1, (const char*)"Vsebina v SDRAM: ");
 800080c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000810:	496f      	ldr	r1, [pc, #444]	; (80009d0 <main+0x24c>)
 8000812:	4618      	mov	r0, r3
 8000814:	f00c fe80 	bl	800d518 <siprintf>
  strcat((char* )time_str1, (char *)sdram_read_Buffer);
 8000818:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800081c:	496d      	ldr	r1, [pc, #436]	; (80009d4 <main+0x250>)
 800081e:	4618      	mov	r0, r3
 8000820:	f00c fe9a 	bl	800d558 <strcat>
  UTIL_LCD_DisplayStringAt(60, (y_size/2 + 65), (uint8_t *)time_str1, LEFT_MODE);
 8000824:	4b6c      	ldr	r3, [pc, #432]	; (80009d8 <main+0x254>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	f103 0141 	add.w	r1, r3, #65	; 0x41
 800082e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000832:	2303      	movs	r3, #3
 8000834:	203c      	movs	r0, #60	; 0x3c
 8000836:	f000 feef 	bl	8001618 <UTIL_LCD_DisplayStringAt>
#endif
  while (1){

	  // Row-major order access:
	  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
	  timer_val_start = __HAL_TIM_GET_COUNTER(&TIM3Handle);
 800083a:	4b60      	ldr	r3, [pc, #384]	; (80009bc <main+0x238>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000840:	b29a      	uxth	r2, r3
 8000842:	4b66      	ldr	r3, [pc, #408]	; (80009dc <main+0x258>)
 8000844:	801a      	strh	r2, [r3, #0]
	  SDRAM_mat_row_access_test();
 8000846:	f000 fc27 	bl	8001098 <SDRAM_mat_row_access_test>
	  timer_val_end = __HAL_TIM_GET_COUNTER(&TIM3Handle);
 800084a:	4b5c      	ldr	r3, [pc, #368]	; (80009bc <main+0x238>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000850:	b29a      	uxth	r2, r3
 8000852:	4b63      	ldr	r3, [pc, #396]	; (80009e0 <main+0x25c>)
 8000854:	801a      	strh	r2, [r3, #0]
	  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);

	  if (timer_val_end > timer_val_start)
 8000856:	4b62      	ldr	r3, [pc, #392]	; (80009e0 <main+0x25c>)
 8000858:	881a      	ldrh	r2, [r3, #0]
 800085a:	4b60      	ldr	r3, [pc, #384]	; (80009dc <main+0x258>)
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	429a      	cmp	r2, r3
 8000860:	d908      	bls.n	8000874 <main+0xf0>
		  elapsed_rows = timer_val_end - timer_val_start;
 8000862:	4b5f      	ldr	r3, [pc, #380]	; (80009e0 <main+0x25c>)
 8000864:	881a      	ldrh	r2, [r3, #0]
 8000866:	4b5d      	ldr	r3, [pc, #372]	; (80009dc <main+0x258>)
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	1ad3      	subs	r3, r2, r3
 800086c:	b29a      	uxth	r2, r3
 800086e:	4b5d      	ldr	r3, [pc, #372]	; (80009e4 <main+0x260>)
 8000870:	801a      	strh	r2, [r3, #0]
 8000872:	e007      	b.n	8000884 <main+0x100>
	  else
		  elapsed_rows = timer_val_end + (65536-timer_val_start);
 8000874:	4b5a      	ldr	r3, [pc, #360]	; (80009e0 <main+0x25c>)
 8000876:	881a      	ldrh	r2, [r3, #0]
 8000878:	4b58      	ldr	r3, [pc, #352]	; (80009dc <main+0x258>)
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	b29a      	uxth	r2, r3
 8000880:	4b58      	ldr	r3, [pc, #352]	; (80009e4 <main+0x260>)
 8000882:	801a      	strh	r2, [r3, #0]
#ifdef __SDRAM_WRITE_COMPARE___
	  if (SDRAM_compare_matrices()==0) {
#endif
		  BSP_LED_On(LED_GREEN);
 8000884:	2000      	movs	r0, #0
 8000886:	f001 fd45 	bl	8002314 <BSP_LED_On>
	  	  HAL_Delay(__DELAY);
 800088a:	2064      	movs	r0, #100	; 0x64
 800088c:	f003 fb12 	bl	8003eb4 <HAL_Delay>
#ifdef __SDRAM_WRITE_COMPARE___
	  }
	  else Error_Handler();
#endif
	  BSP_LED_Off(LED_GREEN);
 8000890:	2000      	movs	r0, #0
 8000892:	f001 fd5d 	bl	8002350 <BSP_LED_Off>

	  // Column-major order access:
	  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
	  timer_val_start = __HAL_TIM_GET_COUNTER(&TIM3Handle);
 8000896:	4b49      	ldr	r3, [pc, #292]	; (80009bc <main+0x238>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800089c:	b29a      	uxth	r2, r3
 800089e:	4b4f      	ldr	r3, [pc, #316]	; (80009dc <main+0x258>)
 80008a0:	801a      	strh	r2, [r3, #0]
	  SDRAM_mat_col_access_test();
 80008a2:	f000 fc59 	bl	8001158 <SDRAM_mat_col_access_test>
	  timer_val_end = __HAL_TIM_GET_COUNTER(&TIM3Handle);
 80008a6:	4b45      	ldr	r3, [pc, #276]	; (80009bc <main+0x238>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	4b4c      	ldr	r3, [pc, #304]	; (80009e0 <main+0x25c>)
 80008b0:	801a      	strh	r2, [r3, #0]
	  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);

	  if (timer_val_end > timer_val_start)
 80008b2:	4b4b      	ldr	r3, [pc, #300]	; (80009e0 <main+0x25c>)
 80008b4:	881a      	ldrh	r2, [r3, #0]
 80008b6:	4b49      	ldr	r3, [pc, #292]	; (80009dc <main+0x258>)
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d908      	bls.n	80008d0 <main+0x14c>
		  elapsed_cols = timer_val_end - timer_val_start;
 80008be:	4b48      	ldr	r3, [pc, #288]	; (80009e0 <main+0x25c>)
 80008c0:	881a      	ldrh	r2, [r3, #0]
 80008c2:	4b46      	ldr	r3, [pc, #280]	; (80009dc <main+0x258>)
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	4b47      	ldr	r3, [pc, #284]	; (80009e8 <main+0x264>)
 80008cc:	801a      	strh	r2, [r3, #0]
 80008ce:	e007      	b.n	80008e0 <main+0x15c>
	  else
		  elapsed_cols = timer_val_end + (65536-timer_val_start);
 80008d0:	4b43      	ldr	r3, [pc, #268]	; (80009e0 <main+0x25c>)
 80008d2:	881a      	ldrh	r2, [r3, #0]
 80008d4:	4b41      	ldr	r3, [pc, #260]	; (80009dc <main+0x258>)
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	b29a      	uxth	r2, r3
 80008dc:	4b42      	ldr	r3, [pc, #264]	; (80009e8 <main+0x264>)
 80008de:	801a      	strh	r2, [r3, #0]
#ifdef __SDRAM_WRITE_COMPARE___
	  if (SDRAM_compare_matrices()==0) {
#endif
		  BSP_LED_On(LED_RED);
 80008e0:	2001      	movs	r0, #1
 80008e2:	f001 fd17 	bl	8002314 <BSP_LED_On>
	  	  HAL_Delay(__DELAY);
 80008e6:	2064      	movs	r0, #100	; 0x64
 80008e8:	f003 fae4 	bl	8003eb4 <HAL_Delay>
#ifdef __SDRAM_WRITE_COMPARE___
	  }
	  else Error_Handler();
#endif
	  BSP_LED_Off(LED_RED);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f001 fd2f 	bl	8002350 <BSP_LED_Off>

	  // DMA memory transfer:
	  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
	  timer_val_start = __HAL_TIM_GET_COUNTER(&TIM3Handle);
 80008f2:	4b32      	ldr	r3, [pc, #200]	; (80009bc <main+0x238>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	4b38      	ldr	r3, [pc, #224]	; (80009dc <main+0x258>)
 80008fc:	801a      	strh	r2, [r3, #0]
	  SDRAM_MDMA_mat_row_access_test();
 80008fe:	f000 fc03 	bl	8001108 <SDRAM_MDMA_mat_row_access_test>
	  timer_val_end = __HAL_TIM_GET_COUNTER(&TIM3Handle);
 8000902:	4b2e      	ldr	r3, [pc, #184]	; (80009bc <main+0x238>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000908:	b29a      	uxth	r2, r3
 800090a:	4b35      	ldr	r3, [pc, #212]	; (80009e0 <main+0x25c>)
 800090c:	801a      	strh	r2, [r3, #0]
	  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);

	  if (timer_val_end > timer_val_start)
 800090e:	4b34      	ldr	r3, [pc, #208]	; (80009e0 <main+0x25c>)
 8000910:	881a      	ldrh	r2, [r3, #0]
 8000912:	4b32      	ldr	r3, [pc, #200]	; (80009dc <main+0x258>)
 8000914:	881b      	ldrh	r3, [r3, #0]
 8000916:	429a      	cmp	r2, r3
 8000918:	d908      	bls.n	800092c <main+0x1a8>
		  elapsed_dma = timer_val_end - timer_val_start;
 800091a:	4b31      	ldr	r3, [pc, #196]	; (80009e0 <main+0x25c>)
 800091c:	881a      	ldrh	r2, [r3, #0]
 800091e:	4b2f      	ldr	r3, [pc, #188]	; (80009dc <main+0x258>)
 8000920:	881b      	ldrh	r3, [r3, #0]
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	b29a      	uxth	r2, r3
 8000926:	4b31      	ldr	r3, [pc, #196]	; (80009ec <main+0x268>)
 8000928:	801a      	strh	r2, [r3, #0]
 800092a:	e007      	b.n	800093c <main+0x1b8>
	  else
		  elapsed_dma = timer_val_end + (65536-timer_val_start);
 800092c:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <main+0x25c>)
 800092e:	881a      	ldrh	r2, [r3, #0]
 8000930:	4b2a      	ldr	r3, [pc, #168]	; (80009dc <main+0x258>)
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	b29a      	uxth	r2, r3
 8000938:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <main+0x268>)
 800093a:	801a      	strh	r2, [r3, #0]
#ifdef __SDRAM_WRITE_COMPARE___
	  if (SDRAM_compare_matrices()==0) {
#endif
		  BSP_LED_On(LED_RED);
 800093c:	2001      	movs	r0, #1
 800093e:	f001 fce9 	bl	8002314 <BSP_LED_On>
		  BSP_LED_On(LED_GREEN);
 8000942:	2000      	movs	r0, #0
 8000944:	f001 fce6 	bl	8002314 <BSP_LED_On>
	  	  HAL_Delay(__DELAY);
 8000948:	2064      	movs	r0, #100	; 0x64
 800094a:	f003 fab3 	bl	8003eb4 <HAL_Delay>
	  	  BSP_LED_On(LED_RED);
 800094e:	2001      	movs	r0, #1
 8000950:	f001 fce0 	bl	8002314 <BSP_LED_On>
		  BSP_LED_On(LED_GREEN);
 8000954:	2000      	movs	r0, #0
 8000956:	f001 fcdd 	bl	8002314 <BSP_LED_On>
	  	  HAL_Delay(__DELAY);
 800095a:	2064      	movs	r0, #100	; 0x64
 800095c:	f003 faaa 	bl	8003eb4 <HAL_Delay>
#ifdef __SDRAM_WRITE_COMPARE___
	  }
	  else Error_Handler();
#endif
	  BSP_LED_Off(LED_RED);
 8000960:	2001      	movs	r0, #1
 8000962:	f001 fcf5 	bl	8002350 <BSP_LED_Off>
	  BSP_LED_Off(LED_GREEN);
 8000966:	2000      	movs	r0, #0
 8000968:	f001 fcf2 	bl	8002350 <BSP_LED_Off>


	  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
 800096c:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000970:	f000 fdae 	bl	80014d0 <UTIL_LCD_SetTextColor>
	  sprintf((char*)time_str1, "Rows:%5dus  Cols:%5dus MDMA:%4dus", elapsed_rows, elapsed_cols, elapsed_dma);
 8000974:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <main+0x260>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <main+0x264>)
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	4619      	mov	r1, r3
 8000980:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <main+0x268>)
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	460b      	mov	r3, r1
 800098c:	4918      	ldr	r1, [pc, #96]	; (80009f0 <main+0x26c>)
 800098e:	f00c fdc3 	bl	800d518 <siprintf>
	  UTIL_LCD_DisplayStringAt(0, (y_size/2 + 25), (uint8_t *)time_str1, CENTER_MODE);
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <main+0x254>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	085b      	lsrs	r3, r3, #1
 8000998:	f103 0119 	add.w	r1, r3, #25
 800099c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80009a0:	2301      	movs	r3, #1
 80009a2:	2000      	movs	r0, #0
 80009a4:	f000 fe38 	bl	8001618 <UTIL_LCD_DisplayStringAt>
	  printf("%s \n", time_str1);
 80009a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009ac:	4619      	mov	r1, r3
 80009ae:	4811      	ldr	r0, [pc, #68]	; (80009f4 <main+0x270>)
 80009b0:	f00c fcd4 	bl	800d35c <iprintf>
	  HAL_Delay(__DELAY);
 80009b4:	2064      	movs	r0, #100	; 0x64
 80009b6:	f003 fa7d 	bl	8003eb4 <HAL_Delay>
	  timer_val_start = __HAL_TIM_GET_COUNTER(&TIM3Handle);
 80009ba:	e73e      	b.n	800083a <main+0xb6>
 80009bc:	240001d4 	.word	0x240001d4
 80009c0:	24000140 	.word	0x24000140
 80009c4:	080103f0 	.word	0x080103f0
 80009c8:	ffff0000 	.word	0xffff0000
 80009cc:	2400000c 	.word	0x2400000c
 80009d0:	0800e7f4 	.word	0x0800e7f4
 80009d4:	24000620 	.word	0x24000620
 80009d8:	24000130 	.word	0x24000130
 80009dc:	24000134 	.word	0x24000134
 80009e0:	24000136 	.word	0x24000136
 80009e4:	24000138 	.word	0x24000138
 80009e8:	2400013a 	.word	0x2400013a
 80009ec:	2400013c 	.word	0x2400013c
 80009f0:	0800e808 	.word	0x0800e808
 80009f4:	0800e82c 	.word	0x0800e82c

080009f8 <Display_InitialContent>:
  * @brief  Display main demo messages
  * @param  None
  * @retval None
  */
static void Display_InitialContent(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af02      	add	r7, sp, #8

  BSP_LCD_GetXSize(0, &x_size);
 80009fe:	4936      	ldr	r1, [pc, #216]	; (8000ad8 <Display_InitialContent+0xe0>)
 8000a00:	2000      	movs	r0, #0
 8000a02:	f002 fb09 	bl	8003018 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 8000a06:	4935      	ldr	r1, [pc, #212]	; (8000adc <Display_InitialContent+0xe4>)
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f002 fb23 	bl	8003054 <BSP_LCD_GetYSize>

  UTIL_LCD_SetFont(&Font16);
 8000a0e:	4834      	ldr	r0, [pc, #208]	; (8000ae0 <Display_InitialContent+0xe8>)
 8000a10:	f000 fd86 	bl	8001520 <UTIL_LCD_SetFont>

  /* Clear the LCD */
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 8000a14:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000a18:	f000 fd6e 	bl	80014f8 <UTIL_LCD_SetBackColor>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8000a1c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000a20:	f000 fdae 	bl	8001580 <UTIL_LCD_Clear>
  BSP_LCD_FillRect(0, 0, 0, x_size, y_size, UTIL_LCD_COLOR_BLACK);
 8000a24:	4b2c      	ldr	r3, [pc, #176]	; (8000ad8 <Display_InitialContent+0xe0>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b2c      	ldr	r3, [pc, #176]	; (8000adc <Display_InitialContent+0xe4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8000a30:	9101      	str	r1, [sp, #4]
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	4613      	mov	r3, r2
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f002 fcd8 	bl	80033f0 <BSP_LCD_FillRect>

  /* Set the LCD Text Color */
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a44:	f000 fd44 	bl	80014d0 <UTIL_LCD_SetTextColor>

  /* Display LCD messages */
  UTIL_LCD_DisplayStringAt(0, 20, (uint8_t *)"STM32H750B BSP", CENTER_MODE);
 8000a48:	2301      	movs	r3, #1
 8000a4a:	4a26      	ldr	r2, [pc, #152]	; (8000ae4 <Display_InitialContent+0xec>)
 8000a4c:	2114      	movs	r1, #20
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 fde2 	bl	8001618 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetFont(&Font20);
 8000a54:	4824      	ldr	r0, [pc, #144]	; (8000ae8 <Display_InitialContent+0xf0>)
 8000a56:	f000 fd63 	bl	8001520 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 45, (uint8_t *)"Organizacija racunalniskih", CENTER_MODE);
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	4a23      	ldr	r2, [pc, #140]	; (8000aec <Display_InitialContent+0xf4>)
 8000a5e:	212d      	movs	r1, #45	; 0x2d
 8000a60:	2000      	movs	r0, #0
 8000a62:	f000 fdd9 	bl	8001618 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 70, (uint8_t *)"sistemov", CENTER_MODE);
 8000a66:	2301      	movs	r3, #1
 8000a68:	4a21      	ldr	r2, [pc, #132]	; (8000af0 <Display_InitialContent+0xf8>)
 8000a6a:	2146      	movs	r1, #70	; 0x46
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f000 fdd3 	bl	8001618 <UTIL_LCD_DisplayStringAt>


  /* Draw Bitmap */
  //UTIL_LCD_DrawBitmap((x_size - 80)/2, 65, (uint8_t *)stlogo);

  UTIL_LCD_SetFont(&Font16);
 8000a72:	481b      	ldr	r0, [pc, #108]	; (8000ae0 <Display_InitialContent+0xe8>)
 8000a74:	f000 fd54 	bl	8001520 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, y_size - 20, (uint8_t *)"Copyright (c) Pa3cio 2022", CENTER_MODE);
 8000a78:	4b18      	ldr	r3, [pc, #96]	; (8000adc <Display_InitialContent+0xe4>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f1a3 0114 	sub.w	r1, r3, #20
 8000a80:	2301      	movs	r3, #1
 8000a82:	4a1c      	ldr	r2, [pc, #112]	; (8000af4 <Display_InitialContent+0xfc>)
 8000a84:	2000      	movs	r0, #0
 8000a86:	f000 fdc7 	bl	8001618 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_SetFont(&Font20);
 8000a8a:	4817      	ldr	r0, [pc, #92]	; (8000ae8 <Display_InitialContent+0xf0>)
 8000a8c:	f000 fd48 	bl	8001520 <UTIL_LCD_SetFont>
  BSP_LCD_FillRect(0, 0, y_size/2 - 35, x_size, 120, UTIL_LCD_COLOR_BLUE);
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <Display_InitialContent+0xe4>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	085b      	lsrs	r3, r3, #1
 8000a96:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <Display_InitialContent+0xe0>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4916      	ldr	r1, [pc, #88]	; (8000af8 <Display_InitialContent+0x100>)
 8000aa0:	9101      	str	r1, [sp, #4]
 8000aa2:	2178      	movs	r1, #120	; 0x78
 8000aa4:	9100      	str	r1, [sp, #0]
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f002 fca1 	bl	80033f0 <BSP_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8000aae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ab2:	f000 fd0d 	bl	80014d0 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 8000ab6:	4810      	ldr	r0, [pc, #64]	; (8000af8 <Display_InitialContent+0x100>)
 8000ab8:	f000 fd1e 	bl	80014f8 <UTIL_LCD_SetBackColor>
  UTIL_LCD_DisplayStringAt(0, y_size/2 - 25 , (uint8_t *)"FMC SDRAM test", CENTER_MODE);
 8000abc:	4b07      	ldr	r3, [pc, #28]	; (8000adc <Display_InitialContent+0xe4>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	085b      	lsrs	r3, r3, #1
 8000ac2:	f1a3 0119 	sub.w	r1, r3, #25
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	4a0c      	ldr	r2, [pc, #48]	; (8000afc <Display_InitialContent+0x104>)
 8000aca:	2000      	movs	r0, #0
 8000acc:	f000 fda4 	bl	8001618 <UTIL_LCD_DisplayStringAt>
  //sprintf(desc,"%s example", BSP_examples[DemoIndex].DemoName);
  //UTIL_LCD_DisplayStringAt(0, y_size/2 + 15, (uint8_t *)desc, CENTER_MODE);
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2400012c 	.word	0x2400012c
 8000adc:	24000130 	.word	0x24000130
 8000ae0:	2400000c 	.word	0x2400000c
 8000ae4:	0800e834 	.word	0x0800e834
 8000ae8:	24000004 	.word	0x24000004
 8000aec:	0800e844 	.word	0x0800e844
 8000af0:	0800e860 	.word	0x0800e860
 8000af4:	0800e86c 	.word	0x0800e86c
 8000af8:	ff0000ff 	.word	0xff0000ff
 8000afc:	0800e888 	.word	0x0800e888

08000b00 <BSP_PB_Callback>:
* @brief  EXTI line detection callbacks.
* @param  GPIO_Pin: Specifies the pins connected EXTI line
* @retval None
*/
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
 if(Button == BUTTON_USER)
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d102      	bne.n	8000b16 <BSP_PB_Callback+0x16>
  {
    ButtonState = 1;
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <BSP_PB_Callback+0x24>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	601a      	str	r2, [r3, #0]
  }
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	24000128 	.word	0x24000128

08000b28 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b09e      	sub	sp, #120	; 0x78
 8000b2c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b34:	2002      	movs	r0, #2
 8000b36:	f007 f819 	bl	8007b6c <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	4b42      	ldr	r3, [pc, #264]	; (8000c48 <SystemClock_Config+0x120>)
 8000b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b42:	4a41      	ldr	r2, [pc, #260]	; (8000c48 <SystemClock_Config+0x120>)
 8000b44:	f023 0301 	bic.w	r3, r3, #1
 8000b48:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b4a:	4b3f      	ldr	r3, [pc, #252]	; (8000c48 <SystemClock_Config+0x120>)
 8000b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	4b3d      	ldr	r3, [pc, #244]	; (8000c4c <SystemClock_Config+0x124>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a3c      	ldr	r2, [pc, #240]	; (8000c4c <SystemClock_Config+0x124>)
 8000b5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b3a      	ldr	r3, [pc, #232]	; (8000c4c <SystemClock_Config+0x124>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b6c:	bf00      	nop
 8000b6e:	4b37      	ldr	r3, [pc, #220]	; (8000c4c <SystemClock_Config+0x124>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b7a:	d1f8      	bne.n	8000b6e <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b84:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b92:	2302      	movs	r3, #2
 8000b94:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 8000b96:	2305      	movs	r3, #5
 8000b98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000b9a:	23a0      	movs	r3, #160	; 0xa0
 8000b9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000baa:	2304      	movs	r3, #4
 8000bac:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000bb2:	2308      	movs	r3, #8
 8000bb4:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f007 f810 	bl	8007be0 <HAL_RCC_OscConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000bc6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000bce:	f000 f8d7 	bl	8000d80 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000bd2:	233f      	movs	r3, #63	; 0x3f
 8000bd4:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bde:	2308      	movs	r3, #8
 8000be0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000be2:	2340      	movs	r3, #64	; 0x40
 8000be4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000be6:	2340      	movs	r3, #64	; 0x40
 8000be8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bee:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bf0:	2340      	movs	r3, #64	; 0x40
 8000bf2:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000bf4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bf8:	2104      	movs	r1, #4
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f007 fc4a 	bl	8008494 <HAL_RCC_ClockConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000c06:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000c0e:	f000 f8b7 	bl	8000d80 <Error_Handler>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
 */

  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <SystemClock_Config+0x128>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <SystemClock_Config+0x128>)
 8000c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c1c:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <SystemClock_Config+0x128>)
 8000c20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c24:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <SystemClock_Config+0x128>)
 8000c26:	f043 0302 	orr.w	r3, r3, #2
 8000c2a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <SystemClock_Config+0x128>)
 8000c30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c34:	f003 0302 	and.w	r3, r3, #2
 8000c38:	603b      	str	r3, [r7, #0]
 8000c3a:	683b      	ldr	r3, [r7, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
 8000c3c:	f003 f96a 	bl	8003f14 <HAL_EnableCompensationCell>
}
 8000c40:	bf00      	nop
 8000c42:	3778      	adds	r7, #120	; 0x78
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	58000400 	.word	0x58000400
 8000c4c:	58024800 	.word	0x58024800
 8000c50:	58024400 	.word	0x58024400

08000c54 <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
    MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 8000c5a:	f003 fa7b 	bl	8004154 <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
 8000c62:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000c66:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000c68:	2317      	movs	r3, #23
 8000c6a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000c74:	2301      	movs	r3, #1
 8000c76:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000c84:	2300      	movs	r3, #0
 8000c86:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f003 fa98 	bl	80041c4 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c94:	2004      	movs	r0, #4
 8000c96:	f003 fa75 	bl	8004184 <HAL_MPU_Enable>

}
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000caa:	4b34      	ldr	r3, [pc, #208]	; (8000d7c <CPU_CACHE_Enable+0xd8>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d11b      	bne.n	8000cee <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000cb6:	f3bf 8f4f 	dsb	sy
}
 8000cba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cbc:	f3bf 8f6f 	isb	sy
}
 8000cc0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000cc2:	4b2e      	ldr	r3, [pc, #184]	; (8000d7c <CPU_CACHE_Enable+0xd8>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000cca:	f3bf 8f4f 	dsb	sy
}
 8000cce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cd0:	f3bf 8f6f 	isb	sy
}
 8000cd4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000cd6:	4b29      	ldr	r3, [pc, #164]	; (8000d7c <CPU_CACHE_Enable+0xd8>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	4a28      	ldr	r2, [pc, #160]	; (8000d7c <CPU_CACHE_Enable+0xd8>)
 8000cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ce2:	f3bf 8f4f 	dsb	sy
}
 8000ce6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ce8:	f3bf 8f6f 	isb	sy
}
 8000cec:	e000      	b.n	8000cf0 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000cee:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000cf0:	4b22      	ldr	r3, [pc, #136]	; (8000d7c <CPU_CACHE_Enable+0xd8>)
 8000cf2:	695b      	ldr	r3, [r3, #20]
 8000cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d138      	bne.n	8000d6e <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <CPU_CACHE_Enable+0xd8>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000d04:	f3bf 8f4f 	dsb	sy
}
 8000d08:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <CPU_CACHE_Enable+0xd8>)
 8000d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d10:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	0b5b      	lsrs	r3, r3, #13
 8000d16:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d1a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	08db      	lsrs	r3, r3, #3
 8000d20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d24:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	015a      	lsls	r2, r3, #5
 8000d2a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000d2e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d34:	4911      	ldr	r1, [pc, #68]	; (8000d7c <CPU_CACHE_Enable+0xd8>)
 8000d36:	4313      	orrs	r3, r2
 8000d38:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	1e5a      	subs	r2, r3, #1
 8000d40:	607a      	str	r2, [r7, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1ef      	bne.n	8000d26 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	1e5a      	subs	r2, r3, #1
 8000d4a:	60ba      	str	r2, [r7, #8]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1e5      	bne.n	8000d1c <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000d50:	f3bf 8f4f 	dsb	sy
}
 8000d54:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <CPU_CACHE_Enable+0xd8>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <CPU_CACHE_Enable+0xd8>)
 8000d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d60:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d62:	f3bf 8f4f 	dsb	sy
}
 8000d66:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d68:	f3bf 8f6f 	isb	sy
}
 8000d6c:	e000      	b.n	8000d70 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000d6e:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  BSP_LED_On(LED_RED);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f001 fac3 	bl	8002314 <BSP_LED_On>
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <Error_Handler+0xe>

08000d90 <Init_SDRAM>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t Init_SDRAM(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  hsdram[0].Instance = FMC_SDRAM_DEVICE;
 8000d94:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <Init_SDRAM+0xa4>)
 8000d96:	4a28      	ldr	r2, [pc, #160]	; (8000e38 <Init_SDRAM+0xa8>)
 8000d98:	601a      	str	r2, [r3, #0]


  /* FMC SDRAM configuration register: */
  hsdram[0].Init.SDBank             = FMC_SDRAM_BANK2;				// use FMC SDRAM Bank 2
 8000d9a:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <Init_SDRAM+0xa4>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	605a      	str	r2, [r3, #4]
  hsdram[0].Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;	// 256 columns per row
 8000da0:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <Init_SDRAM+0xa4>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  hsdram[0].Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;	// 4096 rows per bank
 8000da6:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <Init_SDRAM+0xa4>)
 8000da8:	2204      	movs	r2, #4
 8000daa:	60da      	str	r2, [r3, #12]
  hsdram[0].Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_16;	// 16-bit word
 8000dac:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <Init_SDRAM+0xa4>)
 8000dae:	2210      	movs	r2, #16
 8000db0:	611a      	str	r2, [r3, #16]
  hsdram[0].Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;	//
 8000db2:	4b20      	ldr	r3, [pc, #128]	; (8000e34 <Init_SDRAM+0xa4>)
 8000db4:	2240      	movs	r2, #64	; 0x40
 8000db6:	615a      	str	r2, [r3, #20]
  hsdram[0].Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;		// CAS Latency
 8000db8:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <Init_SDRAM+0xa4>)
 8000dba:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000dbe:	619a      	str	r2, [r3, #24]
  hsdram[0].Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <Init_SDRAM+0xa4>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	61da      	str	r2, [r3, #28]
  hsdram[0].Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;	    // SDRAM CLK is HCLK/2 (HCLK/3 also possible)
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <Init_SDRAM+0xa4>)
 8000dc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dcc:	621a      	str	r2, [r3, #32]
  hsdram[0].Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;		// single read requests are managed as
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <Init_SDRAM+0xa4>)
 8000dd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24
  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	// bursts using FIFO. The SDRAM controller anticipates
  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	    // the next read commands
  hsdram[0].Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <Init_SDRAM+0xa4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	629a      	str	r2, [r3, #40]	; 0x28


  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  /* These parameters are from the MT48LC4M32B2 Data Sheet, Table 18 and Table 19 */
  sdramTiming.LoadToActiveDelay    = 2;		// t_MRD (LMR to ACTIVE = 2 CLK)
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <Init_SDRAM+0xac>)
 8000dde:	2202      	movs	r2, #2
 8000de0:	601a      	str	r2, [r3, #0]
  sdramTiming.ExitSelfRefreshDelay = 7;		// t_XSR (exit self refresh command to Activate = 70 ns)
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <Init_SDRAM+0xac>)
 8000de4:	2207      	movs	r2, #7
 8000de6:	605a      	str	r2, [r3, #4]
  sdramTiming.SelfRefreshTime      = 5;		// t_RAS (ACTIVE-to-PRECHARGE = 42 ns)
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <Init_SDRAM+0xac>)
 8000dea:	2205      	movs	r2, #5
 8000dec:	609a      	str	r2, [r3, #8]
  sdramTiming.RowCycleDelay        = 7;		// t_RC  (ACTIVE-to-ACTIVE = 70 ns)
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <Init_SDRAM+0xac>)
 8000df0:	2207      	movs	r2, #7
 8000df2:	60da      	str	r2, [r3, #12]
  sdramTiming.WriteRecoveryTime    = 2;		// t_WR (WRITE-to-PRECHARGE = 1CLK+7ns)
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <Init_SDRAM+0xac>)
 8000df6:	2202      	movs	r2, #2
 8000df8:	611a      	str	r2, [r3, #16]
  sdramTiming.RPDelay              = 2;		// t_RP  (20 ns @ 100MHz)
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <Init_SDRAM+0xac>)
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	615a      	str	r2, [r3, #20]
  sdramTiming.RCDDelay             = 2;		// t_RCD (20 ns @ 100MHz)
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <Init_SDRAM+0xac>)
 8000e02:	2202      	movs	r2, #2
 8000e04:	619a      	str	r2, [r3, #24]

  /* SDRAM controller initialization */

  if(HAL_SDRAM_Init(&hsdram[0], &sdramTiming) != HAL_OK)
 8000e06:	490d      	ldr	r1, [pc, #52]	; (8000e3c <Init_SDRAM+0xac>)
 8000e08:	480a      	ldr	r0, [pc, #40]	; (8000e34 <Init_SDRAM+0xa4>)
 8000e0a:	f009 fcfb 	bl	800a804 <HAL_SDRAM_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <Init_SDRAM+0x8c>
  {
    sdramstatus = SDRAM_ERROR;
 8000e14:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <Init_SDRAM+0xb0>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	701a      	strb	r2, [r3, #0]
 8000e1a:	e002      	b.n	8000e22 <Init_SDRAM+0x92>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <Init_SDRAM+0xb0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
  }

  /* Once the FMC SDRAM Ctrl is initialized, we can access and initialize the SDRAM chip */
  /* SDRAM initialization sequence */
  SDRAM_Initialization_sequence(SDRAM_REFRESH_COUNT);
 8000e22:	f240 6004 	movw	r0, #1540	; 0x604
 8000e26:	f000 f80d 	bl	8000e44 <SDRAM_Initialization_sequence>

  return sdramstatus;
 8000e2a:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <Init_SDRAM+0xb0>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	240217e0 	.word	0x240217e0
 8000e38:	52004140 	.word	0x52004140
 8000e3c:	24020a20 	.word	0x24020a20
 8000e40:	24000000 	.word	0x24000000

08000e44 <SDRAM_Initialization_sequence>:
  * other than those specified in the SDRAM Data Sheet may result in undefined operation.
  * @param  RefreshCount: SDRAM refresh counter value
  * @retval None
  */
void SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  sdramCmd.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000e50:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <SDRAM_Initialization_sequence+0xb8>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	601a      	str	r2, [r3, #0]
  sdramCmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 8000e56:	4b29      	ldr	r3, [pc, #164]	; (8000efc <SDRAM_Initialization_sequence+0xb8>)
 8000e58:	2208      	movs	r2, #8
 8000e5a:	605a      	str	r2, [r3, #4]
  sdramCmd.AutoRefreshNumber      = 1;
 8000e5c:	4b27      	ldr	r3, [pc, #156]	; (8000efc <SDRAM_Initialization_sequence+0xb8>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	609a      	str	r2, [r3, #8]
  sdramCmd.ModeRegisterDefinition = 0;
 8000e62:	4b26      	ldr	r3, [pc, #152]	; (8000efc <SDRAM_Initialization_sequence+0xb8>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]


  /* Send the Clock Configuration Enable command to the target bank*/
  /* The command is sent as soon as the Command MODE field in the CMR is written */
  HAL_SDRAM_SendCommand(&hsdram[0], &sdramCmd, SDRAM_TIMEOUT);
 8000e68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e6c:	4923      	ldr	r1, [pc, #140]	; (8000efc <SDRAM_Initialization_sequence+0xb8>)
 8000e6e:	4824      	ldr	r0, [pc, #144]	; (8000f00 <SDRAM_Initialization_sequence+0xbc>)
 8000e70:	f009 fd6c 	bl	800a94c <HAL_SDRAM_SendCommand>
   * Once the clock is stable, the SDRAM requires a 100μs delay prior to issuing any command
   */

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000e74:	2001      	movs	r0, #1
 8000e76:	f003 f81d 	bl	8003eb4 <HAL_Delay>
  /*
   * Once the 100μs delay has been satisfied, a PRECHARGE command should be applied.
   * All banks must then be precharged, thereby placing the device in the all banks idle state.
   */
  /* Step 3: Configure a PALL (precharge all) command */
  sdramCmd.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000e7a:	4b20      	ldr	r3, [pc, #128]	; (8000efc <SDRAM_Initialization_sequence+0xb8>)
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	601a      	str	r2, [r3, #0]
  sdramCmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 8000e80:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <SDRAM_Initialization_sequence+0xb8>)
 8000e82:	2208      	movs	r2, #8
 8000e84:	605a      	str	r2, [r3, #4]
  sdramCmd.AutoRefreshNumber      = 1;
 8000e86:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <SDRAM_Initialization_sequence+0xb8>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	609a      	str	r2, [r3, #8]
  sdramCmd.ModeRegisterDefinition = 0;
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <SDRAM_Initialization_sequence+0xb8>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]

  /* Send the Precharge All command to the target bank */
  /* The command is sent as soon as the Command MODE field in the CMR is written */
  HAL_SDRAM_SendCommand(&hsdram[0], &sdramCmd, SDRAM_TIMEOUT);
 8000e92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e96:	4919      	ldr	r1, [pc, #100]	; (8000efc <SDRAM_Initialization_sequence+0xb8>)
 8000e98:	4819      	ldr	r0, [pc, #100]	; (8000f00 <SDRAM_Initialization_sequence+0xbc>)
 8000e9a:	f009 fd57 	bl	800a94c <HAL_SDRAM_SendCommand>
  /*
   * Once in the idle state, at least two AUTO REFRESH cycles must be performed.
   * If desired, more than two AUTO REFRESH commands can be issued in the sequence.
   */
  /* Step 4: Configure an Auto Refresh command */
  sdramCmd.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000e9e:	4b17      	ldr	r3, [pc, #92]	; (8000efc <SDRAM_Initialization_sequence+0xb8>)
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	601a      	str	r2, [r3, #0]
  sdramCmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 8000ea4:	4b15      	ldr	r3, [pc, #84]	; (8000efc <SDRAM_Initialization_sequence+0xb8>)
 8000ea6:	2208      	movs	r2, #8
 8000ea8:	605a      	str	r2, [r3, #4]
  sdramCmd.AutoRefreshNumber      = 8;
 8000eaa:	4b14      	ldr	r3, [pc, #80]	; (8000efc <SDRAM_Initialization_sequence+0xb8>)
 8000eac:	2208      	movs	r2, #8
 8000eae:	609a      	str	r2, [r3, #8]
  sdramCmd.ModeRegisterDefinition = 0;
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <SDRAM_Initialization_sequence+0xb8>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]

  /* Send the Auto-refresh commands to the target bank */
  /* The command is sent as soon as the Command MODE field in the CMR is written */
  HAL_SDRAM_SendCommand(&hsdram[0], &sdramCmd, SDRAM_TIMEOUT);
 8000eb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eba:	4910      	ldr	r1, [pc, #64]	; (8000efc <SDRAM_Initialization_sequence+0xb8>)
 8000ebc:	4810      	ldr	r0, [pc, #64]	; (8000f00 <SDRAM_Initialization_sequence+0xbc>)
 8000ebe:	f009 fd45 	bl	800a94c <HAL_SDRAM_SendCommand>
   * will power up in an unknown state, it should be loaded with desired bit values prior to
   * applying any operational command. Using the LMR command, program the mode
   * register.
   */
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8000ec2:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000ec6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  sdramCmd.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <SDRAM_Initialization_sequence+0xb8>)
 8000eca:	2204      	movs	r2, #4
 8000ecc:	601a      	str	r2, [r3, #0]
  sdramCmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 8000ece:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <SDRAM_Initialization_sequence+0xb8>)
 8000ed0:	2208      	movs	r2, #8
 8000ed2:	605a      	str	r2, [r3, #4]
  sdramCmd.AutoRefreshNumber      = 1;
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <SDRAM_Initialization_sequence+0xb8>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	609a      	str	r2, [r3, #8]
  sdramCmd.ModeRegisterDefinition = tmpmrd;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4a07      	ldr	r2, [pc, #28]	; (8000efc <SDRAM_Initialization_sequence+0xb8>)
 8000ede:	60d3      	str	r3, [r2, #12]

  /* Send the Load Mode Register command to the target bank */
  /* The command is sent as soon as the Command MODE field in the CMR is written */
  HAL_SDRAM_SendCommand(&hsdram[0], &sdramCmd, SDRAM_TIMEOUT);
 8000ee0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ee4:	4905      	ldr	r1, [pc, #20]	; (8000efc <SDRAM_Initialization_sequence+0xb8>)
 8000ee6:	4806      	ldr	r0, [pc, #24]	; (8000f00 <SDRAM_Initialization_sequence+0xbc>)
 8000ee8:	f009 fd30 	bl	800a94c <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter in Refresh Timer register */
  /* This 13-bit field defines the refresh rate of the SDRAM device. It is expressed in number of memory
     clock cycles. */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram[0], RefreshCount);
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	4804      	ldr	r0, [pc, #16]	; (8000f00 <SDRAM_Initialization_sequence+0xbc>)
 8000ef0:	f009 fd61 	bl	800a9b6 <HAL_SDRAM_ProgramRefreshRate>
}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	24020a3c 	.word	0x24020a3c
 8000f00:	240217e0 	.word	0x240217e0

08000f04 <simple_SDRAM_test>:



void simple_SDRAM_test(void){
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0

	// Init pisalni buffer:
	for (int i = 0; i<SDRAM_BUFFER_SIZE; i+=8) {
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	e033      	b.n	8000f78 <simple_SDRAM_test+0x74>
		sdram_write_Buffer[i] = 0x63336150;
 8000f10:	4a38      	ldr	r2, [pc, #224]	; (8000ff4 <simple_SDRAM_test+0xf0>)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	4938      	ldr	r1, [pc, #224]	; (8000ff8 <simple_SDRAM_test+0xf4>)
 8000f16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		sdram_write_Buffer[i+1] = 0x6e206f69;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	4a35      	ldr	r2, [pc, #212]	; (8000ff4 <simple_SDRAM_test+0xf0>)
 8000f20:	4936      	ldr	r1, [pc, #216]	; (8000ffc <simple_SDRAM_test+0xf8>)
 8000f22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		sdram_write_Buffer[i+2] = 0x20616d69;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	3302      	adds	r3, #2
 8000f2a:	4a32      	ldr	r2, [pc, #200]	; (8000ff4 <simple_SDRAM_test+0xf0>)
 8000f2c:	4934      	ldr	r1, [pc, #208]	; (8001000 <simple_SDRAM_test+0xfc>)
 8000f2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		sdram_write_Buffer[i+3] = 0x6d6a6f70;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	3303      	adds	r3, #3
 8000f36:	4a2f      	ldr	r2, [pc, #188]	; (8000ff4 <simple_SDRAM_test+0xf0>)
 8000f38:	4932      	ldr	r1, [pc, #200]	; (8001004 <simple_SDRAM_test+0x100>)
 8000f3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		sdram_write_Buffer[i+4] = 0x21212161;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	3304      	adds	r3, #4
 8000f42:	4a2c      	ldr	r2, [pc, #176]	; (8000ff4 <simple_SDRAM_test+0xf0>)
 8000f44:	4930      	ldr	r1, [pc, #192]	; (8001008 <simple_SDRAM_test+0x104>)
 8000f46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		sdram_write_Buffer[i+5] = 0x20202020;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	3305      	adds	r3, #5
 8000f4e:	4a29      	ldr	r2, [pc, #164]	; (8000ff4 <simple_SDRAM_test+0xf0>)
 8000f50:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
 8000f54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		sdram_write_Buffer[i+6] = 0x20202020;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3306      	adds	r3, #6
 8000f5c:	4a25      	ldr	r2, [pc, #148]	; (8000ff4 <simple_SDRAM_test+0xf0>)
 8000f5e:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
 8000f62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		sdram_write_Buffer[i+7] = 0x00000000;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	3307      	adds	r3, #7
 8000f6a:	4a22      	ldr	r2, [pc, #136]	; (8000ff4 <simple_SDRAM_test+0xf0>)
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i<SDRAM_BUFFER_SIZE; i+=8) {
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	3308      	adds	r3, #8
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2bff      	cmp	r3, #255	; 0xff
 8000f7c:	d9c8      	bls.n	8000f10 <simple_SDRAM_test+0xc>
	}

	for (int i = 0; i<SDRAM_BUFFER_SIZE; i++) {
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	e008      	b.n	8000f96 <simple_SDRAM_test+0x92>
		sdram_read_Buffer[i] = 0xffffffff;
 8000f84:	4a21      	ldr	r2, [pc, #132]	; (800100c <simple_SDRAM_test+0x108>)
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i<SDRAM_BUFFER_SIZE; i++) {
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	3301      	adds	r3, #1
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	2bff      	cmp	r3, #255	; 0xff
 8000f9a:	d9f3      	bls.n	8000f84 <simple_SDRAM_test+0x80>
	}

	// Piši v SDRAM:
	for (int i = 0; i < SDRAM_BUFFER_SIZE; i++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	e00c      	b.n	8000fbc <simple_SDRAM_test+0xb8>
	{
		*(uint32_t*) (SDRAM_DEVICE_ADDR + 4*i) = sdram_write_Buffer[i];
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 8000faa:	4619      	mov	r1, r3
 8000fac:	4a11      	ldr	r2, [pc, #68]	; (8000ff4 <simple_SDRAM_test+0xf0>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb4:	600b      	str	r3, [r1, #0]
	for (int i = 0; i < SDRAM_BUFFER_SIZE; i++)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2bff      	cmp	r3, #255	; 0xff
 8000fc0:	d9ef      	bls.n	8000fa2 <simple_SDRAM_test+0x9e>
	}


	// Beri iz SDRAM-a:
	for (int i = 0; i < SDRAM_BUFFER_SIZE; i++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	e00b      	b.n	8000fe0 <simple_SDRAM_test+0xdc>
	{
		sdram_read_Buffer[i] = *(uint32_t*) (SDRAM_DEVICE_ADDR + 4*i);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	490e      	ldr	r1, [pc, #56]	; (800100c <simple_SDRAM_test+0x108>)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < SDRAM_BUFFER_SIZE; i++)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	2bff      	cmp	r3, #255	; 0xff
 8000fe4:	d9f0      	bls.n	8000fc8 <simple_SDRAM_test+0xc4>
	}
}
 8000fe6:	bf00      	nop
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	24000220 	.word	0x24000220
 8000ff8:	63336150 	.word	0x63336150
 8000ffc:	6e206f69 	.word	0x6e206f69
 8001000:	20616d69 	.word	0x20616d69
 8001004:	6d6a6f70 	.word	0x6d6a6f70
 8001008:	21212161 	.word	0x21212161
 800100c:	24000620 	.word	0x24000620

08001010 <SDRAM_init_matrices>:



void SDRAM_init_matrices(void) {
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
	for (int i = 0; i<MAT_ROWS; i++) {
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	e013      	b.n	8001044 <SDRAM_init_matrices+0x34>
		for(int j=0; j<SDRAM_COLS; j++ ){
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	e00a      	b.n	8001038 <SDRAM_init_matrices+0x28>
			matrixA[i][j] = 0;
 8001022:	491b      	ldr	r1, [pc, #108]	; (8001090 <SDRAM_init_matrices+0x80>)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	021a      	lsls	r2, r3, #8
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	4413      	add	r3, r2
 800102c:	2200      	movs	r2, #0
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int j=0; j<SDRAM_COLS; j++ ){
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	3301      	adds	r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	2bff      	cmp	r3, #255	; 0xff
 800103c:	ddf1      	ble.n	8001022 <SDRAM_init_matrices+0x12>
	for (int i = 0; i<MAT_ROWS; i++) {
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	3301      	adds	r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b3f      	cmp	r3, #63	; 0x3f
 8001048:	d9e8      	bls.n	800101c <SDRAM_init_matrices+0xc>
		}
	}

	for (int i = 0; i<MAT_ROWS; i++) {
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	e014      	b.n	800107a <SDRAM_init_matrices+0x6a>
		for(int j=0; j<SDRAM_COLS; j++ ){
 8001050:	2300      	movs	r3, #0
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	e00b      	b.n	800106e <SDRAM_init_matrices+0x5e>
			matrixB[i][j] = 0xFFFFFFFF;
 8001056:	490f      	ldr	r1, [pc, #60]	; (8001094 <SDRAM_init_matrices+0x84>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	021a      	lsls	r2, r3, #8
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	4413      	add	r3, r2
 8001060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int j=0; j<SDRAM_COLS; j++ ){
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	3301      	adds	r3, #1
 800106c:	603b      	str	r3, [r7, #0]
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	2bff      	cmp	r3, #255	; 0xff
 8001072:	ddf0      	ble.n	8001056 <SDRAM_init_matrices+0x46>
	for (int i = 0; i<MAT_ROWS; i++) {
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3301      	adds	r3, #1
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b3f      	cmp	r3, #63	; 0x3f
 800107e:	d9e7      	bls.n	8001050 <SDRAM_init_matrices+0x40>
		}
	}
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	24000a20 	.word	0x24000a20
 8001094:	24010a20 	.word	0x24010a20

08001098 <SDRAM_mat_row_access_test>:
			*(uint32_t*)address = matrixA[i][j];
		}
	}
}

void SDRAM_mat_row_access_test(void){
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
			}
		}
	}
#endif

	for (int k = 0; k < N; k++)
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	e025      	b.n	80010f0 <SDRAM_mat_row_access_test+0x58>
	{
		for (int i = 0; i<MAT_ROWS; i++) {
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	e01c      	b.n	80010e4 <SDRAM_mat_row_access_test+0x4c>
			for(int j=0; j<SDRAM_COLS; j++) {
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	e013      	b.n	80010d8 <SDRAM_mat_row_access_test+0x40>
				address = SDRAM_DEVICE_ADDR + ((i*SDRAM_COLS + j)<<2);
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	021a      	lsls	r2, r3, #8
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4413      	add	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 80010be:	603b      	str	r3, [r7, #0]
				matrixB[i][j] = *(uint32_t*)address;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	480f      	ldr	r0, [pc, #60]	; (8001104 <SDRAM_mat_row_access_test+0x6c>)
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	0219      	lsls	r1, r3, #8
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	440b      	add	r3, r1
 80010ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			for(int j=0; j<SDRAM_COLS; j++) {
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3301      	adds	r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2bff      	cmp	r3, #255	; 0xff
 80010dc:	dde8      	ble.n	80010b0 <SDRAM_mat_row_access_test+0x18>
		for (int i = 0; i<MAT_ROWS; i++) {
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	3301      	adds	r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	2b3f      	cmp	r3, #63	; 0x3f
 80010e8:	d9df      	bls.n	80010aa <SDRAM_mat_row_access_test+0x12>
	for (int k = 0; k < N; k++)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	3301      	adds	r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	ddd6      	ble.n	80010a4 <SDRAM_mat_row_access_test+0xc>
			}
		}
	}
}
 80010f6:	bf00      	nop
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	24010a20 	.word	0x24010a20

08001108 <SDRAM_MDMA_mat_row_access_test>:
			status= HAL_DMA_PollForTransfer(&DMA2_SDRAM_Handle, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
		}
	}
}

void SDRAM_MDMA_mat_row_access_test(void){
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
	volatile uint32_t address;
	volatile HAL_StatusTypeDef status;

	for (int k = 0; k < N; k++)
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	e013      	b.n	800113c <SDRAM_MDMA_mat_row_access_test+0x34>
	{
		HAL_SDRAM_Read_DMA(&hsdram[0], (uint32_t *) SDRAM_DEVICE_ADDR, (uint32_t) matrixB, MAT_ROWS * SDRAM_COLS);
 8001114:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001118:	4a0c      	ldr	r2, [pc, #48]	; (800114c <SDRAM_MDMA_mat_row_access_test+0x44>)
 800111a:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800111e:	480c      	ldr	r0, [pc, #48]	; (8001150 <SDRAM_MDMA_mat_row_access_test+0x48>)
 8001120:	f009 fbc0 	bl	800a8a4 <HAL_SDRAM_Read_DMA>
		while (mdma_complete == 0) {}
 8001124:	bf00      	nop
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <SDRAM_MDMA_mat_row_access_test+0x4c>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0fa      	beq.n	8001126 <SDRAM_MDMA_mat_row_access_test+0x1e>
		mdma_complete = 0;
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <SDRAM_MDMA_mat_row_access_test+0x4c>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
	for (int k = 0; k < N; k++)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	3301      	adds	r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2b00      	cmp	r3, #0
 8001140:	dde8      	ble.n	8001114 <SDRAM_MDMA_mat_row_access_test+0xc>
	}
}
 8001142:	bf00      	nop
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	24010a20 	.word	0x24010a20
 8001150:	240217e0 	.word	0x240217e0
 8001154:	2400013e 	.word	0x2400013e

08001158 <SDRAM_mat_col_access_test>:



void SDRAM_mat_col_access_test(void){
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
			}
		}
	}
#endif

	for (int k = 0; k < N; k++)
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	e025      	b.n	80011b0 <SDRAM_mat_col_access_test+0x58>
	{
		for (int i = 0; i<SDRAM_COLS; i++) {
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	e01c      	b.n	80011a4 <SDRAM_mat_col_access_test+0x4c>
			for(int j=0; j<MAT_ROWS; j++) {
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	e013      	b.n	8001198 <SDRAM_mat_col_access_test+0x40>
				address = SDRAM_DEVICE_ADDR + ((j*SDRAM_COLS + i)<<2);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	021a      	lsls	r2, r3, #8
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	4413      	add	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 800117e:	603b      	str	r3, [r7, #0]
				matrixB[j][i] = *(uint32_t*)address;
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	480f      	ldr	r0, [pc, #60]	; (80011c4 <SDRAM_mat_col_access_test+0x6c>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	0219      	lsls	r1, r3, #8
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	440b      	add	r3, r1
 800118e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			for(int j=0; j<MAT_ROWS; j++) {
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3301      	adds	r3, #1
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b3f      	cmp	r3, #63	; 0x3f
 800119c:	d9e8      	bls.n	8001170 <SDRAM_mat_col_access_test+0x18>
		for (int i = 0; i<SDRAM_COLS; i++) {
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	3301      	adds	r3, #1
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	2bff      	cmp	r3, #255	; 0xff
 80011a8:	dddf      	ble.n	800116a <SDRAM_mat_col_access_test+0x12>
	for (int k = 0; k < N; k++)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	3301      	adds	r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	ddd6      	ble.n	8001164 <SDRAM_mat_col_access_test+0xc>
			}
		}
	}
}
 80011b6:	bf00      	nop
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	24010a20 	.word	0x24010a20

080011c8 <Init_TIM3>:
/*
 * Init and start TIM3 in Interrupt mode
 *
 * */

HAL_StatusTypeDef Init_TIM3(TIM_HandleTypeDef* TIMHandle) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b092      	sub	sp, #72	; 0x48
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]

	RCC_ClkInitTypeDef    clkconfig;
	volatile uint32_t uwTimclock = 0U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
	volatile uint32_t uwPrescalerValue = 0U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
	volatile uint32_t uwAPB1Prescaler = 0U;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
	volatile uint32_t HCLKFreq;
	volatile uint32_t APB1Freq;
	volatile uint32_t APB2Freq;

	/*Configure the TIM3 IRQ priority */
	HAL_NVIC_SetPriority(TIM3_IRQn, TICK_INT_PRIORITY, 0U);
 80011dc:	2200      	movs	r2, #0
 80011de:	210f      	movs	r1, #15
 80011e0:	201d      	movs	r0, #29
 80011e2:	f002 ff82 	bl	80040ea <HAL_NVIC_SetPriority>
	/* Enable the TIM3 global Interrupt */
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011e6:	201d      	movs	r0, #29
 80011e8:	f002 ff99 	bl	800411e <HAL_NVIC_EnableIRQ>
	/* Enable TIM6 clock */
	__HAL_RCC_TIM3_CLK_ENABLE();
 80011ec:	4b27      	ldr	r3, [pc, #156]	; (800128c <Init_TIM3+0xc4>)
 80011ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011f2:	4a26      	ldr	r2, [pc, #152]	; (800128c <Init_TIM3+0xc4>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011fc:	4b23      	ldr	r3, [pc, #140]	; (800128c <Init_TIM3+0xc4>)
 80011fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]

	// Find out the TIM3 CLK frequency:
    SysClockFreq = HAL_RCC_GetSysClockFreq();
 800120a:	f007 faf9 	bl	8008800 <HAL_RCC_GetSysClockFreq>
 800120e:	4603      	mov	r3, r0
 8001210:	61bb      	str	r3, [r7, #24]
	HCLKFreq = HAL_RCC_GetHCLKFreq();
 8001212:	f007 fc6f 	bl	8008af4 <HAL_RCC_GetHCLKFreq>
 8001216:	4603      	mov	r3, r0
 8001218:	617b      	str	r3, [r7, #20]
	APB1Freq = HAL_RCC_GetPCLK1Freq();
 800121a:	f007 fc9b 	bl	8008b54 <HAL_RCC_GetPCLK1Freq>
 800121e:	4603      	mov	r3, r0
 8001220:	613b      	str	r3, [r7, #16]
	//APB2Freq = HAL_RCC_GetPCLK2Freq();
	/* Get APB1 prescaler */
	uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001224:	61fb      	str	r3, [r7, #28]
	/* Compute TIMERs clock */
	if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d102      	bne.n	8001232 <Init_TIM3+0x6a>
	{
		uwTimclock = APB1Freq; // if PPRE1 bits in RCC_CFGR are 0XX (APB1 Prescaler = 1), then TIMs run at APB1 clk)
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
 8001230:	e002      	b.n	8001238 <Init_TIM3+0x70>
	}
	else
	{
	  uwTimclock = 2*APB1Freq; // if PPRE1 bits in RCC_CFGR are 1XX (APB1 Prescaler > 1), then TIMs run at 2*APB1 clk)
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Compute the prescaler value to have TIM3 counter clock equal to 1 MHz */
	uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123a:	4a15      	ldr	r2, [pc, #84]	; (8001290 <Init_TIM3+0xc8>)
 800123c:	fba2 2303 	umull	r2, r3, r2, r3
 8001240:	0c9b      	lsrs	r3, r3, #18
 8001242:	3b01      	subs	r3, #1
 8001244:	623b      	str	r3, [r7, #32]
	/* Initialize TIM3 */
	TIMHandle->Instance = TIM3;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a12      	ldr	r2, [pc, #72]	; (8001294 <Init_TIM3+0xcc>)
 800124a:	601a      	str	r2, [r3, #0]
	TIMHandle->Init.Period = 65535U;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001252:	60da      	str	r2, [r3, #12]
	TIMHandle->Init.Prescaler = uwPrescalerValue;
 8001254:	6a3a      	ldr	r2, [r7, #32]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	605a      	str	r2, [r3, #4]
	TIMHandle->Init.ClockDivision = 0;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
	TIMHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
	TIMHandle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]

	if(HAL_TIM_Base_Init(TIMHandle) == HAL_OK)
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f009 fc18 	bl	800aaa2 <HAL_TIM_Base_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d104      	bne.n	8001282 <Init_TIM3+0xba>
	{
		/* Start the TIM time Base generation in interrupt mode */
		//return HAL_TIM_Base_Start_IT(TIMHandle);
		return HAL_TIM_Base_Start(TIMHandle);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f009 fc73 	bl	800ab64 <HAL_TIM_Base_Start>
 800127e:	4603      	mov	r3, r0
 8001280:	e000      	b.n	8001284 <Init_TIM3+0xbc>
	}
	/* Return function status */
	return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
}
 8001284:	4618      	mov	r0, r3
 8001286:	3748      	adds	r7, #72	; 0x48
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	58024400 	.word	0x58024400
 8001290:	431bde83 	.word	0x431bde83
 8001294:	40000400 	.word	0x40000400

08001298 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80012a0:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <RetargetInit+0x28>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <RetargetInit+0x2c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6898      	ldr	r0, [r3, #8]
 80012ac:	2300      	movs	r3, #0
 80012ae:	2202      	movs	r2, #2
 80012b0:	2100      	movs	r1, #0
 80012b2:	f00c f86b 	bl	800d38c <setvbuf>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	24020a4c 	.word	0x24020a4c
 80012c4:	24000038 	.word	0x24000038

080012c8 <_isatty>:

int _isatty(int fd) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	db04      	blt.n	80012e0 <_isatty+0x18>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	dc01      	bgt.n	80012e0 <_isatty+0x18>
    return 1;
 80012dc:	2301      	movs	r3, #1
 80012de:	e005      	b.n	80012ec <_isatty+0x24>

  errno = EBADF;
 80012e0:	f00b fffc 	bl	800d2dc <__errno>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2209      	movs	r2, #9
 80012e8:	601a      	str	r2, [r3, #0]
  return 0;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <_close>:

int _close(int fd) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	db04      	blt.n	800130c <_close+0x18>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b02      	cmp	r3, #2
 8001306:	dc01      	bgt.n	800130c <_close+0x18>
    return 0;
 8001308:	2300      	movs	r3, #0
 800130a:	e006      	b.n	800131a <_close+0x26>

  errno = EBADF;
 800130c:	f00b ffe6 	bl	800d2dc <__errno>
 8001310:	4603      	mov	r3, r0
 8001312:	2209      	movs	r2, #9
 8001314:	601a      	str	r2, [r3, #0]
  return -1;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001322:	b580      	push	{r7, lr}
 8001324:	b084      	sub	sp, #16
 8001326:	af00      	add	r7, sp, #0
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800132e:	f00b ffd5 	bl	800d2dc <__errno>
 8001332:	4603      	mov	r3, r0
 8001334:	2209      	movs	r2, #9
 8001336:	601a      	str	r2, [r3, #0]
  return -1;
 8001338:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <_fstat>:



int _fstat(int fd, struct stat* st) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	db08      	blt.n	8001366 <_fstat+0x22>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b02      	cmp	r3, #2
 8001358:	dc05      	bgt.n	8001366 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001360:	605a      	str	r2, [r3, #4]
    return 0;
 8001362:	2300      	movs	r3, #0
 8001364:	e005      	b.n	8001372 <_fstat+0x2e>
  }

  errno = EBADF;
 8001366:	f00b ffb9 	bl	800d2dc <__errno>
 800136a:	4603      	mov	r3, r0
 800136c:	2209      	movs	r2, #9
 800136e:	601a      	str	r2, [r3, #0]
  return 0;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <_read>:


int _read(int fd, char* ptr, int len) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d110      	bne.n	80013b0 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <_read+0x4c>)
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001396:	2201      	movs	r2, #1
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	f00a f801 	bl	800b3a0 <HAL_UART_Receive>
 800139e:	4603      	mov	r3, r0
 80013a0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80013a2:	7dfb      	ldrb	r3, [r7, #23]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <_read+0x30>
      return 1;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e008      	b.n	80013be <_read+0x42>
    else
      return EIO;
 80013ac:	2305      	movs	r3, #5
 80013ae:	e006      	b.n	80013be <_read+0x42>
  }
  errno = EBADF;
 80013b0:	f00b ff94 	bl	800d2dc <__errno>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2209      	movs	r2, #9
 80013b8:	601a      	str	r2, [r3, #0]
  return -1;
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	24020a4c 	.word	0x24020a4c

080013cc <_write>:

int _write(int fd, char* ptr, int len) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d002      	beq.n	80013e4 <_write+0x18>
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d111      	bne.n	8001408 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80013e4:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <_write+0x54>)
 80013e6:	6818      	ldr	r0, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	f009 ff47 	bl	800b284 <HAL_UART_Transmit>
 80013f6:	4603      	mov	r3, r0
 80013f8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80013fa:	7dfb      	ldrb	r3, [r7, #23]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <_write+0x38>
      return len;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	e008      	b.n	8001416 <_write+0x4a>
    else
      return EIO;
 8001404:	2305      	movs	r3, #5
 8001406:	e006      	b.n	8001416 <_write+0x4a>
  }
  errno = EBADF;
 8001408:	f00b ff68 	bl	800d2dc <__errno>
 800140c:	4603      	mov	r3, r0
 800140e:	2209      	movs	r2, #9
 8001410:	601a      	str	r2, [r3, #0]
  return -1;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001416:	4618      	mov	r0, r3
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	24020a4c 	.word	0x24020a4c

08001424 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a22      	ldr	r2, [pc, #136]	; (80014bc <UTIL_LCD_SetFuncDriver+0x98>)
 8001432:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	4a20      	ldr	r2, [pc, #128]	; (80014bc <UTIL_LCD_SetFuncDriver+0x98>)
 800143a:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	4a1e      	ldr	r2, [pc, #120]	; (80014bc <UTIL_LCD_SetFuncDriver+0x98>)
 8001442:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	4a1c      	ldr	r2, [pc, #112]	; (80014bc <UTIL_LCD_SetFuncDriver+0x98>)
 800144a:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	4a1a      	ldr	r2, [pc, #104]	; (80014bc <UTIL_LCD_SetFuncDriver+0x98>)
 8001452:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	4a18      	ldr	r2, [pc, #96]	; (80014bc <UTIL_LCD_SetFuncDriver+0x98>)
 800145a:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	4a16      	ldr	r2, [pc, #88]	; (80014bc <UTIL_LCD_SetFuncDriver+0x98>)
 8001462:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	4a14      	ldr	r2, [pc, #80]	; (80014bc <UTIL_LCD_SetFuncDriver+0x98>)
 800146a:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	4a12      	ldr	r2, [pc, #72]	; (80014bc <UTIL_LCD_SetFuncDriver+0x98>)
 8001472:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001478:	4a10      	ldr	r2, [pc, #64]	; (80014bc <UTIL_LCD_SetFuncDriver+0x98>)
 800147a:	6253      	str	r3, [r2, #36]	; 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001480:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <UTIL_LCD_SetFuncDriver+0x98>)
 8001482:	6293      	str	r3, [r2, #40]	; 0x28

  DrawProp->LcdLayer = 0;
 8001484:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <UTIL_LCD_SetFuncDriver+0x9c>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 800148a:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <UTIL_LCD_SetFuncDriver+0x9c>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <UTIL_LCD_SetFuncDriver+0x98>)
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	4a0b      	ldr	r2, [pc, #44]	; (80014c4 <UTIL_LCD_SetFuncDriver+0xa0>)
 8001496:	4611      	mov	r1, r2
 8001498:	2000      	movs	r0, #0
 800149a:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <UTIL_LCD_SetFuncDriver+0x98>)
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	4a09      	ldr	r2, [pc, #36]	; (80014c8 <UTIL_LCD_SetFuncDriver+0xa4>)
 80014a2:	4611      	mov	r1, r2
 80014a4:	2000      	movs	r0, #0
 80014a6:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <UTIL_LCD_SetFuncDriver+0x98>)
 80014aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ac:	4a07      	ldr	r2, [pc, #28]	; (80014cc <UTIL_LCD_SetFuncDriver+0xa8>)
 80014ae:	4611      	mov	r1, r2
 80014b0:	2000      	movs	r0, #0
 80014b2:	4798      	blx	r3
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	24020a90 	.word	0x24020a90
 80014c0:	24020a50 	.word	0x24020a50
 80014c4:	24020a64 	.word	0x24020a64
 80014c8:	24020a68 	.word	0x24020a68
 80014cc:	24020a6c 	.word	0x24020a6c

080014d0 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <UTIL_LCD_SetTextColor+0x24>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	4a05      	ldr	r2, [pc, #20]	; (80014f4 <UTIL_LCD_SetTextColor+0x24>)
 80014de:	015b      	lsls	r3, r3, #5
 80014e0:	4413      	add	r3, r2
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	601a      	str	r2, [r3, #0]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	24020a50 	.word	0x24020a50

080014f8 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <UTIL_LCD_SetBackColor+0x24>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	4a05      	ldr	r2, [pc, #20]	; (800151c <UTIL_LCD_SetBackColor+0x24>)
 8001506:	015b      	lsls	r3, r3, #5
 8001508:	4413      	add	r3, r2
 800150a:	3304      	adds	r3, #4
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	601a      	str	r2, [r3, #0]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	24020a50 	.word	0x24020a50

08001520 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <UTIL_LCD_SetFont+0x24>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	4a05      	ldr	r2, [pc, #20]	; (8001544 <UTIL_LCD_SetFont+0x24>)
 800152e:	015b      	lsls	r3, r3, #5
 8001530:	4413      	add	r3, r2
 8001532:	3308      	adds	r3, #8
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	601a      	str	r2, [r3, #0]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	24020a50 	.word	0x24020a50

08001548 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b087      	sub	sp, #28
 800154c:	af02      	add	r7, sp, #8
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
 8001554:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <UTIL_LCD_FillRGBRect+0x30>)
 8001558:	685c      	ldr	r4, [r3, #4]
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <UTIL_LCD_FillRGBRect+0x34>)
 800155c:	6918      	ldr	r0, [r3, #16]
 800155e:	6a3b      	ldr	r3, [r7, #32]
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	68f9      	ldr	r1, [r7, #12]
 800156c:	47a0      	blx	r4
}
 800156e:	bf00      	nop
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	bd90      	pop	{r4, r7, pc}
 8001576:	bf00      	nop
 8001578:	24020a90 	.word	0x24020a90
 800157c:	24020a50 	.word	0x24020a50

08001580 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af02      	add	r7, sp, #8
 8001586:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8001588:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <UTIL_LCD_Clear+0x28>)
 800158a:	695a      	ldr	r2, [r3, #20]
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <UTIL_LCD_Clear+0x28>)
 800158e:	6999      	ldr	r1, [r3, #24]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	460b      	mov	r3, r1
 8001596:	2100      	movs	r1, #0
 8001598:	2000      	movs	r0, #0
 800159a:	f000 f8eb 	bl	8001774 <UTIL_LCD_FillRect>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	24020a50 	.word	0x24020a50

080015ac <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	4613      	mov	r3, r2
 80015b8:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <UTIL_LCD_DisplayChar+0x68>)
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	4a15      	ldr	r2, [pc, #84]	; (8001614 <UTIL_LCD_DisplayChar+0x68>)
 80015c0:	015b      	lsls	r3, r3, #5
 80015c2:	4413      	add	r3, r2
 80015c4:	3308      	adds	r3, #8
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80015ce:	4911      	ldr	r1, [pc, #68]	; (8001614 <UTIL_LCD_DisplayChar+0x68>)
 80015d0:	68c9      	ldr	r1, [r1, #12]
 80015d2:	4810      	ldr	r0, [pc, #64]	; (8001614 <UTIL_LCD_DisplayChar+0x68>)
 80015d4:	0149      	lsls	r1, r1, #5
 80015d6:	4401      	add	r1, r0
 80015d8:	3108      	adds	r1, #8
 80015da:	6809      	ldr	r1, [r1, #0]
 80015dc:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80015de:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <UTIL_LCD_DisplayChar+0x68>)
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	480b      	ldr	r0, [pc, #44]	; (8001614 <UTIL_LCD_DisplayChar+0x68>)
 80015e8:	015b      	lsls	r3, r3, #5
 80015ea:	4403      	add	r3, r0
 80015ec:	3308      	adds	r3, #8
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	889b      	ldrh	r3, [r3, #4]
 80015f2:	3307      	adds	r3, #7
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	da00      	bge.n	80015fa <UTIL_LCD_DisplayChar+0x4e>
 80015f8:	3307      	adds	r3, #7
 80015fa:	10db      	asrs	r3, r3, #3
 80015fc:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8001600:	4413      	add	r3, r2
 8001602:	461a      	mov	r2, r3
 8001604:	68b9      	ldr	r1, [r7, #8]
 8001606:	68f8      	ldr	r0, [r7, #12]
 8001608:	f000 f8ee 	bl	80017e8 <DrawChar>
}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	24020a50 	.word	0x24020a50

08001618 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 8001626:	2301      	movs	r3, #1
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 800163a:	e002      	b.n	8001642 <UTIL_LCD_DisplayStringAt+0x2a>
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	3301      	adds	r3, #1
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	61ba      	str	r2, [r7, #24]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f6      	bne.n	800163c <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 800164e:	4b48      	ldr	r3, [pc, #288]	; (8001770 <UTIL_LCD_DisplayStringAt+0x158>)
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	4a47      	ldr	r2, [pc, #284]	; (8001770 <UTIL_LCD_DisplayStringAt+0x158>)
 8001654:	68d2      	ldr	r2, [r2, #12]
 8001656:	4946      	ldr	r1, [pc, #280]	; (8001770 <UTIL_LCD_DisplayStringAt+0x158>)
 8001658:	0152      	lsls	r2, r2, #5
 800165a:	440a      	add	r2, r1
 800165c:	3208      	adds	r2, #8
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	8892      	ldrh	r2, [r2, #4]
 8001662:	fbb3 f3f2 	udiv	r3, r3, r2
 8001666:	617b      	str	r3, [r7, #20]

  switch (Mode)
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	2b03      	cmp	r3, #3
 800166c:	d018      	beq.n	80016a0 <UTIL_LCD_DisplayStringAt+0x88>
 800166e:	2b03      	cmp	r3, #3
 8001670:	dc2a      	bgt.n	80016c8 <UTIL_LCD_DisplayStringAt+0xb0>
 8001672:	2b01      	cmp	r3, #1
 8001674:	d002      	beq.n	800167c <UTIL_LCD_DisplayStringAt+0x64>
 8001676:	2b02      	cmp	r3, #2
 8001678:	d015      	beq.n	80016a6 <UTIL_LCD_DisplayStringAt+0x8e>
 800167a:	e025      	b.n	80016c8 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	4a3b      	ldr	r2, [pc, #236]	; (8001770 <UTIL_LCD_DisplayStringAt+0x158>)
 8001684:	68d2      	ldr	r2, [r2, #12]
 8001686:	493a      	ldr	r1, [pc, #232]	; (8001770 <UTIL_LCD_DisplayStringAt+0x158>)
 8001688:	0152      	lsls	r2, r2, #5
 800168a:	440a      	add	r2, r1
 800168c:	3208      	adds	r2, #8
 800168e:	6812      	ldr	r2, [r2, #0]
 8001690:	8892      	ldrh	r2, [r2, #4]
 8001692:	fb02 f303 	mul.w	r3, r2, r3
 8001696:	085b      	lsrs	r3, r3, #1
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	4413      	add	r3, r2
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800169e:	e016      	b.n	80016ce <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80016a4:	e013      	b.n	80016ce <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	4a30      	ldr	r2, [pc, #192]	; (8001770 <UTIL_LCD_DisplayStringAt+0x158>)
 80016ae:	68d2      	ldr	r2, [r2, #12]
 80016b0:	492f      	ldr	r1, [pc, #188]	; (8001770 <UTIL_LCD_DisplayStringAt+0x158>)
 80016b2:	0152      	lsls	r2, r2, #5
 80016b4:	440a      	add	r2, r1
 80016b6:	3208      	adds	r2, #8
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	8892      	ldrh	r2, [r2, #4]
 80016bc:	fb03 f202 	mul.w	r2, r3, r2
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80016c6:	e002      	b.n	80016ce <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80016cc:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <UTIL_LCD_DisplayStringAt+0xc4>
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016da:	d31b      	bcc.n	8001714 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 80016dc:	2301      	movs	r3, #1
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 80016e0:	e018      	b.n	8001714 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	461a      	mov	r2, r3
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016ec:	f7ff ff5e 	bl	80015ac <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 80016f0:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <UTIL_LCD_DisplayStringAt+0x158>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	4a1e      	ldr	r2, [pc, #120]	; (8001770 <UTIL_LCD_DisplayStringAt+0x158>)
 80016f6:	015b      	lsls	r3, r3, #5
 80016f8:	4413      	add	r3, r2
 80016fa:	3308      	adds	r3, #8
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	889b      	ldrh	r3, [r3, #4]
 8001700:	461a      	mov	r2, r3
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	4413      	add	r3, r2
 8001706:	627b      	str	r3, [r7, #36]	; 0x24

    /* Point on the next character */
    Text++;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3301      	adds	r3, #1
 800170c:	607b      	str	r3, [r7, #4]
    i++;
 800170e:	6a3b      	ldr	r3, [r7, #32]
 8001710:	3301      	adds	r3, #1
 8001712:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	bf14      	ite	ne
 800171c:	2301      	movne	r3, #1
 800171e:	2300      	moveq	r3, #0
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4b13      	ldr	r3, [pc, #76]	; (8001770 <UTIL_LCD_DisplayStringAt+0x158>)
 8001724:	6959      	ldr	r1, [r3, #20]
 8001726:	4b12      	ldr	r3, [pc, #72]	; (8001770 <UTIL_LCD_DisplayStringAt+0x158>)
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	4811      	ldr	r0, [pc, #68]	; (8001770 <UTIL_LCD_DisplayStringAt+0x158>)
 800172c:	015b      	lsls	r3, r3, #5
 800172e:	4403      	add	r3, r0
 8001730:	3308      	adds	r3, #8
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	889b      	ldrh	r3, [r3, #4]
 8001736:	4618      	mov	r0, r3
 8001738:	6a3b      	ldr	r3, [r7, #32]
 800173a:	fb00 f303 	mul.w	r3, r0, r3
 800173e:	1acb      	subs	r3, r1, r3
 8001740:	b29b      	uxth	r3, r3
 8001742:	490b      	ldr	r1, [pc, #44]	; (8001770 <UTIL_LCD_DisplayStringAt+0x158>)
 8001744:	68c9      	ldr	r1, [r1, #12]
 8001746:	480a      	ldr	r0, [pc, #40]	; (8001770 <UTIL_LCD_DisplayStringAt+0x158>)
 8001748:	0149      	lsls	r1, r1, #5
 800174a:	4401      	add	r1, r0
 800174c:	3108      	adds	r1, #8
 800174e:	6809      	ldr	r1, [r1, #0]
 8001750:	8889      	ldrh	r1, [r1, #4]
 8001752:	428b      	cmp	r3, r1
 8001754:	bf2c      	ite	cs
 8001756:	2301      	movcs	r3, #1
 8001758:	2300      	movcc	r3, #0
 800175a:	b2db      	uxtb	r3, r3
 800175c:	4013      	ands	r3, r2
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1be      	bne.n	80016e2 <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 8001764:	bf00      	nop
 8001766:	bf00      	nop
 8001768:	3728      	adds	r7, #40	; 0x28
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	24020a50 	.word	0x24020a50

08001774 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b087      	sub	sp, #28
 8001778:	af02      	add	r7, sp, #8
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
 8001780:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <UTIL_LCD_FillRect+0x6c>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d11a      	bne.n	80017c0 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 800178a:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <UTIL_LCD_FillRect+0x70>)
 800178c:	691c      	ldr	r4, [r3, #16]
 800178e:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <UTIL_LCD_FillRect+0x6c>)
 8001790:	6918      	ldr	r0, [r3, #16]
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	08db      	lsrs	r3, r3, #3
 8001796:	f003 021f 	and.w	r2, r3, #31
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	0a9b      	lsrs	r3, r3, #10
 800179e:	015b      	lsls	r3, r3, #5
 80017a0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80017a4:	431a      	orrs	r2, r3
 80017a6:	6a3b      	ldr	r3, [r7, #32]
 80017a8:	0cdb      	lsrs	r3, r3, #19
 80017aa:	02db      	lsls	r3, r3, #11
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	4313      	orrs	r3, r2
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	68f9      	ldr	r1, [r7, #12]
 80017bc:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 80017be:	e00b      	b.n	80017d8 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <UTIL_LCD_FillRect+0x70>)
 80017c2:	691c      	ldr	r4, [r3, #16]
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <UTIL_LCD_FillRect+0x6c>)
 80017c6:	6918      	ldr	r0, [r3, #16]
 80017c8:	6a3b      	ldr	r3, [r7, #32]
 80017ca:	9301      	str	r3, [sp, #4]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	68f9      	ldr	r1, [r7, #12]
 80017d6:	47a0      	blx	r4
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd90      	pop	{r4, r7, pc}
 80017e0:	24020a50 	.word	0x24020a50
 80017e4:	24020a90 	.word	0x24020a90

080017e8 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b0b2      	sub	sp, #200	; 0xc8
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80017fa:	2300      	movs	r3, #0
 80017fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 8001800:	4ba5      	ldr	r3, [pc, #660]	; (8001a98 <DrawChar+0x2b0>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	4aa4      	ldr	r2, [pc, #656]	; (8001a98 <DrawChar+0x2b0>)
 8001806:	015b      	lsls	r3, r3, #5
 8001808:	4413      	add	r3, r2
 800180a:	3308      	adds	r3, #8
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	88db      	ldrh	r3, [r3, #6]
 8001810:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 8001814:	4ba0      	ldr	r3, [pc, #640]	; (8001a98 <DrawChar+0x2b0>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	4a9f      	ldr	r2, [pc, #636]	; (8001a98 <DrawChar+0x2b0>)
 800181a:	015b      	lsls	r3, r3, #5
 800181c:	4413      	add	r3, r2
 800181e:	3308      	adds	r3, #8
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	889b      	ldrh	r3, [r3, #4]
 8001824:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 8001828:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800182c:	3307      	adds	r3, #7
 800182e:	f023 0207 	bic.w	r2, r3, #7
 8001832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  for(i = 0; i < height; i++)
 800183c:	2300      	movs	r3, #0
 800183e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001842:	e11c      	b.n	8001a7e <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8001844:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001848:	3307      	adds	r3, #7
 800184a:	08db      	lsrs	r3, r3, #3
 800184c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001850:	fb02 f303 	mul.w	r3, r2, r3
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    switch(((width + 7)/8))
 800185c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001860:	3307      	adds	r3, #7
 8001862:	08db      	lsrs	r3, r3, #3
 8001864:	2b01      	cmp	r3, #1
 8001866:	d002      	beq.n	800186e <DrawChar+0x86>
 8001868:	2b02      	cmp	r3, #2
 800186a:	d006      	beq.n	800187a <DrawChar+0x92>
 800186c:	e011      	b.n	8001892 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 800186e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8001878:	e01d      	b.n	80018b6 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800187a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001886:	3201      	adds	r2, #1
 8001888:	7812      	ldrb	r2, [r2, #0]
 800188a:	4313      	orrs	r3, r2
 800188c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8001890:	e011      	b.n	80018b6 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001892:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	041a      	lsls	r2, r3, #16
 800189a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800189e:	3301      	adds	r3, #1
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	021b      	lsls	r3, r3, #8
 80018a4:	4313      	orrs	r3, r2
 80018a6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80018aa:	3202      	adds	r2, #2
 80018ac:	7812      	ldrb	r2, [r2, #0]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 80018b4:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80018b6:	4b78      	ldr	r3, [pc, #480]	; (8001a98 <DrawChar+0x2b0>)
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	4a77      	ldr	r2, [pc, #476]	; (8001a98 <DrawChar+0x2b0>)
 80018bc:	015b      	lsls	r3, r3, #5
 80018be:	4413      	add	r3, r2
 80018c0:	331c      	adds	r3, #28
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	f040 808c 	bne.w	80019e2 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 80018ca:	2300      	movs	r3, #0
 80018cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80018d0:	e074      	b.n	80019bc <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 80018d2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80018d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80018da:	1ad2      	subs	r2, r2, r3
 80018dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018e0:	4413      	add	r3, r2
 80018e2:	3b01      	subs	r3, #1
 80018e4:	2201      	movs	r2, #1
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	461a      	mov	r2, r3
 80018ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018f0:	4013      	ands	r3, r2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d02d      	beq.n	8001952 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 80018f6:	4b68      	ldr	r3, [pc, #416]	; (8001a98 <DrawChar+0x2b0>)
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	4a67      	ldr	r2, [pc, #412]	; (8001a98 <DrawChar+0x2b0>)
 80018fc:	015b      	lsls	r3, r3, #5
 80018fe:	4413      	add	r3, r2
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	08db      	lsrs	r3, r3, #3
 8001904:	b29b      	uxth	r3, r3
 8001906:	f003 031f 	and.w	r3, r3, #31
 800190a:	b29a      	uxth	r2, r3
 800190c:	4b62      	ldr	r3, [pc, #392]	; (8001a98 <DrawChar+0x2b0>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	4961      	ldr	r1, [pc, #388]	; (8001a98 <DrawChar+0x2b0>)
 8001912:	015b      	lsls	r3, r3, #5
 8001914:	440b      	add	r3, r1
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	0a9b      	lsrs	r3, r3, #10
 800191a:	b29b      	uxth	r3, r3
 800191c:	015b      	lsls	r3, r3, #5
 800191e:	b29b      	uxth	r3, r3
 8001920:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001924:	b29b      	uxth	r3, r3
 8001926:	4313      	orrs	r3, r2
 8001928:	b29a      	uxth	r2, r3
 800192a:	4b5b      	ldr	r3, [pc, #364]	; (8001a98 <DrawChar+0x2b0>)
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	495a      	ldr	r1, [pc, #360]	; (8001a98 <DrawChar+0x2b0>)
 8001930:	015b      	lsls	r3, r3, #5
 8001932:	440b      	add	r3, r1
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	0cdb      	lsrs	r3, r3, #19
 8001938:	b29b      	uxth	r3, r3
 800193a:	02db      	lsls	r3, r3, #11
 800193c:	b29b      	uxth	r3, r3
 800193e:	4313      	orrs	r3, r2
 8001940:	b29a      	uxth	r2, r3
 8001942:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	33c0      	adds	r3, #192	; 0xc0
 800194a:	443b      	add	r3, r7
 800194c:	f823 2c4c 	strh.w	r2, [r3, #-76]
 8001950:	e02f      	b.n	80019b2 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 8001952:	4b51      	ldr	r3, [pc, #324]	; (8001a98 <DrawChar+0x2b0>)
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	4a50      	ldr	r2, [pc, #320]	; (8001a98 <DrawChar+0x2b0>)
 8001958:	015b      	lsls	r3, r3, #5
 800195a:	4413      	add	r3, r2
 800195c:	3304      	adds	r3, #4
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	08db      	lsrs	r3, r3, #3
 8001962:	b29b      	uxth	r3, r3
 8001964:	f003 031f 	and.w	r3, r3, #31
 8001968:	b29a      	uxth	r2, r3
 800196a:	4b4b      	ldr	r3, [pc, #300]	; (8001a98 <DrawChar+0x2b0>)
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	494a      	ldr	r1, [pc, #296]	; (8001a98 <DrawChar+0x2b0>)
 8001970:	015b      	lsls	r3, r3, #5
 8001972:	440b      	add	r3, r1
 8001974:	3304      	adds	r3, #4
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	0a9b      	lsrs	r3, r3, #10
 800197a:	b29b      	uxth	r3, r3
 800197c:	015b      	lsls	r3, r3, #5
 800197e:	b29b      	uxth	r3, r3
 8001980:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001984:	b29b      	uxth	r3, r3
 8001986:	4313      	orrs	r3, r2
 8001988:	b29a      	uxth	r2, r3
 800198a:	4b43      	ldr	r3, [pc, #268]	; (8001a98 <DrawChar+0x2b0>)
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	4942      	ldr	r1, [pc, #264]	; (8001a98 <DrawChar+0x2b0>)
 8001990:	015b      	lsls	r3, r3, #5
 8001992:	440b      	add	r3, r1
 8001994:	3304      	adds	r3, #4
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	0cdb      	lsrs	r3, r3, #19
 800199a:	b29b      	uxth	r3, r3
 800199c:	02db      	lsls	r3, r3, #11
 800199e:	b29b      	uxth	r3, r3
 80019a0:	4313      	orrs	r3, r2
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	33c0      	adds	r3, #192	; 0xc0
 80019ac:	443b      	add	r3, r7
 80019ae:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 80019b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019b6:	3301      	adds	r3, #1
 80019b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80019bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80019c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d384      	bcc.n	80018d2 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	1c4b      	adds	r3, r1, #1
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80019d2:	2301      	movs	r3, #1
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f7ff fdb4 	bl	8001548 <UTIL_LCD_FillRGBRect>
 80019e0:	e048      	b.n	8001a74 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80019e8:	e032      	b.n	8001a50 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 80019ea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80019ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019f2:	1ad2      	subs	r2, r2, r3
 80019f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019f8:	4413      	add	r3, r2
 80019fa:	3b01      	subs	r3, #1
 80019fc:	2201      	movs	r2, #1
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	461a      	mov	r2, r3
 8001a04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a08:	4013      	ands	r3, r2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00d      	beq.n	8001a2a <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 8001a0e:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <DrawChar+0x2b0>)
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	4a21      	ldr	r2, [pc, #132]	; (8001a98 <DrawChar+0x2b0>)
 8001a14:	015b      	lsls	r3, r3, #5
 8001a16:	4413      	add	r3, r2
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	33c0      	adds	r3, #192	; 0xc0
 8001a22:	443b      	add	r3, r7
 8001a24:	f843 2cac 	str.w	r2, [r3, #-172]
 8001a28:	e00d      	b.n	8001a46 <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 8001a2a:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <DrawChar+0x2b0>)
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	4a1a      	ldr	r2, [pc, #104]	; (8001a98 <DrawChar+0x2b0>)
 8001a30:	015b      	lsls	r3, r3, #5
 8001a32:	4413      	add	r3, r2
 8001a34:	3304      	adds	r3, #4
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	33c0      	adds	r3, #192	; 0xc0
 8001a40:	443b      	add	r3, r7
 8001a42:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 8001a46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001a50:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001a54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d3c6      	bcc.n	80019ea <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	1c4b      	adds	r3, r1, #1
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	f107 0214 	add.w	r2, r7, #20
 8001a66:	2301      	movs	r3, #1
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f7ff fd6a 	bl	8001548 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 8001a74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a78:	3301      	adds	r3, #1
 8001a7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001a7e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a86:	429a      	cmp	r2, r3
 8001a88:	f4ff aedc 	bcc.w	8001844 <DrawChar+0x5c>
    }
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	bf00      	nop
 8001a90:	37c0      	adds	r7, #192	; 0xc0
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	24020a50 	.word	0x24020a50

08001a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <HAL_MspInit+0x38>)
 8001aa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001aa8:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <HAL_MspInit+0x38>)
 8001aaa:	f043 0302 	orr.w	r3, r3, #2
 8001aae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <HAL_MspInit+0x38>)
 8001ab4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	210f      	movs	r1, #15
 8001ac4:	f06f 0001 	mvn.w	r0, #1
 8001ac8:	f002 fb0f 	bl	80040ea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	58024400 	.word	0x58024400

08001ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b0ba      	sub	sp, #232	; 0xe8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	22c0      	movs	r2, #192	; 0xc0
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f00b fc27 	bl	800d34c <memset>
  if(huart->Instance==USART3)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a36      	ldr	r2, [pc, #216]	; (8001bdc <HAL_UART_MspInit+0x104>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d164      	bne.n	8001bd2 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b08:	f04f 0202 	mov.w	r2, #2
 8001b0c:	f04f 0300 	mov.w	r3, #0
 8001b10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b14:	2300      	movs	r3, #0
 8001b16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b1a:	f107 0310 	add.w	r3, r7, #16
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f007 f844 	bl	8008bac <HAL_RCCEx_PeriphCLKConfig>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001b2a:	f7ff f929 	bl	8000d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b2e:	4b2c      	ldr	r3, [pc, #176]	; (8001be0 <HAL_UART_MspInit+0x108>)
 8001b30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b34:	4a2a      	ldr	r2, [pc, #168]	; (8001be0 <HAL_UART_MspInit+0x108>)
 8001b36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b3e:	4b28      	ldr	r3, [pc, #160]	; (8001be0 <HAL_UART_MspInit+0x108>)
 8001b40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4c:	4b24      	ldr	r3, [pc, #144]	; (8001be0 <HAL_UART_MspInit+0x108>)
 8001b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b52:	4a23      	ldr	r2, [pc, #140]	; (8001be0 <HAL_UART_MspInit+0x108>)
 8001b54:	f043 0302 	orr.w	r3, r3, #2
 8001b58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b5c:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <HAL_UART_MspInit+0x108>)
 8001b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA11     ------> USART3_RX
    PA10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b84:	2307      	movs	r3, #7
 8001b86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4814      	ldr	r0, [pc, #80]	; (8001be4 <HAL_UART_MspInit+0x10c>)
 8001b92:	f004 fb23 	bl	80061dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bb0:	2307      	movs	r3, #7
 8001bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4809      	ldr	r0, [pc, #36]	; (8001be4 <HAL_UART_MspInit+0x10c>)
 8001bbe:	f004 fb0d 	bl	80061dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	2027      	movs	r0, #39	; 0x27
 8001bc8:	f002 fa8f 	bl	80040ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001bcc:	2027      	movs	r0, #39	; 0x27
 8001bce:	f002 faa6 	bl	800411e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bd2:	bf00      	nop
 8001bd4:	37e8      	adds	r7, #232	; 0xe8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40004800 	.word	0x40004800
 8001be0:	58024400 	.word	0x58024400
 8001be4:	58020400 	.word	0x58020400

08001be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bec:	e7fe      	b.n	8001bec <NMI_Handler+0x4>

08001bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <HardFault_Handler+0x4>

08001bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <MemManage_Handler+0x4>

08001bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfe:	e7fe      	b.n	8001bfe <BusFault_Handler+0x4>

08001c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <UsageFault_Handler+0x4>

08001c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c18:	f002 f92c 	bl	8003e74 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001c1c:	f00b facc 	bl	800d1b8 <xTaskGetSchedulerState>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d001      	beq.n	8001c2a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001c26:	f00b fb37 	bl	800d298 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <EXTI15_10_IRQHandler>:
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	af00      	add	r7, sp, #0
BSP_PB_IRQHandler(BUTTON_USER);
 8001c32:	2000      	movs	r0, #0
 8001c34:	f000 fc1c 	bl	8002470 <BSP_PB_IRQHandler>
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <TIM3_IRQHandler>:
/**
  * @brief  This function handles TIM3 interrupt requests.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void){
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TIM3Handle);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <TIM3_IRQHandler+0x10>)
 8001c42:	f009 f8c6 	bl	800add2 <HAL_TIM_IRQHandler>
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	240001d4 	.word	0x240001d4

08001c50 <USART3_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&UART3Handle);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <USART3_IRQHandler+0x10>)
 8001c56:	f009 fc6b 	bl	800b530 <HAL_UART_IRQHandler>
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	24000140 	.word	0x24000140

08001c64 <DMA2_Stream1_IRQHandler>:
  * @brief  This function handles DMA2 Stream 1 interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  BSP_AUDIO_OUT_IRQHandler(0);
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f000 fc1b 	bl	80024a4 <BSP_AUDIO_OUT_IRQHandler>
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <DMA2_Stream4_IRQHandler>:
  * @brief  This function handles DMA2 Stream 4 for SAI1B interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <DMA2_Stream4_IRQHandler+0x14>)
 8001c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f003 f848 	bl	8004d14 <HAL_DMA_IRQHandler>
}
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	24020b70 	.word	0x24020b70

08001c8c <BDMA_Channel1_IRQHandler>:
  * @brief  This function handles BDMA Channel 1 for SAI_PDM interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAI_PDMx_DMAx_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
   BSP_AUDIO_IN_IRQHandler(1, AUDIO_IN_DEVICE_DIGITAL_MIC);
 8001c90:	2130      	movs	r1, #48	; 0x30
 8001c92:	2001      	movs	r0, #1
 8001c94:	f000 fc1a 	bl	80024cc <BSP_AUDIO_IN_IRQHandler>

}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <MDMA_IRQHandler>:
/**
  * @brief  Handles MDMA transfer interrupt request.
  * @retval None
  */
void MDMA_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  BSP_SDRAM_IRQHandler(0);
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f001 ff61 	bl	8003b68 <BSP_SDRAM_IRQHandler>

}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb4:	4a14      	ldr	r2, [pc, #80]	; (8001d08 <_sbrk+0x5c>)
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <_sbrk+0x60>)
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <_sbrk+0x64>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d102      	bne.n	8001cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <_sbrk+0x64>)
 8001cca:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <_sbrk+0x68>)
 8001ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <_sbrk+0x64>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d207      	bcs.n	8001cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cdc:	f00b fafe 	bl	800d2dc <__errno>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	220c      	movs	r2, #12
 8001ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cea:	e009      	b.n	8001d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <_sbrk+0x64>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cf2:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <_sbrk+0x64>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	4a05      	ldr	r2, [pc, #20]	; (8001d10 <_sbrk+0x64>)
 8001cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	24080000 	.word	0x24080000
 8001d0c:	00000400 	.word	0x00000400
 8001d10:	24020abc 	.word	0x24020abc
 8001d14:	24021d40 	.word	0x24021d40

08001d18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d1c:	4b37      	ldr	r3, [pc, #220]	; (8001dfc <SystemInit+0xe4>)
 8001d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d22:	4a36      	ldr	r2, [pc, #216]	; (8001dfc <SystemInit+0xe4>)
 8001d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d2c:	4b34      	ldr	r3, [pc, #208]	; (8001e00 <SystemInit+0xe8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 030f 	and.w	r3, r3, #15
 8001d34:	2b06      	cmp	r3, #6
 8001d36:	d807      	bhi.n	8001d48 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d38:	4b31      	ldr	r3, [pc, #196]	; (8001e00 <SystemInit+0xe8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f023 030f 	bic.w	r3, r3, #15
 8001d40:	4a2f      	ldr	r2, [pc, #188]	; (8001e00 <SystemInit+0xe8>)
 8001d42:	f043 0307 	orr.w	r3, r3, #7
 8001d46:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d48:	4b2e      	ldr	r3, [pc, #184]	; (8001e04 <SystemInit+0xec>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a2d      	ldr	r2, [pc, #180]	; (8001e04 <SystemInit+0xec>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d54:	4b2b      	ldr	r3, [pc, #172]	; (8001e04 <SystemInit+0xec>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d5a:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <SystemInit+0xec>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	4929      	ldr	r1, [pc, #164]	; (8001e04 <SystemInit+0xec>)
 8001d60:	4b29      	ldr	r3, [pc, #164]	; (8001e08 <SystemInit+0xf0>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d66:	4b26      	ldr	r3, [pc, #152]	; (8001e00 <SystemInit+0xe8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d007      	beq.n	8001d82 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d72:	4b23      	ldr	r3, [pc, #140]	; (8001e00 <SystemInit+0xe8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f023 030f 	bic.w	r3, r3, #15
 8001d7a:	4a21      	ldr	r2, [pc, #132]	; (8001e00 <SystemInit+0xe8>)
 8001d7c:	f043 0307 	orr.w	r3, r3, #7
 8001d80:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d82:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <SystemInit+0xec>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001d88:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <SystemInit+0xec>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d8e:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <SystemInit+0xec>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d94:	4b1b      	ldr	r3, [pc, #108]	; (8001e04 <SystemInit+0xec>)
 8001d96:	4a1d      	ldr	r2, [pc, #116]	; (8001e0c <SystemInit+0xf4>)
 8001d98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d9a:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <SystemInit+0xec>)
 8001d9c:	4a1c      	ldr	r2, [pc, #112]	; (8001e10 <SystemInit+0xf8>)
 8001d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001da0:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <SystemInit+0xec>)
 8001da2:	4a1c      	ldr	r2, [pc, #112]	; (8001e14 <SystemInit+0xfc>)
 8001da4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <SystemInit+0xec>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001dac:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <SystemInit+0xec>)
 8001dae:	4a19      	ldr	r2, [pc, #100]	; (8001e14 <SystemInit+0xfc>)
 8001db0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001db2:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <SystemInit+0xec>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <SystemInit+0xec>)
 8001dba:	4a16      	ldr	r2, [pc, #88]	; (8001e14 <SystemInit+0xfc>)
 8001dbc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <SystemInit+0xec>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <SystemInit+0xec>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0e      	ldr	r2, [pc, #56]	; (8001e04 <SystemInit+0xec>)
 8001dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <SystemInit+0xec>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001dd6:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <SystemInit+0x100>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <SystemInit+0x104>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001de2:	d202      	bcs.n	8001dea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001de4:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <SystemInit+0x108>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <SystemInit+0x10c>)
 8001dec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001df0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001df2:	bf00      	nop
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00
 8001e00:	52002000 	.word	0x52002000
 8001e04:	58024400 	.word	0x58024400
 8001e08:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e0c:	02020200 	.word	0x02020200
 8001e10:	01ff0000 	.word	0x01ff0000
 8001e14:	01010280 	.word	0x01010280
 8001e18:	5c001000 	.word	0x5c001000
 8001e1c:	ffff0000 	.word	0xffff0000
 8001e20:	51008108 	.word	0x51008108
 8001e24:	52004000 	.word	0x52004000

08001e28 <USART3_Init>:
/* Private function prototypes -----------------------------------------------*/

/* Private functions ---------------------------------------------------------*/

HAL_StatusTypeDef USART3_Init(UART_HandleTypeDef* huart3)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]

  huart3->Instance = USART3;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a11      	ldr	r2, [pc, #68]	; (8001e78 <USART3_Init+0x50>)
 8001e34:	601a      	str	r2, [r3, #0]
  huart3->Init.BaudRate = 115200;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e3c:	605a      	str	r2, [r3, #4]
  huart3->Init.WordLength = UART_WORDLENGTH_8B;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  huart3->Init.StopBits = UART_STOPBITS_1;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
  huart3->Init.Parity = UART_PARITY_NONE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  huart3->Init.Mode = UART_MODE_TX_RX;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	220c      	movs	r2, #12
 8001e54:	615a      	str	r2, [r3, #20]
  huart3->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
  //huart1->Init.OverSampling = UART_OVERSAMPLING_16;
  //huart1->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  //huart1->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(huart3) != HAL_OK)
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f009 f9c1 	bl	800b1e4 <HAL_UART_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <USART3_Init+0x44>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <USART3_Init+0x46>
  }

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40004800 	.word	0x40004800

08001e7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e80:	f7ff ff4a 	bl	8001d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e84:	480c      	ldr	r0, [pc, #48]	; (8001eb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e86:	490d      	ldr	r1, [pc, #52]	; (8001ebc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e88:	4a0d      	ldr	r2, [pc, #52]	; (8001ec0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e8c:	e002      	b.n	8001e94 <LoopCopyDataInit>

08001e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e92:	3304      	adds	r3, #4

08001e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e98:	d3f9      	bcc.n	8001e8e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e9c:	4c0a      	ldr	r4, [pc, #40]	; (8001ec8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea0:	e001      	b.n	8001ea6 <LoopFillZerobss>

08001ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ea4:	3204      	adds	r2, #4

08001ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea8:	d3fb      	bcc.n	8001ea2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eaa:	f00b fa1d 	bl	800d2e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eae:	f7fe fc69 	bl	8000784 <main>
  bx  lr
 8001eb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001eb4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001eb8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ebc:	2400009c 	.word	0x2400009c
  ldr r2, =_sidata
 8001ec0:	080104dc 	.word	0x080104dc
  ldr r2, =_sbss
 8001ec4:	240000a0 	.word	0x240000a0
  ldr r4, =_ebss
 8001ec8:	24021d40 	.word	0x24021d40

08001ecc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ecc:	e7fe      	b.n	8001ecc <ADC3_IRQHandler>
	...

08001ed0 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d103      	bne.n	8001ee8 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 8001ee0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	e02c      	b.n	8001f42 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	891a      	ldrh	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	691a      	ldr	r2, [r3, #16]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	695a      	ldr	r2, [r3, #20]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a0c      	ldr	r2, [pc, #48]	; (8001f4c <FT5336_RegisterBusIO+0x7c>)
 8001f1c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a0b      	ldr	r2, [pc, #44]	; (8001f50 <FT5336_RegisterBusIO+0x80>)
 8001f22:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d004      	beq.n	8001f3c <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4798      	blx	r3
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	e002      	b.n	8001f42 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 8001f3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f40:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001f42:	68fb      	ldr	r3, [r7, #12]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	08001f75 	.word	0x08001f75
 8001f50:	08001fa9 	.word	0x08001fa9

08001f54 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3318      	adds	r3, #24
 8001f62:	6839      	ldr	r1, [r7, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 f850 	bl	800200a <ft5336_chip_id>
 8001f6a:	4603      	mov	r3, r0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8001f74:	b590      	push	{r4, r7, lr}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	607a      	str	r2, [r7, #4]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	460b      	mov	r3, r1
 8001f82:	72fb      	strb	r3, [r7, #11]
 8001f84:	4613      	mov	r3, r2
 8001f86:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	691c      	ldr	r4, [r3, #16]
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	8918      	ldrh	r0, [r3, #8]
 8001f94:	7afb      	ldrb	r3, [r7, #11]
 8001f96:	b299      	uxth	r1, r3
 8001f98:	893b      	ldrh	r3, [r7, #8]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	47a0      	blx	r4
 8001f9e:	4603      	mov	r3, r0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	371c      	adds	r7, #28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd90      	pop	{r4, r7, pc}

08001fa8 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8001fa8:	b590      	push	{r4, r7, lr}
 8001faa:	b087      	sub	sp, #28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	607a      	str	r2, [r7, #4]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	72fb      	strb	r3, [r7, #11]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	68dc      	ldr	r4, [r3, #12]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	8918      	ldrh	r0, [r3, #8]
 8001fc8:	7afb      	ldrb	r3, [r7, #11]
 8001fca:	b299      	uxth	r1, r3
 8001fcc:	893b      	ldrh	r3, [r7, #8]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	47a0      	blx	r4
 8001fd2:	4603      	mov	r3, r0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	371c      	adds	r7, #28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd90      	pop	{r4, r7, pc}

08001fdc <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8001fdc:	b590      	push	{r4, r7, lr}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	460b      	mov	r3, r1
 8001fea:	72fb      	strb	r3, [r7, #11]
 8001fec:	4613      	mov	r3, r2
 8001fee:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	685c      	ldr	r4, [r3, #4]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6898      	ldr	r0, [r3, #8]
 8001ff8:	893b      	ldrh	r3, [r7, #8]
 8001ffa:	7af9      	ldrb	r1, [r7, #11]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	47a0      	blx	r4
 8002000:	4603      	mov	r3, r0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	bd90      	pop	{r4, r7, pc}

0800200a <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8002014:	2301      	movs	r3, #1
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	21a8      	movs	r1, #168	; 0xa8
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ffde 	bl	8001fdc <ft5336_read_reg>
 8002020:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d107      	bne.n	8002038 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	781a      	ldrb	r2, [r3, #0]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8002038:	68fb      	ldr	r3, [r7, #12]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b084      	sub	sp, #16
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 800204c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002050:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4619      	mov	r1, r3
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f831 	bl	80020c0 <MT48LC4M32B2_ClockEnable>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d128      	bne.n	80020b6 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 8002064:	2001      	movs	r0, #1
 8002066:	f000 f8e1 	bl	800222c <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4619      	mov	r1, r3
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f849 	bl	8002108 <MT48LC4M32B2_Precharge>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d11c      	bne.n	80020b6 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	6819      	ldr	r1, [r3, #0]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	461a      	mov	r2, r3
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f896 	bl	80021b8 <MT48LC4M32B2_RefreshMode>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d111      	bne.n	80020b6 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 8002092:	6839      	ldr	r1, [r7, #0]
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f85b 	bl	8002150 <MT48LC4M32B2_ModeRegConfig>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10a      	bne.n	80020b6 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	4619      	mov	r1, r3
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f8ac 	bl	8002204 <MT48LC4M32B2_RefreshRate>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 80020b6:	68fb      	ldr	r3, [r7, #12]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <MT48LC4M32B2_ClockEnable+0x44>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 80020d0:	4a0c      	ldr	r2, [pc, #48]	; (8002104 <MT48LC4M32B2_ClockEnable+0x44>)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <MT48LC4M32B2_ClockEnable+0x44>)
 80020d8:	2201      	movs	r2, #1
 80020da:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <MT48LC4M32B2_ClockEnable+0x44>)
 80020de:	2200      	movs	r2, #0
 80020e0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80020e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020e6:	4907      	ldr	r1, [pc, #28]	; (8002104 <MT48LC4M32B2_ClockEnable+0x44>)
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f008 fc2f 	bl	800a94c <HAL_SDRAM_SendCommand>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 80020f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020f8:	e000      	b.n	80020fc <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80020fa:	2300      	movs	r3, #0
  }
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	24020ac0 	.word	0x24020ac0

08002108 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 8002112:	4b0e      	ldr	r3, [pc, #56]	; (800214c <MT48LC4M32B2_Precharge+0x44>)
 8002114:	2202      	movs	r2, #2
 8002116:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8002118:	4a0c      	ldr	r2, [pc, #48]	; (800214c <MT48LC4M32B2_Precharge+0x44>)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <MT48LC4M32B2_Precharge+0x44>)
 8002120:	2201      	movs	r2, #1
 8002122:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <MT48LC4M32B2_Precharge+0x44>)
 8002126:	2200      	movs	r2, #0
 8002128:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800212a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800212e:	4907      	ldr	r1, [pc, #28]	; (800214c <MT48LC4M32B2_Precharge+0x44>)
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f008 fc0b 	bl	800a94c <HAL_SDRAM_SendCommand>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800213c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002140:	e000      	b.n	8002144 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8002142:	2300      	movs	r3, #0
  }
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	24020ac0 	.word	0x24020ac0

08002150 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8002162:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8002168:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 800216e:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8002174:	4313      	orrs	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 8002178:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800217a:	2204      	movs	r2, #4
 800217c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a0c      	ldr	r2, [pc, #48]	; (80021b4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8002184:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8002186:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8002188:	2201      	movs	r2, #1
 800218a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800218c:	4a09      	ldr	r2, [pc, #36]	; (80021b4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8002192:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002196:	4907      	ldr	r1, [pc, #28]	; (80021b4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f008 fbd7 	bl	800a94c <HAL_SDRAM_SendCommand>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 80021a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021a8:	e000      	b.n	80021ac <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80021aa:	2300      	movs	r3, #0
  }
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	24020ac0 	.word	0x24020ac0

080021b8 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 80021c4:	4a0e      	ldr	r2, [pc, #56]	; (8002200 <MT48LC4M32B2_RefreshMode+0x48>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 80021ca:	4a0d      	ldr	r2, [pc, #52]	; (8002200 <MT48LC4M32B2_RefreshMode+0x48>)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <MT48LC4M32B2_RefreshMode+0x48>)
 80021d2:	2208      	movs	r2, #8
 80021d4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80021d6:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <MT48LC4M32B2_RefreshMode+0x48>)
 80021d8:	2200      	movs	r2, #0
 80021da:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80021dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021e0:	4907      	ldr	r1, [pc, #28]	; (8002200 <MT48LC4M32B2_RefreshMode+0x48>)
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f008 fbb2 	bl	800a94c <HAL_SDRAM_SendCommand>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021f2:	e000      	b.n	80021f6 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80021f4:	2300      	movs	r3, #0
  }
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	24020ac0 	.word	0x24020ac0

08002204 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800220e:	6839      	ldr	r1, [r7, #0]
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f008 fbd0 	bl	800a9b6 <HAL_SDRAM_ProgramRefreshRate>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 800221c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002220:	e000      	b.n	8002224 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8002222:	2300      	movs	r3, #0
  }
}
 8002224:	4618      	mov	r0, r3
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8002234:	f001 fe32 	bl	8003e9c <HAL_GetTick>
 8002238:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800223a:	bf00      	nop
 800223c:	f001 fe2e 	bl	8003e9c <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	429a      	cmp	r2, r3
 800224a:	d8f7      	bhi.n	800223c <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08a      	sub	sp, #40	; 0x28
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002262:	2300      	movs	r3, #0
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10f      	bne.n	800228c <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE() ;
 800226c:	4b26      	ldr	r3, [pc, #152]	; (8002308 <BSP_LED_Init+0xb0>)
 800226e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002272:	4a25      	ldr	r2, [pc, #148]	; (8002308 <BSP_LED_Init+0xb0>)
 8002274:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002278:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800227c:	4b22      	ldr	r3, [pc, #136]	; (8002308 <BSP_LED_Init+0xb0>)
 800227e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	e015      	b.n	80022b8 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d10f      	bne.n	80022b2 <BSP_LED_Init+0x5a>
  {
    LED2_GPIO_CLK_ENABLE() ;
 8002292:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <BSP_LED_Init+0xb0>)
 8002294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002298:	4a1b      	ldr	r2, [pc, #108]	; (8002308 <BSP_LED_Init+0xb0>)
 800229a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022a2:	4b19      	ldr	r3, [pc, #100]	; (8002308 <BSP_LED_Init+0xb0>)
 80022a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	e002      	b.n	80022b8 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80022b2:	f06f 0301 	mvn.w	r3, #1
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	4a14      	ldr	r2, [pc, #80]	; (800230c <BSP_LED_Init+0xb4>)
 80022bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c0:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80022c2:	2301      	movs	r3, #1
 80022c4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	4a0f      	ldr	r2, [pc, #60]	; (8002310 <BSP_LED_Init+0xb8>)
 80022d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d6:	f107 0210 	add.w	r2, r7, #16
 80022da:	4611      	mov	r1, r2
 80022dc:	4618      	mov	r0, r3
 80022de:	f003 ff7d 	bl	80061dc <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <BSP_LED_Init+0xb8>)
 80022e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	4a07      	ldr	r2, [pc, #28]	; (800230c <BSP_LED_Init+0xb4>)
 80022ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	2201      	movs	r2, #1
 80022f6:	4619      	mov	r1, r3
 80022f8:	f004 f920 	bl	800653c <HAL_GPIO_WritePin>
  return ret;
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
 80022fe:	4618      	mov	r0, r3
 8002300:	3728      	adds	r7, #40	; 0x28
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	58024400 	.word	0x58024400
 800230c:	08010360 	.word	0x08010360
 8002310:	2400001c 	.word	0x2400001c

08002314 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	4a08      	ldr	r2, [pc, #32]	; (8002348 <BSP_LED_On+0x34>)
 8002326:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	4a07      	ldr	r2, [pc, #28]	; (800234c <BSP_LED_On+0x38>)
 800232e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002332:	b29b      	uxth	r3, r3
 8002334:	2200      	movs	r2, #0
 8002336:	4619      	mov	r1, r3
 8002338:	f004 f900 	bl	800653c <HAL_GPIO_WritePin>
  return ret;
 800233c:	68fb      	ldr	r3, [r7, #12]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	2400001c 	.word	0x2400001c
 800234c:	08010360 	.word	0x08010360

08002350 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	4a08      	ldr	r2, [pc, #32]	; (8002384 <BSP_LED_Off+0x34>)
 8002362:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	4a07      	ldr	r2, [pc, #28]	; (8002388 <BSP_LED_Off+0x38>)
 800236a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236e:	b29b      	uxth	r3, r3
 8002370:	2201      	movs	r2, #1
 8002372:	4619      	mov	r1, r3
 8002374:	f004 f8e2 	bl	800653c <HAL_GPIO_WritePin>
  return ret;
 8002378:	68fb      	ldr	r3, [r7, #12]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	2400001c 	.word	0x2400001c
 8002388:	08010360 	.word	0x08010360

0800238c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	460a      	mov	r2, r1
 8002396:	71fb      	strb	r3, [r7, #7]
 8002398:	4613      	mov	r3, r2
 800239a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_USER_EXTI_LINE};
  /* Enable the BUTTON clock*/
  BUTTON_USER_GPIO_CLK_ENABLE();
 800239c:	4b2e      	ldr	r3, [pc, #184]	; (8002458 <BSP_PB_Init+0xcc>)
 800239e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a2:	4a2d      	ldr	r2, [pc, #180]	; (8002458 <BSP_PB_Init+0xcc>)
 80023a4:	f043 0304 	orr.w	r3, r3, #4
 80023a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023ac:	4b2a      	ldr	r3, [pc, #168]	; (8002458 <BSP_PB_Init+0xcc>)
 80023ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	68bb      	ldr	r3, [r7, #8]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80023ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023be:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80023c0:	2302      	movs	r3, #2
 80023c2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80023c4:	2302      	movs	r3, #2
 80023c6:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80023c8:	79bb      	ldrb	r3, [r7, #6]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10c      	bne.n	80023e8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	4a21      	ldr	r2, [pc, #132]	; (800245c <BSP_PB_Init+0xd0>)
 80023d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023da:	f107 020c 	add.w	r2, r7, #12
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f003 fefb 	bl	80061dc <HAL_GPIO_Init>
 80023e6:	e031      	b.n	800244c <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80023e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80023ec:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	4a1a      	ldr	r2, [pc, #104]	; (800245c <BSP_PB_Init+0xd0>)
 80023f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f6:	f107 020c 	add.w	r2, r7, #12
 80023fa:	4611      	mov	r1, r2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f003 feed 	bl	80061dc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	4a16      	ldr	r2, [pc, #88]	; (8002460 <BSP_PB_Init+0xd4>)
 8002408:	441a      	add	r2, r3
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	4915      	ldr	r1, [pc, #84]	; (8002464 <BSP_PB_Init+0xd8>)
 800240e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002412:	4619      	mov	r1, r3
 8002414:	4610      	mov	r0, r2
 8002416:	f003 fe9c 	bl	8006152 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	4a10      	ldr	r2, [pc, #64]	; (8002460 <BSP_PB_Init+0xd4>)
 8002420:	1898      	adds	r0, r3, r2
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	4a10      	ldr	r2, [pc, #64]	; (8002468 <BSP_PB_Init+0xdc>)
 8002426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242a:	461a      	mov	r2, r3
 800242c:	2100      	movs	r1, #0
 800242e:	f003 fe71 	bl	8006114 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002432:	2028      	movs	r0, #40	; 0x28
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	4a0d      	ldr	r2, [pc, #52]	; (800246c <BSP_PB_Init+0xe0>)
 8002438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800243c:	2200      	movs	r2, #0
 800243e:	4619      	mov	r1, r3
 8002440:	f001 fe53 	bl	80040ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002444:	2328      	movs	r3, #40	; 0x28
 8002446:	4618      	mov	r0, r3
 8002448:	f001 fe69 	bl	800411e <HAL_NVIC_EnableIRQ>
  }
  return BSP_ERROR_NONE;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3720      	adds	r7, #32
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	58024400 	.word	0x58024400
 800245c:	24000024 	.word	0x24000024
 8002460:	24020ad0 	.word	0x24020ad0
 8002464:	08010368 	.word	0x08010368
 8002468:	24000028 	.word	0x24000028
 800246c:	2400002c 	.word	0x2400002c

08002470 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4a04      	ldr	r2, [pc, #16]	; (8002490 <BSP_PB_IRQHandler+0x20>)
 8002480:	4413      	add	r3, r2
 8002482:	4618      	mov	r0, r3
 8002484:	f003 fe7a 	bl	800617c <HAL_EXTI_IRQHandler>
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	24020ad0 	.word	0x24020ad0

08002494 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002498:	2000      	movs	r0, #0
 800249a:	f7fe fb31 	bl	8000b00 <BSP_PB_Callback>
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <BSP_AUDIO_OUT_IRQHandler>:
  * @brief  This function handles Audio Out DMA interrupt requests.
  * @param  Instance Audio OUT instance
  * @retval None
  */
void BSP_AUDIO_OUT_IRQHandler(uint32_t Instance)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  if (Instance == 0U)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d105      	bne.n	80024be <BSP_AUDIO_OUT_IRQHandler+0x1a>
  {
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <BSP_AUDIO_OUT_IRQHandler+0x24>)
 80024b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024b8:	4618      	mov	r0, r3
 80024ba:	f002 fc2b 	bl	8004d14 <HAL_DMA_IRQHandler>
  }
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	24020ad8 	.word	0x24020ad8

080024cc <BSP_AUDIO_IN_IRQHandler>:
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC1
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC2
  * @retval None
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t InputDevice)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]

  if ((InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC) || (InputDevice == AUDIO_IN_DEVICE_ANALOG_MIC))
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2b30      	cmp	r3, #48	; 0x30
 80024da:	d002      	beq.n	80024e2 <BSP_AUDIO_IN_IRQHandler+0x16>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d105      	bne.n	80024ee <BSP_AUDIO_IN_IRQHandler+0x22>
  {
    HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 80024e2:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <BSP_AUDIO_IN_IRQHandler+0x2c>)
 80024e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024e8:	4618      	mov	r0, r3
 80024ea:	f002 fc13 	bl	8004d14 <HAL_DMA_IRQHandler>
  }

}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	24020b70 	.word	0x24020b70

080024fc <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002502:	2300      	movs	r3, #0
 8002504:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8002506:	4b16      	ldr	r3, [pc, #88]	; (8002560 <BSP_I2C4_Init+0x64>)
 8002508:	4a16      	ldr	r2, [pc, #88]	; (8002564 <BSP_I2C4_Init+0x68>)
 800250a:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800250c:	4b16      	ldr	r3, [pc, #88]	; (8002568 <BSP_I2C4_Init+0x6c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d11f      	bne.n	8002554 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8002514:	4b14      	ldr	r3, [pc, #80]	; (8002568 <BSP_I2C4_Init+0x6c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	3301      	adds	r3, #1
 800251a:	4a13      	ldr	r2, [pc, #76]	; (8002568 <BSP_I2C4_Init+0x6c>)
 800251c:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800251e:	4810      	ldr	r0, [pc, #64]	; (8002560 <BSP_I2C4_Init+0x64>)
 8002520:	f004 f9da 	bl	80068d8 <HAL_I2C_GetState>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d114      	bne.n	8002554 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800252a:	480d      	ldr	r0, [pc, #52]	; (8002560 <BSP_I2C4_Init+0x64>)
 800252c:	f000 fb06 	bl	8002b3c <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8002530:	f006 fb26 	bl	8008b80 <HAL_RCC_GetPCLK2Freq>
 8002534:	4603      	mov	r3, r0
 8002536:	490d      	ldr	r1, [pc, #52]	; (800256c <BSP_I2C4_Init+0x70>)
 8002538:	4618      	mov	r0, r3
 800253a:	f000 f889 	bl	8002650 <I2C_GetTiming>
 800253e:	4603      	mov	r3, r0
 8002540:	4619      	mov	r1, r3
 8002542:	4807      	ldr	r0, [pc, #28]	; (8002560 <BSP_I2C4_Init+0x64>)
 8002544:	f000 f814 	bl	8002570 <MX_I2C4_Init>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800254e:	f06f 0307 	mvn.w	r3, #7
 8002552:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8002554:	687b      	ldr	r3, [r7, #4]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	24021610 	.word	0x24021610
 8002564:	58001c00 	.word	0x58001c00
 8002568:	24020c08 	.word	0x24020c08
 800256c:	000186a0 	.word	0x000186a0

08002570 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f003 ffde 	bl	8006570 <HAL_I2C_Init>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
 80025be:	e014      	b.n	80025ea <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f004 fc04 	bl	8006dd4 <HAL_I2CEx_ConfigAnalogFilter>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	73fb      	strb	r3, [r7, #15]
 80025d6:	e008      	b.n	80025ea <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80025d8:	2100      	movs	r1, #0
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f004 fc45 	bl	8006e6a <HAL_I2CEx_ConfigDigitalFilter>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	60ba      	str	r2, [r7, #8]
 80025fc:	461a      	mov	r2, r3
 80025fe:	4603      	mov	r3, r0
 8002600:	81fb      	strh	r3, [r7, #14]
 8002602:	460b      	mov	r3, r1
 8002604:	81bb      	strh	r3, [r7, #12]
 8002606:	4613      	mov	r3, r2
 8002608:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800260a:	89b9      	ldrh	r1, [r7, #12]
 800260c:	89f8      	ldrh	r0, [r7, #14]
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2201      	movs	r2, #1
 8002616:	f000 fafd 	bl	8002c14 <I2C4_ReadReg>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d102      	bne.n	8002626 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	e00c      	b.n	8002640 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8002626:	4809      	ldr	r0, [pc, #36]	; (800264c <BSP_I2C4_ReadReg+0x58>)
 8002628:	f004 f964 	bl	80068f4 <HAL_I2C_GetError>
 800262c:	4603      	mov	r3, r0
 800262e:	2b04      	cmp	r3, #4
 8002630:	d103      	bne.n	800263a <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002632:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	e002      	b.n	8002640 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800263a:	f06f 0303 	mvn.w	r3, #3
 800263e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8002640:	697b      	ldr	r3, [r7, #20]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	24021610 	.word	0x24021610

08002650 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d06b      	beq.n	800273c <I2C_GetTiming+0xec>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d068      	beq.n	800273c <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	e060      	b.n	8002732 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002670:	4a35      	ldr	r2, [pc, #212]	; (8002748 <I2C_GetTiming+0xf8>)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	212c      	movs	r1, #44	; 0x2c
 8002676:	fb01 f303 	mul.w	r3, r1, r3
 800267a:	4413      	add	r3, r2
 800267c:	3304      	adds	r3, #4
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d352      	bcc.n	800272c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8002686:	4a30      	ldr	r2, [pc, #192]	; (8002748 <I2C_GetTiming+0xf8>)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	212c      	movs	r1, #44	; 0x2c
 800268c:	fb01 f303 	mul.w	r3, r1, r3
 8002690:	4413      	add	r3, r2
 8002692:	3308      	adds	r3, #8
 8002694:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d847      	bhi.n	800272c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800269c:	6939      	ldr	r1, [r7, #16]
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f856 	bl	8002750 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 80026a4:	6939      	ldr	r1, [r7, #16]
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f940 	bl	800292c <I2C_Compute_SCLL_SCLH>
 80026ac:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2b7f      	cmp	r3, #127	; 0x7f
 80026b2:	d842      	bhi.n	800273a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80026b4:	4925      	ldr	r1, [pc, #148]	; (800274c <I2C_GetTiming+0xfc>)
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80026c6:	4821      	ldr	r0, [pc, #132]	; (800274c <I2C_GetTiming+0xfc>)
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4403      	add	r3, r0
 80026d4:	3304      	adds	r3, #4
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	051b      	lsls	r3, r3, #20
 80026da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80026de:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80026e0:	481a      	ldr	r0, [pc, #104]	; (800274c <I2C_GetTiming+0xfc>)
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4403      	add	r3, r0
 80026ee:	3308      	adds	r3, #8
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	041b      	lsls	r3, r3, #16
 80026f4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80026f8:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80026fa:	4814      	ldr	r0, [pc, #80]	; (800274c <I2C_GetTiming+0xfc>)
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4403      	add	r3, r0
 8002708:	330c      	adds	r3, #12
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002710:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8002712:	480e      	ldr	r0, [pc, #56]	; (800274c <I2C_GetTiming+0xfc>)
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4403      	add	r3, r0
 8002720:	3310      	adds	r3, #16
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002726:	430b      	orrs	r3, r1
 8002728:	617b      	str	r3, [r7, #20]
        }
        break;
 800272a:	e006      	b.n	800273a <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	3301      	adds	r3, #1
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d99b      	bls.n	8002670 <I2C_GetTiming+0x20>
 8002738:	e000      	b.n	800273c <I2C_GetTiming+0xec>
        break;
 800273a:	bf00      	nop
      }
    }
  }

  return ret;
 800273c:	697b      	ldr	r3, [r7, #20]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	0801036c 	.word	0x0801036c
 800274c:	24020c0c 	.word	0x24020c0c

08002750 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002750:	b480      	push	{r7}
 8002752:	b08f      	sub	sp, #60	; 0x3c
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800275a:	2310      	movs	r3, #16
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	085a      	lsrs	r2, r3, #1
 8002762:	4b6e      	ldr	r3, [pc, #440]	; (800291c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8002764:	4413      	add	r3, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	fbb3 f3f2 	udiv	r3, r3, r2
 800276c:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800276e:	2332      	movs	r3, #50	; 0x32
 8002770:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8002772:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002776:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002778:	4a69      	ldr	r2, [pc, #420]	; (8002920 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	212c      	movs	r1, #44	; 0x2c
 800277e:	fb01 f303 	mul.w	r3, r1, r3
 8002782:	4413      	add	r3, r2
 8002784:	3324      	adds	r3, #36	; 0x24
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	4a65      	ldr	r2, [pc, #404]	; (8002920 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	212c      	movs	r1, #44	; 0x2c
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	330c      	adds	r3, #12
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800279c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800279e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80027a0:	495f      	ldr	r1, [pc, #380]	; (8002920 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	202c      	movs	r0, #44	; 0x2c
 80027a6:	fb00 f303 	mul.w	r3, r0, r3
 80027aa:	440b      	add	r3, r1
 80027ac:	3328      	adds	r3, #40	; 0x28
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	3303      	adds	r3, #3
 80027b2:	69f9      	ldr	r1, [r7, #28]
 80027b4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80027bc:	4a58      	ldr	r2, [pc, #352]	; (8002920 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	212c      	movs	r1, #44	; 0x2c
 80027c2:	fb01 f303 	mul.w	r3, r1, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	3310      	adds	r3, #16
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	4a54      	ldr	r2, [pc, #336]	; (8002920 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	212c      	movs	r1, #44	; 0x2c
 80027d4:	fb01 f303 	mul.w	r3, r1, r3
 80027d8:	4413      	add	r3, r2
 80027da:	3320      	adds	r3, #32
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80027e0:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80027e2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80027e4:	494e      	ldr	r1, [pc, #312]	; (8002920 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	202c      	movs	r0, #44	; 0x2c
 80027ea:	fb00 f303 	mul.w	r3, r0, r3
 80027ee:	440b      	add	r3, r1
 80027f0:	3328      	adds	r3, #40	; 0x28
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	3304      	adds	r3, #4
 80027f6:	69f9      	ldr	r1, [r7, #28]
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8002800:	4a47      	ldr	r2, [pc, #284]	; (8002920 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	212c      	movs	r1, #44	; 0x2c
 8002806:	fb01 f303 	mul.w	r3, r1, r3
 800280a:	4413      	add	r3, r2
 800280c:	3320      	adds	r3, #32
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	4a43      	ldr	r2, [pc, #268]	; (8002920 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	212c      	movs	r1, #44	; 0x2c
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	4413      	add	r3, r2
 800281e:	3314      	adds	r3, #20
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4403      	add	r3, r0
 8002824:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8002826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002828:	2b00      	cmp	r3, #0
 800282a:	dc01      	bgt.n	8002830 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800282c:	2300      	movs	r3, #0
 800282e:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8002830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002832:	2b00      	cmp	r3, #0
 8002834:	dc01      	bgt.n	800283a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8002836:	2300      	movs	r3, #0
 8002838:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800283a:	2300      	movs	r3, #0
 800283c:	62bb      	str	r3, [r7, #40]	; 0x28
 800283e:	e062      	b.n	8002906 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002840:	2300      	movs	r3, #0
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
 8002844:	e059      	b.n	80028fa <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	3301      	adds	r3, #1
 800284a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800284c:	3201      	adds	r2, #1
 800284e:	fb03 f202 	mul.w	r2, r3, r2
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	fb02 f303 	mul.w	r3, r2, r3
 8002858:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	429a      	cmp	r2, r3
 8002860:	d348      	bcc.n	80028f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8002862:	2300      	movs	r3, #0
 8002864:	623b      	str	r3, [r7, #32]
 8002866:	e042      	b.n	80028ee <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8002868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286a:	3301      	adds	r3, #1
 800286c:	6a3a      	ldr	r2, [r7, #32]
 800286e:	fb03 f202 	mul.w	r2, r3, r2
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	fb02 f303 	mul.w	r3, r2, r3
 8002878:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800287a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	429a      	cmp	r2, r3
 8002880:	d332      	bcc.n	80028e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8002882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	429a      	cmp	r2, r3
 8002888:	d82e      	bhi.n	80028e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800288a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800288c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800288e:	429a      	cmp	r2, r3
 8002890:	d02a      	beq.n	80028e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8002892:	4b24      	ldr	r3, [pc, #144]	; (8002924 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	4924      	ldr	r1, [pc, #144]	; (8002928 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028a4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80028a6:	4b1f      	ldr	r3, [pc, #124]	; (8002924 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	491f      	ldr	r1, [pc, #124]	; (8002928 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	3304      	adds	r3, #4
 80028b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ba:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80028bc:	4b19      	ldr	r3, [pc, #100]	; (8002924 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4919      	ldr	r1, [pc, #100]	; (8002928 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	3308      	adds	r3, #8
 80028ce:	6a3a      	ldr	r2, [r7, #32]
 80028d0:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 80028d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d4:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 80028d6:	4b13      	ldr	r3, [pc, #76]	; (8002924 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	3301      	adds	r3, #1
 80028dc:	4a11      	ldr	r2, [pc, #68]	; (8002924 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80028de:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80028e0:	4b10      	ldr	r3, [pc, #64]	; (8002924 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b7f      	cmp	r3, #127	; 0x7f
 80028e6:	d812      	bhi.n	800290e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	3301      	adds	r3, #1
 80028ec:	623b      	str	r3, [r7, #32]
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	2b0f      	cmp	r3, #15
 80028f2:	d9b9      	bls.n	8002868 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	3301      	adds	r3, #1
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	2b0f      	cmp	r3, #15
 80028fe:	d9a2      	bls.n	8002846 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002902:	3301      	adds	r3, #1
 8002904:	62bb      	str	r3, [r7, #40]	; 0x28
 8002906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002908:	2b0f      	cmp	r3, #15
 800290a:	d999      	bls.n	8002840 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800290c:	e000      	b.n	8002910 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800290e:	bf00      	nop
          }
        }
      }
    }
  }
}
 8002910:	373c      	adds	r7, #60	; 0x3c
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	3b9aca00 	.word	0x3b9aca00
 8002920:	0801036c 	.word	0x0801036c
 8002924:	2402160c 	.word	0x2402160c
 8002928:	24020c0c 	.word	0x24020c0c

0800292c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800292c:	b480      	push	{r7}
 800292e:	b093      	sub	sp, #76	; 0x4c
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8002936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800293a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	085a      	lsrs	r2, r3, #1
 8002940:	4b7a      	ldr	r3, [pc, #488]	; (8002b2c <I2C_Compute_SCLL_SCLH+0x200>)
 8002942:	4413      	add	r3, r2
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	fbb3 f3f2 	udiv	r3, r3, r2
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800294c:	4a78      	ldr	r2, [pc, #480]	; (8002b30 <I2C_Compute_SCLL_SCLH+0x204>)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	085a      	lsrs	r2, r3, #1
 800295c:	4b73      	ldr	r3, [pc, #460]	; (8002b2c <I2C_Compute_SCLL_SCLH+0x200>)
 800295e:	4413      	add	r3, r2
 8002960:	4973      	ldr	r1, [pc, #460]	; (8002b30 <I2C_Compute_SCLL_SCLH+0x204>)
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	202c      	movs	r0, #44	; 0x2c
 8002966:	fb00 f202 	mul.w	r2, r0, r2
 800296a:	440a      	add	r2, r1
 800296c:	6812      	ldr	r2, [r2, #0]
 800296e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8002974:	2332      	movs	r3, #50	; 0x32
 8002976:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8002978:	4a6d      	ldr	r2, [pc, #436]	; (8002b30 <I2C_Compute_SCLL_SCLH+0x204>)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	212c      	movs	r1, #44	; 0x2c
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	4413      	add	r3, r2
 8002984:	3328      	adds	r3, #40	; 0x28
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298a:	fb02 f303 	mul.w	r3, r2, r3
 800298e:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8002990:	4a67      	ldr	r2, [pc, #412]	; (8002b30 <I2C_Compute_SCLL_SCLH+0x204>)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	212c      	movs	r1, #44	; 0x2c
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	3304      	adds	r3, #4
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a62      	ldr	r2, [pc, #392]	; (8002b2c <I2C_Compute_SCLL_SCLH+0x200>)
 80029a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a6:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 80029a8:	4a61      	ldr	r2, [pc, #388]	; (8002b30 <I2C_Compute_SCLL_SCLH+0x204>)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	212c      	movs	r1, #44	; 0x2c
 80029ae:	fb01 f303 	mul.w	r3, r1, r3
 80029b2:	4413      	add	r3, r2
 80029b4:	3308      	adds	r3, #8
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a5c      	ldr	r2, [pc, #368]	; (8002b2c <I2C_Compute_SCLL_SCLH+0x200>)
 80029ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80029be:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 80029c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c2:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80029c4:	2300      	movs	r3, #0
 80029c6:	637b      	str	r3, [r7, #52]	; 0x34
 80029c8:	e0a3      	b.n	8002b12 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80029ca:	495a      	ldr	r1, [pc, #360]	; (8002b34 <I2C_Compute_SCLL_SCLH+0x208>)
 80029cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029de:	fb02 f303 	mul.w	r3, r2, r3
 80029e2:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80029e4:	2300      	movs	r3, #0
 80029e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029e8:	e08c      	b.n	8002b04 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80029ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	441a      	add	r2, r3
 80029f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029f2:	3301      	adds	r3, #1
 80029f4:	6979      	ldr	r1, [r7, #20]
 80029f6:	fb03 f101 	mul.w	r1, r3, r1
 80029fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	440b      	add	r3, r1
 8002a00:	4413      	add	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8002a04:	4a4a      	ldr	r2, [pc, #296]	; (8002b30 <I2C_Compute_SCLL_SCLH+0x204>)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	212c      	movs	r1, #44	; 0x2c
 8002a0a:	fb01 f303 	mul.w	r3, r1, r3
 8002a0e:	4413      	add	r3, r2
 8002a10:	3318      	adds	r3, #24
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d971      	bls.n	8002afe <I2C_Compute_SCLL_SCLH+0x1d2>
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	1ad2      	subs	r2, r2, r3
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	089b      	lsrs	r3, r3, #2
 8002a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d268      	bcs.n	8002afe <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a30:	e062      	b.n	8002af8 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8002a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	441a      	add	r2, r3
 8002a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	6979      	ldr	r1, [r7, #20]
 8002a3e:	fb03 f101 	mul.w	r1, r3, r1
 8002a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	440b      	add	r3, r1
 8002a48:	4413      	add	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	441a      	add	r2, r3
 8002a52:	4937      	ldr	r1, [pc, #220]	; (8002b30 <I2C_Compute_SCLL_SCLH+0x204>)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	202c      	movs	r0, #44	; 0x2c
 8002a58:	fb00 f303 	mul.w	r3, r0, r3
 8002a5c:	440b      	add	r3, r1
 8002a5e:	3320      	adds	r3, #32
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	441a      	add	r2, r3
 8002a64:	4932      	ldr	r1, [pc, #200]	; (8002b30 <I2C_Compute_SCLL_SCLH+0x204>)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	202c      	movs	r0, #44	; 0x2c
 8002a6a:	fb00 f303 	mul.w	r3, r0, r3
 8002a6e:	440b      	add	r3, r1
 8002a70:	3324      	adds	r3, #36	; 0x24
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4413      	add	r3, r2
 8002a76:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d338      	bcc.n	8002af2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d834      	bhi.n	8002af2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002a88:	4a29      	ldr	r2, [pc, #164]	; (8002b30 <I2C_Compute_SCLL_SCLH+0x204>)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	212c      	movs	r1, #44	; 0x2c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	331c      	adds	r3, #28
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d329      	bcc.n	8002af2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d225      	bcs.n	8002af2 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8002aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	da02      	bge.n	8002aba <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab6:	425b      	negs	r3, r3
 8002ab8:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8002aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d917      	bls.n	8002af2 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8002ac6:	491b      	ldr	r1, [pc, #108]	; (8002b34 <I2C_Compute_SCLL_SCLH+0x208>)
 8002ac8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	3310      	adds	r3, #16
 8002ad6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ad8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8002ada:	4916      	ldr	r1, [pc, #88]	; (8002b34 <I2C_Compute_SCLL_SCLH+0x208>)
 8002adc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	330c      	adds	r3, #12
 8002aea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aec:	601a      	str	r2, [r3, #0]
              ret = count;
 8002aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af0:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8002af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af4:	3301      	adds	r3, #1
 8002af6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afa:	2bff      	cmp	r3, #255	; 0xff
 8002afc:	d999      	bls.n	8002a32 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8002afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b00:	3301      	adds	r3, #1
 8002b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b06:	2bff      	cmp	r3, #255	; 0xff
 8002b08:	f67f af6f 	bls.w	80029ea <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8002b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0e:	3301      	adds	r3, #1
 8002b10:	637b      	str	r3, [r7, #52]	; 0x34
 8002b12:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <I2C_Compute_SCLL_SCLH+0x20c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	f4ff af56 	bcc.w	80029ca <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8002b1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	374c      	adds	r7, #76	; 0x4c
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	3b9aca00 	.word	0x3b9aca00
 8002b30:	0801036c 	.word	0x0801036c
 8002b34:	24020c0c 	.word	0x24020c0c
 8002b38:	2402160c 	.word	0x2402160c

08002b3c <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08a      	sub	sp, #40	; 0x28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8002b44:	4b31      	ldr	r3, [pc, #196]	; (8002c0c <I2C4_MspInit+0xd0>)
 8002b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b4a:	4a30      	ldr	r2, [pc, #192]	; (8002c0c <I2C4_MspInit+0xd0>)
 8002b4c:	f043 0308 	orr.w	r3, r3, #8
 8002b50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b54:	4b2d      	ldr	r3, [pc, #180]	; (8002c0c <I2C4_MspInit+0xd0>)
 8002b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8002b62:	4b2a      	ldr	r3, [pc, #168]	; (8002c0c <I2C4_MspInit+0xd0>)
 8002b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b68:	4a28      	ldr	r2, [pc, #160]	; (8002c0c <I2C4_MspInit+0xd0>)
 8002b6a:	f043 0308 	orr.w	r3, r3, #8
 8002b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b72:	4b26      	ldr	r3, [pc, #152]	; (8002c0c <I2C4_MspInit+0xd0>)
 8002b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8002b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b84:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8002b86:	2312      	movs	r3, #18
 8002b88:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8002b92:	2304      	movs	r3, #4
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8002b96:	f107 0314 	add.w	r3, r7, #20
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	481c      	ldr	r0, [pc, #112]	; (8002c10 <I2C4_MspInit+0xd4>)
 8002b9e:	f003 fb1d 	bl	80061dc <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8002ba2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ba6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8002ba8:	2312      	movs	r3, #18
 8002baa:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8002bb4:	2304      	movs	r3, #4
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8002bb8:	f107 0314 	add.w	r3, r7, #20
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4814      	ldr	r0, [pc, #80]	; (8002c10 <I2C4_MspInit+0xd4>)
 8002bc0:	f003 fb0c 	bl	80061dc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <I2C4_MspInit+0xd0>)
 8002bc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002bca:	4a10      	ldr	r2, [pc, #64]	; (8002c0c <I2C4_MspInit+0xd0>)
 8002bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002bd4:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <I2C4_MspInit+0xd0>)
 8002bd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8002be2:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <I2C4_MspInit+0xd0>)
 8002be4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002be8:	4a08      	ldr	r2, [pc, #32]	; (8002c0c <I2C4_MspInit+0xd0>)
 8002bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bee:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <I2C4_MspInit+0xd0>)
 8002bf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bf8:	4a04      	ldr	r2, [pc, #16]	; (8002c0c <I2C4_MspInit+0xd0>)
 8002bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bfe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8002c02:	bf00      	nop
 8002c04:	3728      	adds	r7, #40	; 0x28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	58024400 	.word	0x58024400
 8002c10:	58020c00 	.word	0x58020c00

08002c14 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af04      	add	r7, sp, #16
 8002c1a:	607b      	str	r3, [r7, #4]
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	81fb      	strh	r3, [r7, #14]
 8002c20:	460b      	mov	r3, r1
 8002c22:	81bb      	strh	r3, [r7, #12]
 8002c24:	4613      	mov	r3, r2
 8002c26:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8002c28:	8978      	ldrh	r0, [r7, #10]
 8002c2a:	89ba      	ldrh	r2, [r7, #12]
 8002c2c:	89f9      	ldrh	r1, [r7, #14]
 8002c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c32:	9302      	str	r3, [sp, #8]
 8002c34:	8b3b      	ldrh	r3, [r7, #24]
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	4807      	ldr	r0, [pc, #28]	; (8002c5c <I2C4_ReadReg+0x48>)
 8002c40:	f003 fd30 	bl	80066a4 <HAL_I2C_Mem_Read>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	e001      	b.n	8002c52 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8002c4e:	f06f 0307 	mvn.w	r3, #7
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	24021610 	.word	0x24021610

08002c60 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8002c6a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002c74:	2200      	movs	r2, #0
 8002c76:	6839      	ldr	r1, [r7, #0]
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f805 	bl	8002c88 <BSP_LCD_InitEx>
 8002c7e:	4603      	mov	r3, r0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b09e      	sub	sp, #120	; 0x78
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002c96:	2300      	movs	r3, #0
 8002c98:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d808      	bhi.n	8002cb6 <BSP_LCD_InitEx+0x2e>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d105      	bne.n	8002cb6 <BSP_LCD_InitEx+0x2e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d006      	beq.n	8002cbe <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002cb6:	f06f 0301 	mvn.w	r3, #1
 8002cba:	677b      	str	r3, [r7, #116]	; 0x74
 8002cbc:	e0a8      	b.n	8002e10 <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d109      	bne.n	8002cd8 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
 8002cc8:	4a54      	ldr	r2, [pc, #336]	; (8002e1c <BSP_LCD_InitEx+0x194>)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	015b      	lsls	r3, r3, #5
 8002cce:	4413      	add	r3, r2
 8002cd0:	3310      	adds	r3, #16
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	e008      	b.n	8002cea <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
 8002cdc:	4a4f      	ldr	r2, [pc, #316]	; (8002e1c <BSP_LCD_InitEx+0x194>)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	015b      	lsls	r3, r3, #5
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3310      	adds	r3, #16
 8002ce6:	2204      	movs	r2, #4
 8002ce8:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8002cea:	4a4c      	ldr	r2, [pc, #304]	; (8002e1c <BSP_LCD_InitEx+0x194>)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	015b      	lsls	r3, r3, #5
 8002cf0:	4413      	add	r3, r2
 8002cf2:	330c      	adds	r3, #12
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 8002cf8:	4a48      	ldr	r2, [pc, #288]	; (8002e1c <BSP_LCD_InitEx+0x194>)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	015b      	lsls	r3, r3, #5
 8002cfe:	4413      	add	r3, r2
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8002d04:	4a45      	ldr	r2, [pc, #276]	; (8002e1c <BSP_LCD_InitEx+0x194>)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	015b      	lsls	r3, r3, #5
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d12:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 8002d14:	4b42      	ldr	r3, [pc, #264]	; (8002e20 <BSP_LCD_InitEx+0x198>)
 8002d16:	4a43      	ldr	r2, [pc, #268]	; (8002e24 <BSP_LCD_InitEx+0x19c>)
 8002d18:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 8002d1a:	4b43      	ldr	r3, [pc, #268]	; (8002e28 <BSP_LCD_InitEx+0x1a0>)
 8002d1c:	4a43      	ldr	r2, [pc, #268]	; (8002e2c <BSP_LCD_InitEx+0x1a4>)
 8002d1e:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 8002d20:	483f      	ldr	r0, [pc, #252]	; (8002e20 <BSP_LCD_InitEx+0x198>)
 8002d22:	f000 fd1b 	bl	800375c <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
 8002d26:	4840      	ldr	r0, [pc, #256]	; (8002e28 <BSP_LCD_InitEx+0x1a0>)
 8002d28:	f000 fde4 	bl	80038f4 <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
 8002d2c:	4b40      	ldr	r3, [pc, #256]	; (8002e30 <BSP_LCD_InitEx+0x1a8>)
 8002d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
 8002d30:	4b40      	ldr	r3, [pc, #256]	; (8002e34 <BSP_LCD_InitEx+0x1ac>)
 8002d32:	63fb      	str	r3, [r7, #60]	; 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
 8002d34:	2370      	movs	r3, #112	; 0x70
 8002d36:	86bb      	strh	r3, [r7, #52]	; 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 8002d38:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002d3c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d40:	4611      	mov	r1, r2
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff f8c4 	bl	8001ed0 <FT5336_RegisterBusIO>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	da03      	bge.n	8002d56 <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002d4e:	f06f 0304 	mvn.w	r3, #4
 8002d52:	677b      	str	r3, [r7, #116]	; 0x74
 8002d54:	e02b      	b.n	8002dae <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
 8002d56:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002d5a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff f8f7 	bl	8001f54 <FT5336_ReadID>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	da03      	bge.n	8002d74 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002d6c:	f06f 0304 	mvn.w	r3, #4
 8002d70:	677b      	str	r3, [r7, #116]	; 0x74
 8002d72:	e01c      	b.n	8002dae <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
 8002d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d76:	2b51      	cmp	r3, #81	; 0x51
 8002d78:	d003      	beq.n	8002d82 <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002d7a:	f06f 0306 	mvn.w	r3, #6
 8002d7e:	677b      	str	r3, [r7, #116]	; 0x74
 8002d80:	e015      	b.n	8002dae <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8002d82:	4827      	ldr	r0, [pc, #156]	; (8002e20 <BSP_LCD_InitEx+0x198>)
 8002d84:	f000 f8e8 	bl	8002f58 <MX_LTDC_ClockConfig>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002d8e:	f06f 0303 	mvn.w	r3, #3
 8002d92:	677b      	str	r3, [r7, #116]	; 0x74
 8002d94:	e00b      	b.n	8002dae <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8002d96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d9a:	6839      	ldr	r1, [r7, #0]
 8002d9c:	4820      	ldr	r0, [pc, #128]	; (8002e20 <BSP_LCD_InitEx+0x198>)
 8002d9e:	f000 f84d 	bl	8002e3c <MX_LTDC_Init>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002da8:	f06f 0303 	mvn.w	r3, #3
 8002dac:	677b      	str	r3, [r7, #116]	; 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
 8002dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d12d      	bne.n	8002e10 <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8002db4:	2000      	movs	r0, #0
 8002db6:	f000 fe2f 	bl	8003a18 <BSP_SDRAM_Init>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8002dc0:	f06f 0303 	mvn.w	r3, #3
 8002dc4:	e025      	b.n	8002e12 <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
 8002dd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dd6:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
 8002dd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
 8002ddc:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8002de2:	f107 0314 	add.w	r3, r7, #20
 8002de6:	461a      	mov	r2, r3
 8002de8:	2100      	movs	r1, #0
 8002dea:	480d      	ldr	r0, [pc, #52]	; (8002e20 <BSP_LCD_InitEx+0x198>)
 8002dec:	f000 f872 	bl	8002ed4 <MX_LTDC_ConfigLayer>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8002df6:	f06f 0303 	mvn.w	r3, #3
 8002dfa:	677b      	str	r3, [r7, #116]	; 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
 8002dfc:	480e      	ldr	r0, [pc, #56]	; (8002e38 <BSP_LCD_InitEx+0x1b0>)
 8002dfe:	f000 fde1 	bl	80039c4 <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
 8002e02:	4a06      	ldr	r2, [pc, #24]	; (8002e1c <BSP_LCD_InitEx+0x194>)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	015b      	lsls	r3, r3, #5
 8002e08:	4413      	add	r3, r2
 8002e0a:	3318      	adds	r3, #24
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 8002e10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3778      	adds	r7, #120	; 0x78
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	240217c0 	.word	0x240217c0
 8002e20:	24021718 	.word	0x24021718
 8002e24:	50001000 	.word	0x50001000
 8002e28:	240216b0 	.word	0x240216b0
 8002e2c:	52001000 	.word	0x52001000
 8002e30:	080024fd 	.word	0x080024fd
 8002e34:	080025f5 	.word	0x080025f5
 8002e38:	24021664 	.word	0x24021664

08002e3c <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4a21      	ldr	r2, [pc, #132]	; (8002ed0 <MX_LTDC_Init+0x94>)
 8002e4c:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2228      	movs	r2, #40	; 0x28
 8002e6a:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	222a      	movs	r2, #42	; 0x2a
 8002e70:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	f103 0235 	add.w	r2, r3, #53	; 0x35
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2209      	movs	r2, #9
 8002e8a:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	220b      	movs	r2, #11
 8002e90:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f103 020b 	add.w	r2, r3, #11
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f103 020d 	add.w	r2, r3, #13
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	631a      	str	r2, [r3, #48]	; 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	22ff      	movs	r2, #255	; 0xff
 8002eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	22ff      	movs	r2, #255	; 0xff
 8002eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	22ff      	movs	r2, #255	; 0xff
 8002eba:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  return HAL_LTDC_Init(hltdc);
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f004 f820 	bl	8006f04 <HAL_LTDC_Init>
 8002ec4:	4603      	mov	r3, r0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	50001000 	.word	0x50001000

08002ed4 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b092      	sub	sp, #72	; 0x48
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.Alpha = 255;
 8002efe:	23ff      	movs	r3, #255	; 0xff
 8002f00:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.Alpha0 = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002f06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f0a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002f0c:	2307      	movs	r3, #7
 8002f0e:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.Backcolor.Blue = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  pLayerCfg.Backcolor.Green = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  pLayerCfg.Backcolor.Red = 0;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8002f40:	f107 0314 	add.w	r3, r7, #20
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	4619      	mov	r1, r3
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f004 f8b5 	bl	80070b8 <HAL_LTDC_ConfigLayer>
 8002f4e:	4603      	mov	r3, r0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3748      	adds	r7, #72	; 0x48
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b0b2      	sub	sp, #200	; 0xc8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8002f60:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 8002f6c:	2305      	movs	r3, #5
 8002f6e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 8002f70:	23a0      	movs	r3, #160	; 0xa0
 8002f72:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002f74:	2302      	movs	r3, #2
 8002f76:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3R = 83;
 8002f7c:	2353      	movs	r3, #83	; 0x53
 8002f7e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	64fb      	str	r3, [r7, #76]	; 0x4c

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002f88:	f107 0308 	add.w	r3, r7, #8
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f005 fe0d 	bl	8008bac <HAL_RCCEx_PeriphCLKConfig>
 8002f92:	4603      	mov	r3, r0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	37c8      	adds	r7, #200	; 0xc8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002fb0:	f06f 0301 	mvn.w	r3, #1
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	e007      	b.n	8002fc8 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8002fb8:	4a07      	ldr	r2, [pc, #28]	; (8002fd8 <BSP_LCD_GetPixelFormat+0x3c>)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	015b      	lsls	r3, r3, #5
 8002fbe:	4413      	add	r3, r2
 8002fc0:	330c      	adds	r3, #12
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	240217c0 	.word	0x240217c0

08002fdc <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002ff0:	f06f 0301 	mvn.w	r3, #1
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	e006      	b.n	8003006 <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8002ff8:	4a06      	ldr	r2, [pc, #24]	; (8003014 <BSP_LCD_SetActiveLayer+0x38>)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	015b      	lsls	r3, r3, #5
 8002ffe:	4413      	add	r3, r2
 8003000:	3308      	adds	r3, #8
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8003006:	68fb      	ldr	r3, [r7, #12]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	240217c0 	.word	0x240217c0

08003018 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800302c:	f06f 0301 	mvn.w	r3, #1
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	e006      	b.n	8003042 <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8003034:	4a06      	ldr	r2, [pc, #24]	; (8003050 <BSP_LCD_GetXSize+0x38>)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	015b      	lsls	r3, r3, #5
 800303a:	4413      	add	r3, r2
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8003042:	68fb      	ldr	r3, [r7, #12]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	240217c0 	.word	0x240217c0

08003054 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003068:	f06f 0301 	mvn.w	r3, #1
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	e007      	b.n	8003080 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8003070:	4a07      	ldr	r2, [pc, #28]	; (8003090 <BSP_LCD_GetYSize+0x3c>)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	015b      	lsls	r3, r3, #5
 8003076:	4413      	add	r3, r2
 8003078:	3304      	adds	r3, #4
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8003080:	68fb      	ldr	r3, [r7, #12]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	240217c0 	.word	0x240217c0

08003094 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08e      	sub	sp, #56	; 0x38
 8003098:	af02      	add	r7, sp, #8
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	330a      	adds	r3, #10
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	330b      	adds	r3, #11
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	021b      	lsls	r3, r3, #8
 80030b6:	441a      	add	r2, r3
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	330c      	adds	r3, #12
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	041b      	lsls	r3, r3, #16
 80030c0:	441a      	add	r2, r3
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	330d      	adds	r3, #13
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	061b      	lsls	r3, r3, #24
 80030ca:	4413      	add	r3, r2
 80030cc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	3312      	adds	r3, #18
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	3313      	adds	r3, #19
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	021b      	lsls	r3, r3, #8
 80030de:	441a      	add	r2, r3
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	3314      	adds	r3, #20
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	041b      	lsls	r3, r3, #16
 80030e8:	441a      	add	r2, r3
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	3315      	adds	r3, #21
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	061b      	lsls	r3, r3, #24
 80030f2:	4413      	add	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	3316      	adds	r3, #22
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	3317      	adds	r3, #23
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	021b      	lsls	r3, r3, #8
 8003106:	441a      	add	r2, r3
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	3318      	adds	r3, #24
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	041b      	lsls	r3, r3, #16
 8003110:	441a      	add	r2, r3
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	3319      	adds	r3, #25
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	061b      	lsls	r3, r3, #24
 800311a:	4413      	add	r3, r2
 800311c:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	331c      	adds	r3, #28
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	461a      	mov	r2, r3
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	331d      	adds	r3, #29
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	4413      	add	r3, r2
 8003130:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8003132:	4a37      	ldr	r2, [pc, #220]	; (8003210 <BSP_LCD_DrawBitmap+0x17c>)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	015b      	lsls	r3, r3, #5
 8003138:	4413      	add	r3, r2
 800313a:	3308      	adds	r3, #8
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a35      	ldr	r2, [pc, #212]	; (8003214 <BSP_LCD_DrawBitmap+0x180>)
 8003140:	2134      	movs	r1, #52	; 0x34
 8003142:	fb01 f303 	mul.w	r3, r1, r3
 8003146:	4413      	add	r3, r2
 8003148:	335c      	adds	r3, #92	; 0x5c
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4930      	ldr	r1, [pc, #192]	; (8003210 <BSP_LCD_DrawBitmap+0x17c>)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	015b      	lsls	r3, r3, #5
 8003152:	440b      	add	r3, r1
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	fb03 f101 	mul.w	r1, r3, r1
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	440b      	add	r3, r1
 8003160:	482b      	ldr	r0, [pc, #172]	; (8003210 <BSP_LCD_DrawBitmap+0x17c>)
 8003162:	68f9      	ldr	r1, [r7, #12]
 8003164:	0149      	lsls	r1, r1, #5
 8003166:	4401      	add	r1, r0
 8003168:	3110      	adds	r1, #16
 800316a:	6809      	ldr	r1, [r1, #0]
 800316c:	fb01 f303 	mul.w	r3, r1, r3
 8003170:	4413      	add	r3, r2
 8003172:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	3b20      	subs	r3, #32
 8003178:	2b07      	cmp	r3, #7
 800317a:	d802      	bhi.n	8003182 <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 800317c:	2300      	movs	r3, #0
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
 8003180:	e008      	b.n	8003194 <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	3b10      	subs	r3, #16
 8003186:	2b07      	cmp	r3, #7
 8003188:	d802      	bhi.n	8003190 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 800318a:	2302      	movs	r3, #2
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
 800318e:	e001      	b.n	8003194 <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 8003190:	2301      	movs	r3, #1
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	3b01      	subs	r3, #1
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	08d2      	lsrs	r2, r2, #3
 80031a2:	fb03 f202 	mul.w	r2, r3, r2
 80031a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a8:	4413      	add	r3, r2
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	4413      	add	r3, r2
 80031ae:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 80031b0:	2300      	movs	r3, #0
 80031b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b4:	e023      	b.n	80031fe <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 80031b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	6a39      	ldr	r1, [r7, #32]
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 fa77 	bl	80036b4 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 80031c6:	4a12      	ldr	r2, [pc, #72]	; (8003210 <BSP_LCD_DrawBitmap+0x17c>)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	015b      	lsls	r3, r3, #5
 80031cc:	4413      	add	r3, r2
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	490f      	ldr	r1, [pc, #60]	; (8003210 <BSP_LCD_DrawBitmap+0x17c>)
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	0152      	lsls	r2, r2, #5
 80031d6:	440a      	add	r2, r1
 80031d8:	3210      	adds	r2, #16
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	fb02 f303 	mul.w	r3, r2, r3
 80031e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031e2:	4413      	add	r3, r2
 80031e4:	62bb      	str	r3, [r7, #40]	; 0x28
    pbmp -= width*(bit_pixel/8U);
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	08db      	lsrs	r3, r3, #3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	fb02 f303 	mul.w	r3, r2, r3
 80031f0:	425b      	negs	r3, r3
 80031f2:	6a3a      	ldr	r2, [r7, #32]
 80031f4:	4413      	add	r3, r2
 80031f6:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 80031f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fa:	3301      	adds	r3, #1
 80031fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	429a      	cmp	r2, r3
 8003204:	d3d7      	bcc.n	80031b6 <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
 8003206:	69fb      	ldr	r3, [r7, #28]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3730      	adds	r7, #48	; 0x30
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	240217c0 	.word	0x240217c0
 8003214:	24021718 	.word	0x24021718

08003218 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
 8003224:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 800322a:	2300      	movs	r3, #0
 800322c:	61fb      	str	r3, [r7, #28]
 800322e:	e032      	b.n	8003296 <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	e028      	b.n	8003288 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	461a      	mov	r2, r3
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	3301      	adds	r3, #1
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	021b      	lsls	r3, r3, #8
 8003244:	431a      	orrs	r2, r3
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	3302      	adds	r3, #2
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	041b      	lsls	r3, r3, #16
 800324e:	431a      	orrs	r2, r3
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	3303      	adds	r3, #3
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	061b      	lsls	r3, r3, #24
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	18d1      	adds	r1, r2, r3
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	441a      	add	r2, r3
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f95e 	bl	800352c <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
 8003270:	4a0d      	ldr	r2, [pc, #52]	; (80032a8 <BSP_LCD_FillRGBRect+0x90>)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	015b      	lsls	r3, r3, #5
 8003276:	4413      	add	r3, r2
 8003278:	3310      	adds	r3, #16
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4413      	add	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	3301      	adds	r3, #1
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328c:	429a      	cmp	r2, r3
 800328e:	d3d2      	bcc.n	8003236 <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	3301      	adds	r3, #1
 8003294:	61fb      	str	r3, [r7, #28]
 8003296:	69fa      	ldr	r2, [r7, #28]
 8003298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329a:	429a      	cmp	r2, r3
 800329c:	d3c8      	bcc.n	8003230 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3720      	adds	r7, #32
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	240217c0 	.word	0x240217c0

080032ac <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b088      	sub	sp, #32
 80032b0:	af02      	add	r7, sp, #8
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
 80032b8:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80032ba:	4a21      	ldr	r2, [pc, #132]	; (8003340 <BSP_LCD_DrawHLine+0x94>)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	015b      	lsls	r3, r3, #5
 80032c0:	4413      	add	r3, r2
 80032c2:	3308      	adds	r3, #8
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a1f      	ldr	r2, [pc, #124]	; (8003344 <BSP_LCD_DrawHLine+0x98>)
 80032c8:	2134      	movs	r1, #52	; 0x34
 80032ca:	fb01 f303 	mul.w	r3, r1, r3
 80032ce:	4413      	add	r3, r2
 80032d0:	335c      	adds	r3, #92	; 0x5c
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	491a      	ldr	r1, [pc, #104]	; (8003340 <BSP_LCD_DrawHLine+0x94>)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	015b      	lsls	r3, r3, #5
 80032da:	440b      	add	r3, r1
 80032dc:	3310      	adds	r3, #16
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4817      	ldr	r0, [pc, #92]	; (8003340 <BSP_LCD_DrawHLine+0x94>)
 80032e2:	68f9      	ldr	r1, [r7, #12]
 80032e4:	0149      	lsls	r1, r1, #5
 80032e6:	4401      	add	r1, r0
 80032e8:	6809      	ldr	r1, [r1, #0]
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	fb01 f000 	mul.w	r0, r1, r0
 80032f0:	68b9      	ldr	r1, [r7, #8]
 80032f2:	4401      	add	r1, r0
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	4413      	add	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	441a      	add	r2, r3
 8003302:	490f      	ldr	r1, [pc, #60]	; (8003340 <BSP_LCD_DrawHLine+0x94>)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	015b      	lsls	r3, r3, #5
 8003308:	440b      	add	r3, r1
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d907      	bls.n	8003320 <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 8003310:	4a0b      	ldr	r2, [pc, #44]	; (8003340 <BSP_LCD_DrawHLine+0x94>)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	015b      	lsls	r3, r3, #5
 8003316:	4413      	add	r3, r2
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8003320:	6979      	ldr	r1, [r7, #20]
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	9301      	str	r3, [sp, #4]
 8003326:	2300      	movs	r3, #0
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	2301      	movs	r3, #1
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 f956 	bl	80035e0 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	240217c0 	.word	0x240217c0
 8003344:	24021718 	.word	0x24021718

08003348 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af02      	add	r7, sp, #8
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
 8003354:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8003356:	4a24      	ldr	r2, [pc, #144]	; (80033e8 <BSP_LCD_DrawVLine+0xa0>)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	015b      	lsls	r3, r3, #5
 800335c:	4413      	add	r3, r2
 800335e:	3308      	adds	r3, #8
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a22      	ldr	r2, [pc, #136]	; (80033ec <BSP_LCD_DrawVLine+0xa4>)
 8003364:	2134      	movs	r1, #52	; 0x34
 8003366:	fb01 f303 	mul.w	r3, r1, r3
 800336a:	4413      	add	r3, r2
 800336c:	335c      	adds	r3, #92	; 0x5c
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	491d      	ldr	r1, [pc, #116]	; (80033e8 <BSP_LCD_DrawVLine+0xa0>)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	015b      	lsls	r3, r3, #5
 8003376:	440b      	add	r3, r1
 8003378:	3310      	adds	r3, #16
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	481a      	ldr	r0, [pc, #104]	; (80033e8 <BSP_LCD_DrawVLine+0xa0>)
 800337e:	68f9      	ldr	r1, [r7, #12]
 8003380:	0149      	lsls	r1, r1, #5
 8003382:	4401      	add	r1, r0
 8003384:	6809      	ldr	r1, [r1, #0]
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	fb01 f000 	mul.w	r0, r1, r0
 800338c:	68b9      	ldr	r1, [r7, #8]
 800338e:	4401      	add	r1, r0
 8003390:	fb01 f303 	mul.w	r3, r1, r3
 8003394:	4413      	add	r3, r2
 8003396:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	441a      	add	r2, r3
 800339e:	4912      	ldr	r1, [pc, #72]	; (80033e8 <BSP_LCD_DrawVLine+0xa0>)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	015b      	lsls	r3, r3, #5
 80033a4:	440b      	add	r3, r1
 80033a6:	3304      	adds	r3, #4
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d908      	bls.n	80033c0 <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 80033ae:	4a0e      	ldr	r2, [pc, #56]	; (80033e8 <BSP_LCD_DrawVLine+0xa0>)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	015b      	lsls	r3, r3, #5
 80033b4:	4413      	add	r3, r2
 80033b6:	3304      	adds	r3, #4
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 80033c0:	6979      	ldr	r1, [r7, #20]
 80033c2:	4a09      	ldr	r2, [pc, #36]	; (80033e8 <BSP_LCD_DrawVLine+0xa0>)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	015b      	lsls	r3, r3, #5
 80033c8:	4413      	add	r3, r2
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	3b01      	subs	r3, #1
 80033ce:	6a3a      	ldr	r2, [r7, #32]
 80033d0:	9201      	str	r2, [sp, #4]
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	2201      	movs	r2, #1
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 f901 	bl	80035e0 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	240217c0 	.word	0x240217c0
 80033ec:	24021718 	.word	0x24021718

080033f0 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80033fe:	4a1b      	ldr	r2, [pc, #108]	; (800346c <BSP_LCD_FillRect+0x7c>)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	015b      	lsls	r3, r3, #5
 8003404:	4413      	add	r3, r2
 8003406:	3308      	adds	r3, #8
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a19      	ldr	r2, [pc, #100]	; (8003470 <BSP_LCD_FillRect+0x80>)
 800340c:	2134      	movs	r1, #52	; 0x34
 800340e:	fb01 f303 	mul.w	r3, r1, r3
 8003412:	4413      	add	r3, r2
 8003414:	335c      	adds	r3, #92	; 0x5c
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	4914      	ldr	r1, [pc, #80]	; (800346c <BSP_LCD_FillRect+0x7c>)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	015b      	lsls	r3, r3, #5
 800341e:	440b      	add	r3, r1
 8003420:	3310      	adds	r3, #16
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4811      	ldr	r0, [pc, #68]	; (800346c <BSP_LCD_FillRect+0x7c>)
 8003426:	68f9      	ldr	r1, [r7, #12]
 8003428:	0149      	lsls	r1, r1, #5
 800342a:	4401      	add	r1, r0
 800342c:	6809      	ldr	r1, [r1, #0]
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	fb01 f000 	mul.w	r0, r1, r0
 8003434:	68b9      	ldr	r1, [r7, #8]
 8003436:	4401      	add	r1, r0
 8003438:	fb01 f303 	mul.w	r3, r1, r3
 800343c:	4413      	add	r3, r2
 800343e:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8003440:	6979      	ldr	r1, [r7, #20]
 8003442:	4a0a      	ldr	r2, [pc, #40]	; (800346c <BSP_LCD_FillRect+0x7c>)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	015b      	lsls	r3, r3, #5
 8003448:	4413      	add	r3, r2
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003452:	9201      	str	r2, [sp, #4]
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 f8c0 	bl	80035e0 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	240217c0 	.word	0x240217c0
 8003470:	24021718 	.word	0x24021718

08003474 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003482:	4a28      	ldr	r2, [pc, #160]	; (8003524 <BSP_LCD_ReadPixel+0xb0>)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	015b      	lsls	r3, r3, #5
 8003488:	4413      	add	r3, r2
 800348a:	3308      	adds	r3, #8
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a26      	ldr	r2, [pc, #152]	; (8003528 <BSP_LCD_ReadPixel+0xb4>)
 8003490:	2134      	movs	r1, #52	; 0x34
 8003492:	fb01 f303 	mul.w	r3, r1, r3
 8003496:	4413      	add	r3, r2
 8003498:	3348      	adds	r3, #72	; 0x48
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d11c      	bne.n	80034da <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 80034a0:	4a20      	ldr	r2, [pc, #128]	; (8003524 <BSP_LCD_ReadPixel+0xb0>)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	015b      	lsls	r3, r3, #5
 80034a6:	4413      	add	r3, r2
 80034a8:	3308      	adds	r3, #8
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a1e      	ldr	r2, [pc, #120]	; (8003528 <BSP_LCD_ReadPixel+0xb4>)
 80034ae:	2134      	movs	r1, #52	; 0x34
 80034b0:	fb01 f303 	mul.w	r3, r1, r3
 80034b4:	4413      	add	r3, r2
 80034b6:	335c      	adds	r3, #92	; 0x5c
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	491a      	ldr	r1, [pc, #104]	; (8003524 <BSP_LCD_ReadPixel+0xb0>)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	015b      	lsls	r3, r3, #5
 80034c0:	440b      	add	r3, r1
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	fb03 f101 	mul.w	r1, r3, r1
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	440b      	add	r3, r1
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	e01d      	b.n	8003516 <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 80034da:	4a12      	ldr	r2, [pc, #72]	; (8003524 <BSP_LCD_ReadPixel+0xb0>)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	015b      	lsls	r3, r3, #5
 80034e0:	4413      	add	r3, r2
 80034e2:	3308      	adds	r3, #8
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a10      	ldr	r2, [pc, #64]	; (8003528 <BSP_LCD_ReadPixel+0xb4>)
 80034e8:	2134      	movs	r1, #52	; 0x34
 80034ea:	fb01 f303 	mul.w	r3, r1, r3
 80034ee:	4413      	add	r3, r2
 80034f0:	335c      	adds	r3, #92	; 0x5c
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	490b      	ldr	r1, [pc, #44]	; (8003524 <BSP_LCD_ReadPixel+0xb0>)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	015b      	lsls	r3, r3, #5
 80034fa:	440b      	add	r3, r1
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	fb03 f101 	mul.w	r1, r3, r1
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	440b      	add	r3, r1
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	4413      	add	r3, r2
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	b29b      	uxth	r3, r3
 8003510:	461a      	mov	r2, r3
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	240217c0 	.word	0x240217c0
 8003528:	24021718 	.word	0x24021718

0800352c <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800353a:	4a27      	ldr	r2, [pc, #156]	; (80035d8 <BSP_LCD_WritePixel+0xac>)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	015b      	lsls	r3, r3, #5
 8003540:	4413      	add	r3, r2
 8003542:	3308      	adds	r3, #8
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a25      	ldr	r2, [pc, #148]	; (80035dc <BSP_LCD_WritePixel+0xb0>)
 8003548:	2134      	movs	r1, #52	; 0x34
 800354a:	fb01 f303 	mul.w	r3, r1, r3
 800354e:	4413      	add	r3, r2
 8003550:	3348      	adds	r3, #72	; 0x48
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d11c      	bne.n	8003592 <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 8003558:	4a1f      	ldr	r2, [pc, #124]	; (80035d8 <BSP_LCD_WritePixel+0xac>)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	015b      	lsls	r3, r3, #5
 800355e:	4413      	add	r3, r2
 8003560:	3308      	adds	r3, #8
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a1d      	ldr	r2, [pc, #116]	; (80035dc <BSP_LCD_WritePixel+0xb0>)
 8003566:	2134      	movs	r1, #52	; 0x34
 8003568:	fb01 f303 	mul.w	r3, r1, r3
 800356c:	4413      	add	r3, r2
 800356e:	335c      	adds	r3, #92	; 0x5c
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	4919      	ldr	r1, [pc, #100]	; (80035d8 <BSP_LCD_WritePixel+0xac>)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	015b      	lsls	r3, r3, #5
 8003578:	440b      	add	r3, r1
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	fb03 f101 	mul.w	r1, r3, r1
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	440b      	add	r3, r1
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	461a      	mov	r2, r3
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	6013      	str	r3, [r2, #0]
 8003590:	e01b      	b.n	80035ca <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 8003592:	4a11      	ldr	r2, [pc, #68]	; (80035d8 <BSP_LCD_WritePixel+0xac>)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	015b      	lsls	r3, r3, #5
 8003598:	4413      	add	r3, r2
 800359a:	3308      	adds	r3, #8
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a0f      	ldr	r2, [pc, #60]	; (80035dc <BSP_LCD_WritePixel+0xb0>)
 80035a0:	2134      	movs	r1, #52	; 0x34
 80035a2:	fb01 f303 	mul.w	r3, r1, r3
 80035a6:	4413      	add	r3, r2
 80035a8:	335c      	adds	r3, #92	; 0x5c
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	490a      	ldr	r1, [pc, #40]	; (80035d8 <BSP_LCD_WritePixel+0xac>)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	015b      	lsls	r3, r3, #5
 80035b2:	440b      	add	r3, r1
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	fb03 f101 	mul.w	r1, r3, r1
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	440b      	add	r3, r1
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	4413      	add	r3, r2
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	b292      	uxth	r2, r2
 80035c8:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	240217c0 	.word	0x240217c0
 80035dc:	24021718 	.word	0x24021718

080035e0 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 80035f2:	4a2d      	ldr	r2, [pc, #180]	; (80036a8 <LL_FillBuffer+0xc8>)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	015b      	lsls	r3, r3, #5
 80035f8:	4413      	add	r3, r2
 80035fa:	330c      	adds	r3, #12
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d129      	bne.n	8003656 <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8003602:	2302      	movs	r3, #2
 8003604:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	0adb      	lsrs	r3, r3, #11
 800360a:	f003 021f 	and.w	r2, r3, #31
 800360e:	4613      	mov	r3, r2
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	4413      	add	r3, r2
 8003614:	015a      	lsls	r2, r3, #5
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	3317      	adds	r3, #23
 800361a:	099b      	lsrs	r3, r3, #6
 800361c:	0419      	lsls	r1, r3, #16
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	095b      	lsrs	r3, r3, #5
 8003622:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003626:	4613      	mov	r3, r2
 8003628:	01db      	lsls	r3, r3, #7
 800362a:	4413      	add	r3, r2
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	4413      	add	r3, r2
 8003630:	3321      	adds	r3, #33	; 0x21
 8003632:	099b      	lsrs	r3, r3, #6
 8003634:	021b      	lsls	r3, r3, #8
 8003636:	4319      	orrs	r1, r3
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	f003 021f 	and.w	r2, r3, #31
 800363e:	4613      	mov	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	4413      	add	r3, r2
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	3317      	adds	r3, #23
 800364a:	099b      	lsrs	r3, r3, #6
 800364c:	430b      	orrs	r3, r1
 800364e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003652:	613b      	str	r3, [r7, #16]
    break;
 8003654:	e002      	b.n	800365c <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]
    break;
 800365a:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800365c:	4b13      	ldr	r3, [pc, #76]	; (80036ac <LL_FillBuffer+0xcc>)
 800365e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003662:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8003664:	4a11      	ldr	r2, [pc, #68]	; (80036ac <LL_FillBuffer+0xcc>)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800366a:	4a10      	ldr	r2, [pc, #64]	; (80036ac <LL_FillBuffer+0xcc>)
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 8003670:	4b0e      	ldr	r3, [pc, #56]	; (80036ac <LL_FillBuffer+0xcc>)
 8003672:	4a0f      	ldr	r2, [pc, #60]	; (80036b0 <LL_FillBuffer+0xd0>)
 8003674:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8003676:	480d      	ldr	r0, [pc, #52]	; (80036ac <LL_FillBuffer+0xcc>)
 8003678:	f002 fa76 	bl	8005b68 <HAL_DMA2D_Init>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10e      	bne.n	80036a0 <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6939      	ldr	r1, [r7, #16]
 800368c:	4807      	ldr	r0, [pc, #28]	; (80036ac <LL_FillBuffer+0xcc>)
 800368e:	f002 fad9 	bl	8005c44 <HAL_DMA2D_Start>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d103      	bne.n	80036a0 <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8003698:	2132      	movs	r1, #50	; 0x32
 800369a:	4804      	ldr	r0, [pc, #16]	; (80036ac <LL_FillBuffer+0xcc>)
 800369c:	f002 fafd 	bl	8005c9a <HAL_DMA2D_PollForTransfer>
    }
  }
}
 80036a0:	bf00      	nop
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	240217c0 	.word	0x240217c0
 80036ac:	240216b0 	.word	0x240216b0
 80036b0:	52001000 	.word	0x52001000

080036b4 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af02      	add	r7, sp, #8
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 80036c2:	4a23      	ldr	r2, [pc, #140]	; (8003750 <LL_ConvertLineToRGB+0x9c>)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	015b      	lsls	r3, r3, #5
 80036c8:	4413      	add	r3, r2
 80036ca:	330c      	adds	r3, #12
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d102      	bne.n	80036d8 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 80036d2:	2302      	movs	r3, #2
 80036d4:	617b      	str	r3, [r7, #20]
    break;
 80036d6:	e002      	b.n	80036de <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
    break;
 80036dc:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 80036de:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <LL_ConvertLineToRGB+0xa0>)
 80036e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80036e4:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 80036e6:	4a1b      	ldr	r2, [pc, #108]	; (8003754 <LL_ConvertLineToRGB+0xa0>)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 80036ec:	4b19      	ldr	r3, [pc, #100]	; (8003754 <LL_ConvertLineToRGB+0xa0>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80036f2:	4b18      	ldr	r3, [pc, #96]	; (8003754 <LL_ConvertLineToRGB+0xa0>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 80036f8:	4b16      	ldr	r3, [pc, #88]	; (8003754 <LL_ConvertLineToRGB+0xa0>)
 80036fa:	22ff      	movs	r2, #255	; 0xff
 80036fc:	651a      	str	r2, [r3, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 80036fe:	4a15      	ldr	r2, [pc, #84]	; (8003754 <LL_ConvertLineToRGB+0xa0>)
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	6493      	str	r3, [r2, #72]	; 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8003704:	4b13      	ldr	r3, [pc, #76]	; (8003754 <LL_ConvertLineToRGB+0xa0>)
 8003706:	2200      	movs	r2, #0
 8003708:	645a      	str	r2, [r3, #68]	; 0x44

  hlcd_dma2d.Instance = DMA2D;
 800370a:	4b12      	ldr	r3, [pc, #72]	; (8003754 <LL_ConvertLineToRGB+0xa0>)
 800370c:	4a12      	ldr	r2, [pc, #72]	; (8003758 <LL_ConvertLineToRGB+0xa4>)
 800370e:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8003710:	4810      	ldr	r0, [pc, #64]	; (8003754 <LL_ConvertLineToRGB+0xa0>)
 8003712:	f002 fa29 	bl	8005b68 <HAL_DMA2D_Init>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d115      	bne.n	8003748 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800371c:	2101      	movs	r1, #1
 800371e:	480d      	ldr	r0, [pc, #52]	; (8003754 <LL_ConvertLineToRGB+0xa0>)
 8003720:	f002 fba4 	bl	8005e6c <HAL_DMA2D_ConfigLayer>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10e      	bne.n	8003748 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800372a:	68b9      	ldr	r1, [r7, #8]
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	2301      	movs	r3, #1
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	4807      	ldr	r0, [pc, #28]	; (8003754 <LL_ConvertLineToRGB+0xa0>)
 8003736:	f002 fa85 	bl	8005c44 <HAL_DMA2D_Start>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d103      	bne.n	8003748 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8003740:	2132      	movs	r1, #50	; 0x32
 8003742:	4804      	ldr	r0, [pc, #16]	; (8003754 <LL_ConvertLineToRGB+0xa0>)
 8003744:	f002 faa9 	bl	8005c9a <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8003748:	bf00      	nop
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	240217c0 	.word	0x240217c0
 8003754:	240216b0 	.word	0x240216b0
 8003758:	52001000 	.word	0x52001000

0800375c <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08e      	sub	sp, #56	; 0x38
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a5b      	ldr	r2, [pc, #364]	; (80038d8 <LTDC_MspInit+0x17c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	f040 80b0 	bne.w	80038d0 <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003770:	4b5a      	ldr	r3, [pc, #360]	; (80038dc <LTDC_MspInit+0x180>)
 8003772:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003776:	4a59      	ldr	r2, [pc, #356]	; (80038dc <LTDC_MspInit+0x180>)
 8003778:	f043 0308 	orr.w	r3, r3, #8
 800377c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003780:	4b56      	ldr	r3, [pc, #344]	; (80038dc <LTDC_MspInit+0x180>)
 8003782:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	623b      	str	r3, [r7, #32]
 800378c:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800378e:	4b53      	ldr	r3, [pc, #332]	; (80038dc <LTDC_MspInit+0x180>)
 8003790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003794:	4a51      	ldr	r2, [pc, #324]	; (80038dc <LTDC_MspInit+0x180>)
 8003796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800379a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800379e:	4b4f      	ldr	r3, [pc, #316]	; (80038dc <LTDC_MspInit+0x180>)
 80037a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	61fb      	str	r3, [r7, #28]
 80037aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80037ac:	4b4b      	ldr	r3, [pc, #300]	; (80038dc <LTDC_MspInit+0x180>)
 80037ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037b2:	4a4a      	ldr	r2, [pc, #296]	; (80038dc <LTDC_MspInit+0x180>)
 80037b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037bc:	4b47      	ldr	r3, [pc, #284]	; (80038dc <LTDC_MspInit+0x180>)
 80037be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037c6:	61bb      	str	r3, [r7, #24]
 80037c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80037ca:	4b44      	ldr	r3, [pc, #272]	; (80038dc <LTDC_MspInit+0x180>)
 80037cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037d0:	4a42      	ldr	r2, [pc, #264]	; (80038dc <LTDC_MspInit+0x180>)
 80037d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037da:	4b40      	ldr	r3, [pc, #256]	; (80038dc <LTDC_MspInit+0x180>)
 80037dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80037e8:	4b3c      	ldr	r3, [pc, #240]	; (80038dc <LTDC_MspInit+0x180>)
 80037ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037ee:	4a3b      	ldr	r2, [pc, #236]	; (80038dc <LTDC_MspInit+0x180>)
 80037f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037f8:	4b38      	ldr	r3, [pc, #224]	; (80038dc <LTDC_MspInit+0x180>)
 80037fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003806:	4b35      	ldr	r3, [pc, #212]	; (80038dc <LTDC_MspInit+0x180>)
 8003808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800380c:	4a33      	ldr	r2, [pc, #204]	; (80038dc <LTDC_MspInit+0x180>)
 800380e:	f043 0308 	orr.w	r3, r3, #8
 8003812:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003816:	4b31      	ldr	r3, [pc, #196]	; (80038dc <LTDC_MspInit+0x180>)
 8003818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
 8003824:	f24d 2303 	movw	r3, #53763	; 0xd203
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800382a:	2302      	movs	r3, #2
 800382c:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 800382e:	2300      	movs	r3, #0
 8003830:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003832:	2302      	movs	r3, #2
 8003834:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003836:	230e      	movs	r3, #14
 8003838:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800383a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800383e:	4619      	mov	r1, r3
 8003840:	4827      	ldr	r0, [pc, #156]	; (80038e0 <LTDC_MspInit+0x184>)
 8003842:	f002 fccb 	bl	80061dc <HAL_GPIO_Init>

    /* GPIOJ configuration */
    //gpio_init_structure.Pin       = GPIO_PIN_All;
    // GPIOJ Pin 2 je za LED 1!!!! Tu so imeli napako, ker so inicializirali vse pine na portu J
    // kot GPIO_AF14_LTDC. Popravil P.B. UL FRI, 10.12.2022
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | \
 8003846:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800384a:	627b      	str	r3, [r7, #36]	; 0x24
    								GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
									GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 ;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800384c:	230e      	movs	r3, #14
 800384e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8003850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003854:	4619      	mov	r1, r3
 8003856:	4823      	ldr	r0, [pc, #140]	; (80038e4 <LTDC_MspInit+0x188>)
 8003858:	f002 fcc0 	bl	80061dc <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800385c:	23ff      	movs	r3, #255	; 0xff
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003860:	230e      	movs	r3, #14
 8003862:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003868:	4619      	mov	r1, r3
 800386a:	481f      	ldr	r0, [pc, #124]	; (80038e8 <LTDC_MspInit+0x18c>)
 800386c:	f002 fcb6 	bl	80061dc <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
 8003870:	f240 2302 	movw	r3, #514	; 0x202
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003876:	2302      	movs	r3, #2
 8003878:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 800387a:	2300      	movs	r3, #0
 800387c:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800387e:	2302      	movs	r3, #2
 8003880:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003882:	230e      	movs	r3, #14
 8003884:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8003886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800388a:	4619      	mov	r1, r3
 800388c:	4817      	ldr	r0, [pc, #92]	; (80038ec <LTDC_MspInit+0x190>)
 800388e:	f002 fca5 	bl	80061dc <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
 8003892:	2380      	movs	r3, #128	; 0x80
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003896:	2301      	movs	r3, #1
 8003898:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800389a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800389e:	4619      	mov	r1, r3
 80038a0:	4813      	ldr	r0, [pc, #76]	; (80038f0 <LTDC_MspInit+0x194>)
 80038a2:	f002 fc9b 	bl	80061dc <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 80038a6:	2201      	movs	r2, #1
 80038a8:	2180      	movs	r1, #128	; 0x80
 80038aa:	4811      	ldr	r0, [pc, #68]	; (80038f0 <LTDC_MspInit+0x194>)
 80038ac:	f002 fe46 	bl	800653c <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 80038b0:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <LTDC_MspInit+0x180>)
 80038b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038b6:	4a09      	ldr	r2, [pc, #36]	; (80038dc <LTDC_MspInit+0x180>)
 80038b8:	f043 0308 	orr.w	r3, r3, #8
 80038bc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 80038c0:	4b06      	ldr	r3, [pc, #24]	; (80038dc <LTDC_MspInit+0x180>)
 80038c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038c6:	4a05      	ldr	r2, [pc, #20]	; (80038dc <LTDC_MspInit+0x180>)
 80038c8:	f023 0308 	bic.w	r3, r3, #8
 80038cc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
}
 80038d0:	bf00      	nop
 80038d2:	3738      	adds	r7, #56	; 0x38
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	50001000 	.word	0x50001000
 80038dc:	58024400 	.word	0x58024400
 80038e0:	58022000 	.word	0x58022000
 80038e4:	58022400 	.word	0x58022400
 80038e8:	58022800 	.word	0x58022800
 80038ec:	58021c00 	.word	0x58021c00
 80038f0:	58020c00 	.word	0x58020c00

080038f4 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a11      	ldr	r2, [pc, #68]	; (8003948 <DMA2D_MspInit+0x54>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d11a      	bne.n	800393c <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003906:	4b11      	ldr	r3, [pc, #68]	; (800394c <DMA2D_MspInit+0x58>)
 8003908:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800390c:	4a0f      	ldr	r2, [pc, #60]	; (800394c <DMA2D_MspInit+0x58>)
 800390e:	f043 0310 	orr.w	r3, r3, #16
 8003912:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003916:	4b0d      	ldr	r3, [pc, #52]	; (800394c <DMA2D_MspInit+0x58>)
 8003918:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 8003924:	4b09      	ldr	r3, [pc, #36]	; (800394c <DMA2D_MspInit+0x58>)
 8003926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003928:	4a08      	ldr	r2, [pc, #32]	; (800394c <DMA2D_MspInit+0x58>)
 800392a:	f043 0310 	orr.w	r3, r3, #16
 800392e:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8003930:	4b06      	ldr	r3, [pc, #24]	; (800394c <DMA2D_MspInit+0x58>)
 8003932:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003934:	4a05      	ldr	r2, [pc, #20]	; (800394c <DMA2D_MspInit+0x58>)
 8003936:	f023 0310 	bic.w	r3, r3, #16
 800393a:	67d3      	str	r3, [r2, #124]	; 0x7c
  }
}
 800393c:	bf00      	nop
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	52001000 	.word	0x52001000
 800394c:	58024400 	.word	0x58024400

08003950 <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08a      	sub	sp, #40	; 0x28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003958:	4b18      	ldr	r3, [pc, #96]	; (80039bc <TIMx_PWM_MspInit+0x6c>)
 800395a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800395e:	4a17      	ldr	r2, [pc, #92]	; (80039bc <TIMx_PWM_MspInit+0x6c>)
 8003960:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003964:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003968:	4b14      	ldr	r3, [pc, #80]	; (80039bc <TIMx_PWM_MspInit+0x6c>)
 800396a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800396e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
 8003976:	4b11      	ldr	r3, [pc, #68]	; (80039bc <TIMx_PWM_MspInit+0x6c>)
 8003978:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800397c:	4a0f      	ldr	r2, [pc, #60]	; (80039bc <TIMx_PWM_MspInit+0x6c>)
 800397e:	f043 0302 	orr.w	r3, r3, #2
 8003982:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003986:	4b0d      	ldr	r3, [pc, #52]	; (80039bc <TIMx_PWM_MspInit+0x6c>)
 8003988:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003994:	2302      	movs	r3, #2
 8003996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003998:	2300      	movs	r3, #0
 800399a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800399c:	2301      	movs	r3, #1
 800399e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
 80039a0:	2303      	movs	r3, #3
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
 80039a4:	2301      	movs	r3, #1
 80039a6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
 80039a8:	f107 0314 	add.w	r3, r7, #20
 80039ac:	4619      	mov	r1, r3
 80039ae:	4804      	ldr	r0, [pc, #16]	; (80039c0 <TIMx_PWM_MspInit+0x70>)
 80039b0:	f002 fc14 	bl	80061dc <HAL_GPIO_Init>
}
 80039b4:	bf00      	nop
 80039b6:	3728      	adds	r7, #40	; 0x28
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	58024400 	.word	0x58024400
 80039c0:	58022800 	.word	0x58022800

080039c4 <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a11      	ldr	r2, [pc, #68]	; (8003a14 <TIMx_PWM_Init+0x50>)
 80039d0:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f007 f98d 	bl	800acf2 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff ffb9 	bl	8003950 <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2204      	movs	r2, #4
 80039e2:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f24c 3250 	movw	r2, #50000	; 0xc350
 80039ea:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f007 f91d 	bl	800ac44 <HAL_TIM_PWM_Init>
}
 8003a0a:	bf00      	nop
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40010400 	.word	0x40010400

08003a18 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 8003a2a:	f06f 0301 	mvn.w	r3, #1
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	e044      	b.n	8003abc <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2234      	movs	r2, #52	; 0x34
 8003a36:	fb02 f303 	mul.w	r3, r2, r3
 8003a3a:	4a23      	ldr	r2, [pc, #140]	; (8003ac8 <BSP_SDRAM_Init+0xb0>)
 8003a3c:	4413      	add	r3, r2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 f8a8 	bl	8003b94 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2234      	movs	r2, #52	; 0x34
 8003a48:	fb02 f303 	mul.w	r3, r2, r3
 8003a4c:	4a1e      	ldr	r2, [pc, #120]	; (8003ac8 <BSP_SDRAM_Init+0xb0>)
 8003a4e:	4413      	add	r3, r2
 8003a50:	2210      	movs	r2, #16
 8003a52:	2104      	movs	r1, #4
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 f83b 	bl	8003ad0 <MX_SDRAM_BANK2_Init>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 8003a60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	e029      	b.n	8003abc <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8003a68:	4b18      	ldr	r3, [pc, #96]	; (8003acc <BSP_SDRAM_Init+0xb4>)
 8003a6a:	2208      	movs	r2, #8
 8003a6c:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 8003a6e:	4b17      	ldr	r3, [pc, #92]	; (8003acc <BSP_SDRAM_Init+0xb4>)
 8003a70:	2203      	movs	r2, #3
 8003a72:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8003a74:	4b15      	ldr	r3, [pc, #84]	; (8003acc <BSP_SDRAM_Init+0xb4>)
 8003a76:	f240 6203 	movw	r2, #1539	; 0x603
 8003a7a:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 8003a7c:	4b13      	ldr	r3, [pc, #76]	; (8003acc <BSP_SDRAM_Init+0xb4>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 8003a82:	4b12      	ldr	r3, [pc, #72]	; (8003acc <BSP_SDRAM_Init+0xb4>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 8003a88:	4b10      	ldr	r3, [pc, #64]	; (8003acc <BSP_SDRAM_Init+0xb4>)
 8003a8a:	2230      	movs	r2, #48	; 0x30
 8003a8c:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 8003a8e:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <BSP_SDRAM_Init+0xb4>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 8003a94:	4b0d      	ldr	r3, [pc, #52]	; (8003acc <BSP_SDRAM_Init+0xb4>)
 8003a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a9a:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2234      	movs	r2, #52	; 0x34
 8003aa0:	fb02 f303 	mul.w	r3, r2, r3
 8003aa4:	4a08      	ldr	r2, [pc, #32]	; (8003ac8 <BSP_SDRAM_Init+0xb0>)
 8003aa6:	4413      	add	r3, r2
 8003aa8:	4908      	ldr	r1, [pc, #32]	; (8003acc <BSP_SDRAM_Init+0xb4>)
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fe fac9 	bl	8002042 <MT48LC4M32B2_Init>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8003ab6:	f06f 0304 	mvn.w	r3, #4
 8003aba:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8003abc:	68fb      	ldr	r3, [r7, #12]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	240217e0 	.word	0x240217e0
 8003acc:	24021814 	.word	0x24021814

08003ad0 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08c      	sub	sp, #48	; 0x30
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 8003adc:	4b20      	ldr	r3, [pc, #128]	; (8003b60 <MX_SDRAM_BANK2_Init+0x90>)
 8003ade:	4a21      	ldr	r2, [pc, #132]	; (8003b64 <MX_SDRAM_BANK2_Init+0x94>)
 8003ae0:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003afa:	4b19      	ldr	r3, [pc, #100]	; (8003b60 <MX_SDRAM_BANK2_Init+0x90>)
 8003afc:	2240      	movs	r2, #64	; 0x40
 8003afe:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003b06:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b14:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b1c:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 8003b24:	2302      	movs	r3, #2
 8003b26:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8003b28:	2307      	movs	r3, #7
 8003b2a:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 8003b2c:	2304      	movs	r3, #4
 8003b2e:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 8003b30:	2307      	movs	r3, #7
 8003b32:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 8003b34:	2302      	movs	r3, #2
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 8003b38:	2302      	movs	r3, #2
 8003b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8003b40:	f107 0314 	add.w	r3, r7, #20
 8003b44:	4619      	mov	r1, r3
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f006 fe5c 	bl	800a804 <HAL_SDRAM_Init>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3730      	adds	r7, #48	; 0x30
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	240217e0 	.word	0x240217e0
 8003b64:	52004140 	.word	0x52004140

08003b68 <BSP_SDRAM_IRQHandler>:
  * @brief  This function handles SDRAM MDMA interrupt request.
  * @param  Instance SDRAM instance
  * @retval None
  */
void BSP_SDRAM_IRQHandler(uint32_t Instance)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  HAL_MDMA_IRQHandler(hsdram[Instance].hmdma);
 8003b70:	4a07      	ldr	r2, [pc, #28]	; (8003b90 <BSP_SDRAM_IRQHandler+0x28>)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2134      	movs	r1, #52	; 0x34
 8003b76:	fb01 f303 	mul.w	r3, r1, r3
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3330      	adds	r3, #48	; 0x30
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f003 fd97 	bl	80076b4 <HAL_MDMA_IRQHandler>
}
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	240217e0 	.word	0x240217e0

08003b94 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08e      	sub	sp, #56	; 0x38
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003b9c:	4b73      	ldr	r3, [pc, #460]	; (8003d6c <SDRAM_MspInit+0x1d8>)
 8003b9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003ba2:	4a72      	ldr	r2, [pc, #456]	; (8003d6c <SDRAM_MspInit+0x1d8>)
 8003ba4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ba8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003bac:	4b6f      	ldr	r3, [pc, #444]	; (8003d6c <SDRAM_MspInit+0x1d8>)
 8003bae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003bb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bb6:	623b      	str	r3, [r7, #32]
 8003bb8:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 8003bba:	4b6c      	ldr	r3, [pc, #432]	; (8003d6c <SDRAM_MspInit+0x1d8>)
 8003bbc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003bc0:	4a6a      	ldr	r2, [pc, #424]	; (8003d6c <SDRAM_MspInit+0x1d8>)
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003bca:	4b68      	ldr	r3, [pc, #416]	; (8003d6c <SDRAM_MspInit+0x1d8>)
 8003bcc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	61fb      	str	r3, [r7, #28]
 8003bd6:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bd8:	4b64      	ldr	r3, [pc, #400]	; (8003d6c <SDRAM_MspInit+0x1d8>)
 8003bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bde:	4a63      	ldr	r2, [pc, #396]	; (8003d6c <SDRAM_MspInit+0x1d8>)
 8003be0:	f043 0308 	orr.w	r3, r3, #8
 8003be4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003be8:	4b60      	ldr	r3, [pc, #384]	; (8003d6c <SDRAM_MspInit+0x1d8>)
 8003bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	61bb      	str	r3, [r7, #24]
 8003bf4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003bf6:	4b5d      	ldr	r3, [pc, #372]	; (8003d6c <SDRAM_MspInit+0x1d8>)
 8003bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bfc:	4a5b      	ldr	r2, [pc, #364]	; (8003d6c <SDRAM_MspInit+0x1d8>)
 8003bfe:	f043 0310 	orr.w	r3, r3, #16
 8003c02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c06:	4b59      	ldr	r3, [pc, #356]	; (8003d6c <SDRAM_MspInit+0x1d8>)
 8003c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c0c:	f003 0310 	and.w	r3, r3, #16
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c14:	4b55      	ldr	r3, [pc, #340]	; (8003d6c <SDRAM_MspInit+0x1d8>)
 8003c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c1a:	4a54      	ldr	r2, [pc, #336]	; (8003d6c <SDRAM_MspInit+0x1d8>)
 8003c1c:	f043 0320 	orr.w	r3, r3, #32
 8003c20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c24:	4b51      	ldr	r3, [pc, #324]	; (8003d6c <SDRAM_MspInit+0x1d8>)
 8003c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c2a:	f003 0320 	and.w	r3, r3, #32
 8003c2e:	613b      	str	r3, [r7, #16]
 8003c30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c32:	4b4e      	ldr	r3, [pc, #312]	; (8003d6c <SDRAM_MspInit+0x1d8>)
 8003c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c38:	4a4c      	ldr	r2, [pc, #304]	; (8003d6c <SDRAM_MspInit+0x1d8>)
 8003c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c42:	4b4a      	ldr	r3, [pc, #296]	; (8003d6c <SDRAM_MspInit+0x1d8>)
 8003c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c50:	4b46      	ldr	r3, [pc, #280]	; (8003d6c <SDRAM_MspInit+0x1d8>)
 8003c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c56:	4a45      	ldr	r2, [pc, #276]	; (8003d6c <SDRAM_MspInit+0x1d8>)
 8003c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c60:	4b42      	ldr	r3, [pc, #264]	; (8003d6c <SDRAM_MspInit+0x1d8>)
 8003c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6a:	60bb      	str	r3, [r7, #8]
 8003c6c:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003c72:	2301      	movs	r3, #1
 8003c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c76:	2303      	movs	r3, #3
 8003c78:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003c7a:	230c      	movs	r3, #12
 8003c7c:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8003c7e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003c82:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4839      	ldr	r0, [pc, #228]	; (8003d70 <SDRAM_MspInit+0x1dc>)
 8003c8c:	f002 faa6 	bl	80061dc <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003c90:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	4835      	ldr	r0, [pc, #212]	; (8003d74 <SDRAM_MspInit+0x1e0>)
 8003c9e:	f002 fa9d 	bl	80061dc <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003ca2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cac:	4619      	mov	r1, r3
 8003cae:	4832      	ldr	r0, [pc, #200]	; (8003d78 <SDRAM_MspInit+0x1e4>)
 8003cb0:	f002 fa94 	bl	80061dc <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 8003cb4:	f248 1333 	movw	r3, #33075	; 0x8133
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	482e      	ldr	r0, [pc, #184]	; (8003d7c <SDRAM_MspInit+0x1e8>)
 8003cc2:	f002 fa8b 	bl	80061dc <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 8003cc6:	23e0      	movs	r3, #224	; 0xe0
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8003cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cce:	4619      	mov	r1, r3
 8003cd0:	482b      	ldr	r0, [pc, #172]	; (8003d80 <SDRAM_MspInit+0x1ec>)
 8003cd2:	f002 fa83 	bl	80061dc <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 8003cd6:	4b2b      	ldr	r3, [pc, #172]	; (8003d84 <SDRAM_MspInit+0x1f0>)
 8003cd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003cdc:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8003cde:	4b29      	ldr	r3, [pc, #164]	; (8003d84 <SDRAM_MspInit+0x1f0>)
 8003ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce4:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 8003ce6:	4b27      	ldr	r3, [pc, #156]	; (8003d84 <SDRAM_MspInit+0x1f0>)
 8003ce8:	2280      	movs	r2, #128	; 0x80
 8003cea:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8003cec:	4b25      	ldr	r3, [pc, #148]	; (8003d84 <SDRAM_MspInit+0x1f0>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 8003cf2:	4b24      	ldr	r3, [pc, #144]	; (8003d84 <SDRAM_MspInit+0x1f0>)
 8003cf4:	f240 2202 	movw	r2, #514	; 0x202
 8003cf8:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8003cfa:	4b22      	ldr	r3, [pc, #136]	; (8003d84 <SDRAM_MspInit+0x1f0>)
 8003cfc:	f640 0208 	movw	r2, #2056	; 0x808
 8003d00:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8003d02:	4b20      	ldr	r3, [pc, #128]	; (8003d84 <SDRAM_MspInit+0x1f0>)
 8003d04:	2220      	movs	r2, #32
 8003d06:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8003d08:	4b1e      	ldr	r3, [pc, #120]	; (8003d84 <SDRAM_MspInit+0x1f0>)
 8003d0a:	2280      	movs	r2, #128	; 0x80
 8003d0c:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8003d0e:	4b1d      	ldr	r3, [pc, #116]	; (8003d84 <SDRAM_MspInit+0x1f0>)
 8003d10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d14:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8003d16:	4b1b      	ldr	r3, [pc, #108]	; (8003d84 <SDRAM_MspInit+0x1f0>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8003d1c:	4b19      	ldr	r3, [pc, #100]	; (8003d84 <SDRAM_MspInit+0x1f0>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 8003d22:	4b18      	ldr	r3, [pc, #96]	; (8003d84 <SDRAM_MspInit+0x1f0>)
 8003d24:	2280      	movs	r2, #128	; 0x80
 8003d26:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8003d28:	4b16      	ldr	r3, [pc, #88]	; (8003d84 <SDRAM_MspInit+0x1f0>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 8003d2e:	4b15      	ldr	r3, [pc, #84]	; (8003d84 <SDRAM_MspInit+0x1f0>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8003d34:	4b13      	ldr	r3, [pc, #76]	; (8003d84 <SDRAM_MspInit+0x1f0>)
 8003d36:	4a14      	ldr	r2, [pc, #80]	; (8003d88 <SDRAM_MspInit+0x1f4>)
 8003d38:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8003d3a:	4b14      	ldr	r3, [pc, #80]	; (8003d8c <SDRAM_MspInit+0x1f8>)
 8003d3c:	4a11      	ldr	r2, [pc, #68]	; (8003d84 <SDRAM_MspInit+0x1f0>)
 8003d3e:	631a      	str	r2, [r3, #48]	; 0x30
 8003d40:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <SDRAM_MspInit+0x1f0>)
 8003d42:	4a12      	ldr	r2, [pc, #72]	; (8003d8c <SDRAM_MspInit+0x1f8>)
 8003d44:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 8003d46:	480f      	ldr	r0, [pc, #60]	; (8003d84 <SDRAM_MspInit+0x1f0>)
 8003d48:	f003 fbda 	bl	8007500 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 8003d4c:	480d      	ldr	r0, [pc, #52]	; (8003d84 <SDRAM_MspInit+0x1f0>)
 8003d4e:	f003 fb8b 	bl	8007468 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 8003d52:	2200      	movs	r2, #0
 8003d54:	210f      	movs	r1, #15
 8003d56:	207a      	movs	r0, #122	; 0x7a
 8003d58:	f000 f9c7 	bl	80040ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8003d5c:	207a      	movs	r0, #122	; 0x7a
 8003d5e:	f000 f9de 	bl	800411e <HAL_NVIC_EnableIRQ>
}
 8003d62:	bf00      	nop
 8003d64:	3738      	adds	r7, #56	; 0x38
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	58024400 	.word	0x58024400
 8003d70:	58020c00 	.word	0x58020c00
 8003d74:	58021000 	.word	0x58021000
 8003d78:	58021400 	.word	0x58021400
 8003d7c:	58021800 	.word	0x58021800
 8003d80:	58021c00 	.word	0x58021c00
 8003d84:	24021834 	.word	0x24021834
 8003d88:	52000040 	.word	0x52000040
 8003d8c:	240217e0 	.word	0x240217e0

08003d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d96:	2003      	movs	r0, #3
 8003d98:	f000 f99c 	bl	80040d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003d9c:	f004 fd30 	bl	8008800 <HAL_RCC_GetSysClockFreq>
 8003da0:	4602      	mov	r2, r0
 8003da2:	4b15      	ldr	r3, [pc, #84]	; (8003df8 <HAL_Init+0x68>)
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	0a1b      	lsrs	r3, r3, #8
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	4913      	ldr	r1, [pc, #76]	; (8003dfc <HAL_Init+0x6c>)
 8003dae:	5ccb      	ldrb	r3, [r1, r3]
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	fa22 f303 	lsr.w	r3, r2, r3
 8003db8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dba:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <HAL_Init+0x68>)
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	4a0e      	ldr	r2, [pc, #56]	; (8003dfc <HAL_Init+0x6c>)
 8003dc4:	5cd3      	ldrb	r3, [r2, r3]
 8003dc6:	f003 031f 	and.w	r3, r3, #31
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd0:	4a0b      	ldr	r2, [pc, #44]	; (8003e00 <HAL_Init+0x70>)
 8003dd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003dd4:	4a0b      	ldr	r2, [pc, #44]	; (8003e04 <HAL_Init+0x74>)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dda:	200f      	movs	r0, #15
 8003ddc:	f000 f814 	bl	8003e08 <HAL_InitTick>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e002      	b.n	8003df0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003dea:	f7fd fe57 	bl	8001a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	58024400 	.word	0x58024400
 8003dfc:	08010350 	.word	0x08010350
 8003e00:	24000018 	.word	0x24000018
 8003e04:	24000014 	.word	0x24000014

08003e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003e10:	4b15      	ldr	r3, [pc, #84]	; (8003e68 <HAL_InitTick+0x60>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e021      	b.n	8003e60 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003e1c:	4b13      	ldr	r3, [pc, #76]	; (8003e6c <HAL_InitTick+0x64>)
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	4b11      	ldr	r3, [pc, #68]	; (8003e68 <HAL_InitTick+0x60>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	4619      	mov	r1, r3
 8003e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 f981 	bl	800413a <HAL_SYSTICK_Config>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e00e      	b.n	8003e60 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b0f      	cmp	r3, #15
 8003e46:	d80a      	bhi.n	8003e5e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e48:	2200      	movs	r2, #0
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e50:	f000 f94b 	bl	80040ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e54:	4a06      	ldr	r2, [pc, #24]	; (8003e70 <HAL_InitTick+0x68>)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	e000      	b.n	8003e60 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	24000034 	.word	0x24000034
 8003e6c:	24000014 	.word	0x24000014
 8003e70:	24000030 	.word	0x24000030

08003e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e78:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <HAL_IncTick+0x20>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <HAL_IncTick+0x24>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4413      	add	r3, r2
 8003e84:	4a04      	ldr	r2, [pc, #16]	; (8003e98 <HAL_IncTick+0x24>)
 8003e86:	6013      	str	r3, [r2, #0]
}
 8003e88:	bf00      	nop
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	24000034 	.word	0x24000034
 8003e98:	240218a0 	.word	0x240218a0

08003e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8003ea0:	4b03      	ldr	r3, [pc, #12]	; (8003eb0 <HAL_GetTick+0x14>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	240218a0 	.word	0x240218a0

08003eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ebc:	f7ff ffee 	bl	8003e9c <HAL_GetTick>
 8003ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ecc:	d005      	beq.n	8003eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ece:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <HAL_Delay+0x44>)
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003eda:	bf00      	nop
 8003edc:	f7ff ffde 	bl	8003e9c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d8f7      	bhi.n	8003edc <HAL_Delay+0x28>
  {
  }
}
 8003eec:	bf00      	nop
 8003eee:	bf00      	nop
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	24000034 	.word	0x24000034

08003efc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003f00:	4b03      	ldr	r3, [pc, #12]	; (8003f10 <HAL_GetREVID+0x14>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	0c1b      	lsrs	r3, r3, #16
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	5c001000 	.word	0x5c001000

08003f14 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8003f18:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <HAL_EnableCompensationCell+0x1c>)
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	4a04      	ldr	r2, [pc, #16]	; (8003f30 <HAL_EnableCompensationCell+0x1c>)
 8003f1e:	f043 0301 	orr.w	r3, r3, #1
 8003f22:	6213      	str	r3, [r2, #32]
}
 8003f24:	bf00      	nop
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	58000400 	.word	0x58000400

08003f34 <__NVIC_SetPriorityGrouping>:
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f44:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <__NVIC_SetPriorityGrouping+0x40>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f50:	4013      	ands	r3, r2
 8003f52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <__NVIC_SetPriorityGrouping+0x44>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f62:	4a04      	ldr	r2, [pc, #16]	; (8003f74 <__NVIC_SetPriorityGrouping+0x40>)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	60d3      	str	r3, [r2, #12]
}
 8003f68:	bf00      	nop
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	e000ed00 	.word	0xe000ed00
 8003f78:	05fa0000 	.word	0x05fa0000

08003f7c <__NVIC_GetPriorityGrouping>:
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f80:	4b04      	ldr	r3, [pc, #16]	; (8003f94 <__NVIC_GetPriorityGrouping+0x18>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	0a1b      	lsrs	r3, r3, #8
 8003f86:	f003 0307 	and.w	r3, r3, #7
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	e000ed00 	.word	0xe000ed00

08003f98 <__NVIC_EnableIRQ>:
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003fa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	db0b      	blt.n	8003fc2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003faa:	88fb      	ldrh	r3, [r7, #6]
 8003fac:	f003 021f 	and.w	r2, r3, #31
 8003fb0:	4907      	ldr	r1, [pc, #28]	; (8003fd0 <__NVIC_EnableIRQ+0x38>)
 8003fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	2001      	movs	r0, #1
 8003fba:	fa00 f202 	lsl.w	r2, r0, r2
 8003fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	e000e100 	.word	0xe000e100

08003fd4 <__NVIC_SetPriority>:
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	6039      	str	r1, [r7, #0]
 8003fde:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003fe0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	db0a      	blt.n	8003ffe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	490c      	ldr	r1, [pc, #48]	; (8004020 <__NVIC_SetPriority+0x4c>)
 8003fee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ff2:	0112      	lsls	r2, r2, #4
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ffc:	e00a      	b.n	8004014 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	b2da      	uxtb	r2, r3
 8004002:	4908      	ldr	r1, [pc, #32]	; (8004024 <__NVIC_SetPriority+0x50>)
 8004004:	88fb      	ldrh	r3, [r7, #6]
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	3b04      	subs	r3, #4
 800400c:	0112      	lsls	r2, r2, #4
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	440b      	add	r3, r1
 8004012:	761a      	strb	r2, [r3, #24]
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	e000e100 	.word	0xe000e100
 8004024:	e000ed00 	.word	0xe000ed00

08004028 <NVIC_EncodePriority>:
{
 8004028:	b480      	push	{r7}
 800402a:	b089      	sub	sp, #36	; 0x24
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f1c3 0307 	rsb	r3, r3, #7
 8004042:	2b04      	cmp	r3, #4
 8004044:	bf28      	it	cs
 8004046:	2304      	movcs	r3, #4
 8004048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	3304      	adds	r3, #4
 800404e:	2b06      	cmp	r3, #6
 8004050:	d902      	bls.n	8004058 <NVIC_EncodePriority+0x30>
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	3b03      	subs	r3, #3
 8004056:	e000      	b.n	800405a <NVIC_EncodePriority+0x32>
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800405c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43da      	mvns	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	401a      	ands	r2, r3
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004070:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	fa01 f303 	lsl.w	r3, r1, r3
 800407a:	43d9      	mvns	r1, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004080:	4313      	orrs	r3, r2
}
 8004082:	4618      	mov	r0, r3
 8004084:	3724      	adds	r7, #36	; 0x24
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
	...

08004090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3b01      	subs	r3, #1
 800409c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040a0:	d301      	bcc.n	80040a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040a2:	2301      	movs	r3, #1
 80040a4:	e00f      	b.n	80040c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040a6:	4a0a      	ldr	r2, [pc, #40]	; (80040d0 <SysTick_Config+0x40>)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040ae:	210f      	movs	r1, #15
 80040b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040b4:	f7ff ff8e 	bl	8003fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040b8:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <SysTick_Config+0x40>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040be:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <SysTick_Config+0x40>)
 80040c0:	2207      	movs	r2, #7
 80040c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	e000e010 	.word	0xe000e010

080040d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7ff ff29 	bl	8003f34 <__NVIC_SetPriorityGrouping>
}
 80040e2:	bf00      	nop
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b086      	sub	sp, #24
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	4603      	mov	r3, r0
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	607a      	str	r2, [r7, #4]
 80040f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80040f8:	f7ff ff40 	bl	8003f7c <__NVIC_GetPriorityGrouping>
 80040fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	68b9      	ldr	r1, [r7, #8]
 8004102:	6978      	ldr	r0, [r7, #20]
 8004104:	f7ff ff90 	bl	8004028 <NVIC_EncodePriority>
 8004108:	4602      	mov	r2, r0
 800410a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800410e:	4611      	mov	r1, r2
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff ff5f 	bl	8003fd4 <__NVIC_SetPriority>
}
 8004116:	bf00      	nop
 8004118:	3718      	adds	r7, #24
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b082      	sub	sp, #8
 8004122:	af00      	add	r7, sp, #0
 8004124:	4603      	mov	r3, r0
 8004126:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004128:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff ff33 	bl	8003f98 <__NVIC_EnableIRQ>
}
 8004132:	bf00      	nop
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b082      	sub	sp, #8
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7ff ffa4 	bl	8004090 <SysTick_Config>
 8004148:	4603      	mov	r3, r0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
	...

08004154 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004158:	f3bf 8f5f 	dmb	sy
}
 800415c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800415e:	4b07      	ldr	r3, [pc, #28]	; (800417c <HAL_MPU_Disable+0x28>)
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	4a06      	ldr	r2, [pc, #24]	; (800417c <HAL_MPU_Disable+0x28>)
 8004164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004168:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800416a:	4b05      	ldr	r3, [pc, #20]	; (8004180 <HAL_MPU_Disable+0x2c>)
 800416c:	2200      	movs	r2, #0
 800416e:	605a      	str	r2, [r3, #4]
}
 8004170:	bf00      	nop
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	e000ed00 	.word	0xe000ed00
 8004180:	e000ed90 	.word	0xe000ed90

08004184 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800418c:	4a0b      	ldr	r2, [pc, #44]	; (80041bc <HAL_MPU_Enable+0x38>)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f043 0301 	orr.w	r3, r3, #1
 8004194:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004196:	4b0a      	ldr	r3, [pc, #40]	; (80041c0 <HAL_MPU_Enable+0x3c>)
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	4a09      	ldr	r2, [pc, #36]	; (80041c0 <HAL_MPU_Enable+0x3c>)
 800419c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80041a2:	f3bf 8f4f 	dsb	sy
}
 80041a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80041a8:	f3bf 8f6f 	isb	sy
}
 80041ac:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	e000ed90 	.word	0xe000ed90
 80041c0:	e000ed00 	.word	0xe000ed00

080041c4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	785a      	ldrb	r2, [r3, #1]
 80041d0:	4b1d      	ldr	r3, [pc, #116]	; (8004248 <HAL_MPU_ConfigRegion+0x84>)
 80041d2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d029      	beq.n	8004230 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80041dc:	4a1a      	ldr	r2, [pc, #104]	; (8004248 <HAL_MPU_ConfigRegion+0x84>)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	7b1b      	ldrb	r3, [r3, #12]
 80041e8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	7adb      	ldrb	r3, [r3, #11]
 80041ee:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80041f0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	7a9b      	ldrb	r3, [r3, #10]
 80041f6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80041f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	7b5b      	ldrb	r3, [r3, #13]
 80041fe:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004200:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	7b9b      	ldrb	r3, [r3, #14]
 8004206:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004208:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	7bdb      	ldrb	r3, [r3, #15]
 800420e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004210:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	7a5b      	ldrb	r3, [r3, #9]
 8004216:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004218:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	7a1b      	ldrb	r3, [r3, #8]
 800421e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004220:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	7812      	ldrb	r2, [r2, #0]
 8004226:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004228:	4a07      	ldr	r2, [pc, #28]	; (8004248 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800422a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800422c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800422e:	e005      	b.n	800423c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8004230:	4b05      	ldr	r3, [pc, #20]	; (8004248 <HAL_MPU_ConfigRegion+0x84>)
 8004232:	2200      	movs	r2, #0
 8004234:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8004236:	4b04      	ldr	r3, [pc, #16]	; (8004248 <HAL_MPU_ConfigRegion+0x84>)
 8004238:	2200      	movs	r2, #0
 800423a:	611a      	str	r2, [r3, #16]
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	e000ed90 	.word	0xe000ed90

0800424c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004254:	f7ff fe22 	bl	8003e9c <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e2dc      	b.n	800481e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d008      	beq.n	8004282 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2280      	movs	r2, #128	; 0x80
 8004274:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e2cd      	b.n	800481e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a76      	ldr	r2, [pc, #472]	; (8004460 <HAL_DMA_Abort+0x214>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d04a      	beq.n	8004322 <HAL_DMA_Abort+0xd6>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a74      	ldr	r2, [pc, #464]	; (8004464 <HAL_DMA_Abort+0x218>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d045      	beq.n	8004322 <HAL_DMA_Abort+0xd6>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a73      	ldr	r2, [pc, #460]	; (8004468 <HAL_DMA_Abort+0x21c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d040      	beq.n	8004322 <HAL_DMA_Abort+0xd6>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a71      	ldr	r2, [pc, #452]	; (800446c <HAL_DMA_Abort+0x220>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d03b      	beq.n	8004322 <HAL_DMA_Abort+0xd6>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a70      	ldr	r2, [pc, #448]	; (8004470 <HAL_DMA_Abort+0x224>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d036      	beq.n	8004322 <HAL_DMA_Abort+0xd6>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a6e      	ldr	r2, [pc, #440]	; (8004474 <HAL_DMA_Abort+0x228>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d031      	beq.n	8004322 <HAL_DMA_Abort+0xd6>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a6d      	ldr	r2, [pc, #436]	; (8004478 <HAL_DMA_Abort+0x22c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d02c      	beq.n	8004322 <HAL_DMA_Abort+0xd6>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a6b      	ldr	r2, [pc, #428]	; (800447c <HAL_DMA_Abort+0x230>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d027      	beq.n	8004322 <HAL_DMA_Abort+0xd6>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a6a      	ldr	r2, [pc, #424]	; (8004480 <HAL_DMA_Abort+0x234>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d022      	beq.n	8004322 <HAL_DMA_Abort+0xd6>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a68      	ldr	r2, [pc, #416]	; (8004484 <HAL_DMA_Abort+0x238>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d01d      	beq.n	8004322 <HAL_DMA_Abort+0xd6>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a67      	ldr	r2, [pc, #412]	; (8004488 <HAL_DMA_Abort+0x23c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d018      	beq.n	8004322 <HAL_DMA_Abort+0xd6>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a65      	ldr	r2, [pc, #404]	; (800448c <HAL_DMA_Abort+0x240>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d013      	beq.n	8004322 <HAL_DMA_Abort+0xd6>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a64      	ldr	r2, [pc, #400]	; (8004490 <HAL_DMA_Abort+0x244>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d00e      	beq.n	8004322 <HAL_DMA_Abort+0xd6>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a62      	ldr	r2, [pc, #392]	; (8004494 <HAL_DMA_Abort+0x248>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d009      	beq.n	8004322 <HAL_DMA_Abort+0xd6>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a61      	ldr	r2, [pc, #388]	; (8004498 <HAL_DMA_Abort+0x24c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d004      	beq.n	8004322 <HAL_DMA_Abort+0xd6>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a5f      	ldr	r2, [pc, #380]	; (800449c <HAL_DMA_Abort+0x250>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d101      	bne.n	8004326 <HAL_DMA_Abort+0xda>
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <HAL_DMA_Abort+0xdc>
 8004326:	2300      	movs	r3, #0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d013      	beq.n	8004354 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 021e 	bic.w	r2, r2, #30
 800433a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695a      	ldr	r2, [r3, #20]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800434a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	617b      	str	r3, [r7, #20]
 8004352:	e00a      	b.n	800436a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 020e 	bic.w	r2, r2, #14
 8004362:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a3c      	ldr	r2, [pc, #240]	; (8004460 <HAL_DMA_Abort+0x214>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d072      	beq.n	800445a <HAL_DMA_Abort+0x20e>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a3a      	ldr	r2, [pc, #232]	; (8004464 <HAL_DMA_Abort+0x218>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d06d      	beq.n	800445a <HAL_DMA_Abort+0x20e>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a39      	ldr	r2, [pc, #228]	; (8004468 <HAL_DMA_Abort+0x21c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d068      	beq.n	800445a <HAL_DMA_Abort+0x20e>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a37      	ldr	r2, [pc, #220]	; (800446c <HAL_DMA_Abort+0x220>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d063      	beq.n	800445a <HAL_DMA_Abort+0x20e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a36      	ldr	r2, [pc, #216]	; (8004470 <HAL_DMA_Abort+0x224>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d05e      	beq.n	800445a <HAL_DMA_Abort+0x20e>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a34      	ldr	r2, [pc, #208]	; (8004474 <HAL_DMA_Abort+0x228>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d059      	beq.n	800445a <HAL_DMA_Abort+0x20e>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a33      	ldr	r2, [pc, #204]	; (8004478 <HAL_DMA_Abort+0x22c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d054      	beq.n	800445a <HAL_DMA_Abort+0x20e>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a31      	ldr	r2, [pc, #196]	; (800447c <HAL_DMA_Abort+0x230>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d04f      	beq.n	800445a <HAL_DMA_Abort+0x20e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a30      	ldr	r2, [pc, #192]	; (8004480 <HAL_DMA_Abort+0x234>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d04a      	beq.n	800445a <HAL_DMA_Abort+0x20e>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a2e      	ldr	r2, [pc, #184]	; (8004484 <HAL_DMA_Abort+0x238>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d045      	beq.n	800445a <HAL_DMA_Abort+0x20e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a2d      	ldr	r2, [pc, #180]	; (8004488 <HAL_DMA_Abort+0x23c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d040      	beq.n	800445a <HAL_DMA_Abort+0x20e>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a2b      	ldr	r2, [pc, #172]	; (800448c <HAL_DMA_Abort+0x240>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d03b      	beq.n	800445a <HAL_DMA_Abort+0x20e>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a2a      	ldr	r2, [pc, #168]	; (8004490 <HAL_DMA_Abort+0x244>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d036      	beq.n	800445a <HAL_DMA_Abort+0x20e>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a28      	ldr	r2, [pc, #160]	; (8004494 <HAL_DMA_Abort+0x248>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d031      	beq.n	800445a <HAL_DMA_Abort+0x20e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a27      	ldr	r2, [pc, #156]	; (8004498 <HAL_DMA_Abort+0x24c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d02c      	beq.n	800445a <HAL_DMA_Abort+0x20e>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a25      	ldr	r2, [pc, #148]	; (800449c <HAL_DMA_Abort+0x250>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d027      	beq.n	800445a <HAL_DMA_Abort+0x20e>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a24      	ldr	r2, [pc, #144]	; (80044a0 <HAL_DMA_Abort+0x254>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d022      	beq.n	800445a <HAL_DMA_Abort+0x20e>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a22      	ldr	r2, [pc, #136]	; (80044a4 <HAL_DMA_Abort+0x258>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d01d      	beq.n	800445a <HAL_DMA_Abort+0x20e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a21      	ldr	r2, [pc, #132]	; (80044a8 <HAL_DMA_Abort+0x25c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d018      	beq.n	800445a <HAL_DMA_Abort+0x20e>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a1f      	ldr	r2, [pc, #124]	; (80044ac <HAL_DMA_Abort+0x260>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d013      	beq.n	800445a <HAL_DMA_Abort+0x20e>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a1e      	ldr	r2, [pc, #120]	; (80044b0 <HAL_DMA_Abort+0x264>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d00e      	beq.n	800445a <HAL_DMA_Abort+0x20e>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a1c      	ldr	r2, [pc, #112]	; (80044b4 <HAL_DMA_Abort+0x268>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d009      	beq.n	800445a <HAL_DMA_Abort+0x20e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a1b      	ldr	r2, [pc, #108]	; (80044b8 <HAL_DMA_Abort+0x26c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d004      	beq.n	800445a <HAL_DMA_Abort+0x20e>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a19      	ldr	r2, [pc, #100]	; (80044bc <HAL_DMA_Abort+0x270>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d132      	bne.n	80044c0 <HAL_DMA_Abort+0x274>
 800445a:	2301      	movs	r3, #1
 800445c:	e031      	b.n	80044c2 <HAL_DMA_Abort+0x276>
 800445e:	bf00      	nop
 8004460:	40020010 	.word	0x40020010
 8004464:	40020028 	.word	0x40020028
 8004468:	40020040 	.word	0x40020040
 800446c:	40020058 	.word	0x40020058
 8004470:	40020070 	.word	0x40020070
 8004474:	40020088 	.word	0x40020088
 8004478:	400200a0 	.word	0x400200a0
 800447c:	400200b8 	.word	0x400200b8
 8004480:	40020410 	.word	0x40020410
 8004484:	40020428 	.word	0x40020428
 8004488:	40020440 	.word	0x40020440
 800448c:	40020458 	.word	0x40020458
 8004490:	40020470 	.word	0x40020470
 8004494:	40020488 	.word	0x40020488
 8004498:	400204a0 	.word	0x400204a0
 800449c:	400204b8 	.word	0x400204b8
 80044a0:	58025408 	.word	0x58025408
 80044a4:	5802541c 	.word	0x5802541c
 80044a8:	58025430 	.word	0x58025430
 80044ac:	58025444 	.word	0x58025444
 80044b0:	58025458 	.word	0x58025458
 80044b4:	5802546c 	.word	0x5802546c
 80044b8:	58025480 	.word	0x58025480
 80044bc:	58025494 	.word	0x58025494
 80044c0:	2300      	movs	r3, #0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d007      	beq.n	80044d6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a6d      	ldr	r2, [pc, #436]	; (8004690 <HAL_DMA_Abort+0x444>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d04a      	beq.n	8004576 <HAL_DMA_Abort+0x32a>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a6b      	ldr	r2, [pc, #428]	; (8004694 <HAL_DMA_Abort+0x448>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d045      	beq.n	8004576 <HAL_DMA_Abort+0x32a>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a6a      	ldr	r2, [pc, #424]	; (8004698 <HAL_DMA_Abort+0x44c>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d040      	beq.n	8004576 <HAL_DMA_Abort+0x32a>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a68      	ldr	r2, [pc, #416]	; (800469c <HAL_DMA_Abort+0x450>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d03b      	beq.n	8004576 <HAL_DMA_Abort+0x32a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a67      	ldr	r2, [pc, #412]	; (80046a0 <HAL_DMA_Abort+0x454>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d036      	beq.n	8004576 <HAL_DMA_Abort+0x32a>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a65      	ldr	r2, [pc, #404]	; (80046a4 <HAL_DMA_Abort+0x458>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d031      	beq.n	8004576 <HAL_DMA_Abort+0x32a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a64      	ldr	r2, [pc, #400]	; (80046a8 <HAL_DMA_Abort+0x45c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d02c      	beq.n	8004576 <HAL_DMA_Abort+0x32a>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a62      	ldr	r2, [pc, #392]	; (80046ac <HAL_DMA_Abort+0x460>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d027      	beq.n	8004576 <HAL_DMA_Abort+0x32a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a61      	ldr	r2, [pc, #388]	; (80046b0 <HAL_DMA_Abort+0x464>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d022      	beq.n	8004576 <HAL_DMA_Abort+0x32a>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a5f      	ldr	r2, [pc, #380]	; (80046b4 <HAL_DMA_Abort+0x468>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d01d      	beq.n	8004576 <HAL_DMA_Abort+0x32a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a5e      	ldr	r2, [pc, #376]	; (80046b8 <HAL_DMA_Abort+0x46c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d018      	beq.n	8004576 <HAL_DMA_Abort+0x32a>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a5c      	ldr	r2, [pc, #368]	; (80046bc <HAL_DMA_Abort+0x470>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d013      	beq.n	8004576 <HAL_DMA_Abort+0x32a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a5b      	ldr	r2, [pc, #364]	; (80046c0 <HAL_DMA_Abort+0x474>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00e      	beq.n	8004576 <HAL_DMA_Abort+0x32a>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a59      	ldr	r2, [pc, #356]	; (80046c4 <HAL_DMA_Abort+0x478>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d009      	beq.n	8004576 <HAL_DMA_Abort+0x32a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a58      	ldr	r2, [pc, #352]	; (80046c8 <HAL_DMA_Abort+0x47c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d004      	beq.n	8004576 <HAL_DMA_Abort+0x32a>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a56      	ldr	r2, [pc, #344]	; (80046cc <HAL_DMA_Abort+0x480>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d108      	bne.n	8004588 <HAL_DMA_Abort+0x33c>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0201 	bic.w	r2, r2, #1
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	e007      	b.n	8004598 <HAL_DMA_Abort+0x34c>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0201 	bic.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004598:	e013      	b.n	80045c2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800459a:	f7ff fc7f 	bl	8003e9c <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b05      	cmp	r3, #5
 80045a6:	d90c      	bls.n	80045c2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2203      	movs	r2, #3
 80045b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e12d      	b.n	800481e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1e5      	bne.n	800459a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a2f      	ldr	r2, [pc, #188]	; (8004690 <HAL_DMA_Abort+0x444>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d04a      	beq.n	800466e <HAL_DMA_Abort+0x422>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a2d      	ldr	r2, [pc, #180]	; (8004694 <HAL_DMA_Abort+0x448>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d045      	beq.n	800466e <HAL_DMA_Abort+0x422>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a2c      	ldr	r2, [pc, #176]	; (8004698 <HAL_DMA_Abort+0x44c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d040      	beq.n	800466e <HAL_DMA_Abort+0x422>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a2a      	ldr	r2, [pc, #168]	; (800469c <HAL_DMA_Abort+0x450>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d03b      	beq.n	800466e <HAL_DMA_Abort+0x422>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a29      	ldr	r2, [pc, #164]	; (80046a0 <HAL_DMA_Abort+0x454>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d036      	beq.n	800466e <HAL_DMA_Abort+0x422>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a27      	ldr	r2, [pc, #156]	; (80046a4 <HAL_DMA_Abort+0x458>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d031      	beq.n	800466e <HAL_DMA_Abort+0x422>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a26      	ldr	r2, [pc, #152]	; (80046a8 <HAL_DMA_Abort+0x45c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d02c      	beq.n	800466e <HAL_DMA_Abort+0x422>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a24      	ldr	r2, [pc, #144]	; (80046ac <HAL_DMA_Abort+0x460>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d027      	beq.n	800466e <HAL_DMA_Abort+0x422>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a23      	ldr	r2, [pc, #140]	; (80046b0 <HAL_DMA_Abort+0x464>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d022      	beq.n	800466e <HAL_DMA_Abort+0x422>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a21      	ldr	r2, [pc, #132]	; (80046b4 <HAL_DMA_Abort+0x468>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d01d      	beq.n	800466e <HAL_DMA_Abort+0x422>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a20      	ldr	r2, [pc, #128]	; (80046b8 <HAL_DMA_Abort+0x46c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d018      	beq.n	800466e <HAL_DMA_Abort+0x422>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a1e      	ldr	r2, [pc, #120]	; (80046bc <HAL_DMA_Abort+0x470>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d013      	beq.n	800466e <HAL_DMA_Abort+0x422>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a1d      	ldr	r2, [pc, #116]	; (80046c0 <HAL_DMA_Abort+0x474>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d00e      	beq.n	800466e <HAL_DMA_Abort+0x422>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a1b      	ldr	r2, [pc, #108]	; (80046c4 <HAL_DMA_Abort+0x478>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d009      	beq.n	800466e <HAL_DMA_Abort+0x422>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a1a      	ldr	r2, [pc, #104]	; (80046c8 <HAL_DMA_Abort+0x47c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d004      	beq.n	800466e <HAL_DMA_Abort+0x422>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a18      	ldr	r2, [pc, #96]	; (80046cc <HAL_DMA_Abort+0x480>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d101      	bne.n	8004672 <HAL_DMA_Abort+0x426>
 800466e:	2301      	movs	r3, #1
 8004670:	e000      	b.n	8004674 <HAL_DMA_Abort+0x428>
 8004672:	2300      	movs	r3, #0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d02b      	beq.n	80046d0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004682:	f003 031f 	and.w	r3, r3, #31
 8004686:	223f      	movs	r2, #63	; 0x3f
 8004688:	409a      	lsls	r2, r3
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	609a      	str	r2, [r3, #8]
 800468e:	e02a      	b.n	80046e6 <HAL_DMA_Abort+0x49a>
 8004690:	40020010 	.word	0x40020010
 8004694:	40020028 	.word	0x40020028
 8004698:	40020040 	.word	0x40020040
 800469c:	40020058 	.word	0x40020058
 80046a0:	40020070 	.word	0x40020070
 80046a4:	40020088 	.word	0x40020088
 80046a8:	400200a0 	.word	0x400200a0
 80046ac:	400200b8 	.word	0x400200b8
 80046b0:	40020410 	.word	0x40020410
 80046b4:	40020428 	.word	0x40020428
 80046b8:	40020440 	.word	0x40020440
 80046bc:	40020458 	.word	0x40020458
 80046c0:	40020470 	.word	0x40020470
 80046c4:	40020488 	.word	0x40020488
 80046c8:	400204a0 	.word	0x400204a0
 80046cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046da:	f003 031f 	and.w	r3, r3, #31
 80046de:	2201      	movs	r2, #1
 80046e0:	409a      	lsls	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a4f      	ldr	r2, [pc, #316]	; (8004828 <HAL_DMA_Abort+0x5dc>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d072      	beq.n	80047d6 <HAL_DMA_Abort+0x58a>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a4d      	ldr	r2, [pc, #308]	; (800482c <HAL_DMA_Abort+0x5e0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d06d      	beq.n	80047d6 <HAL_DMA_Abort+0x58a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a4c      	ldr	r2, [pc, #304]	; (8004830 <HAL_DMA_Abort+0x5e4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d068      	beq.n	80047d6 <HAL_DMA_Abort+0x58a>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a4a      	ldr	r2, [pc, #296]	; (8004834 <HAL_DMA_Abort+0x5e8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d063      	beq.n	80047d6 <HAL_DMA_Abort+0x58a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a49      	ldr	r2, [pc, #292]	; (8004838 <HAL_DMA_Abort+0x5ec>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d05e      	beq.n	80047d6 <HAL_DMA_Abort+0x58a>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a47      	ldr	r2, [pc, #284]	; (800483c <HAL_DMA_Abort+0x5f0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d059      	beq.n	80047d6 <HAL_DMA_Abort+0x58a>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a46      	ldr	r2, [pc, #280]	; (8004840 <HAL_DMA_Abort+0x5f4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d054      	beq.n	80047d6 <HAL_DMA_Abort+0x58a>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a44      	ldr	r2, [pc, #272]	; (8004844 <HAL_DMA_Abort+0x5f8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d04f      	beq.n	80047d6 <HAL_DMA_Abort+0x58a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a43      	ldr	r2, [pc, #268]	; (8004848 <HAL_DMA_Abort+0x5fc>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d04a      	beq.n	80047d6 <HAL_DMA_Abort+0x58a>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a41      	ldr	r2, [pc, #260]	; (800484c <HAL_DMA_Abort+0x600>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d045      	beq.n	80047d6 <HAL_DMA_Abort+0x58a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a40      	ldr	r2, [pc, #256]	; (8004850 <HAL_DMA_Abort+0x604>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d040      	beq.n	80047d6 <HAL_DMA_Abort+0x58a>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a3e      	ldr	r2, [pc, #248]	; (8004854 <HAL_DMA_Abort+0x608>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d03b      	beq.n	80047d6 <HAL_DMA_Abort+0x58a>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a3d      	ldr	r2, [pc, #244]	; (8004858 <HAL_DMA_Abort+0x60c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d036      	beq.n	80047d6 <HAL_DMA_Abort+0x58a>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a3b      	ldr	r2, [pc, #236]	; (800485c <HAL_DMA_Abort+0x610>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d031      	beq.n	80047d6 <HAL_DMA_Abort+0x58a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a3a      	ldr	r2, [pc, #232]	; (8004860 <HAL_DMA_Abort+0x614>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d02c      	beq.n	80047d6 <HAL_DMA_Abort+0x58a>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a38      	ldr	r2, [pc, #224]	; (8004864 <HAL_DMA_Abort+0x618>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d027      	beq.n	80047d6 <HAL_DMA_Abort+0x58a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a37      	ldr	r2, [pc, #220]	; (8004868 <HAL_DMA_Abort+0x61c>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d022      	beq.n	80047d6 <HAL_DMA_Abort+0x58a>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a35      	ldr	r2, [pc, #212]	; (800486c <HAL_DMA_Abort+0x620>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d01d      	beq.n	80047d6 <HAL_DMA_Abort+0x58a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a34      	ldr	r2, [pc, #208]	; (8004870 <HAL_DMA_Abort+0x624>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d018      	beq.n	80047d6 <HAL_DMA_Abort+0x58a>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a32      	ldr	r2, [pc, #200]	; (8004874 <HAL_DMA_Abort+0x628>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d013      	beq.n	80047d6 <HAL_DMA_Abort+0x58a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a31      	ldr	r2, [pc, #196]	; (8004878 <HAL_DMA_Abort+0x62c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d00e      	beq.n	80047d6 <HAL_DMA_Abort+0x58a>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a2f      	ldr	r2, [pc, #188]	; (800487c <HAL_DMA_Abort+0x630>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d009      	beq.n	80047d6 <HAL_DMA_Abort+0x58a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a2e      	ldr	r2, [pc, #184]	; (8004880 <HAL_DMA_Abort+0x634>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d004      	beq.n	80047d6 <HAL_DMA_Abort+0x58a>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a2c      	ldr	r2, [pc, #176]	; (8004884 <HAL_DMA_Abort+0x638>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d101      	bne.n	80047da <HAL_DMA_Abort+0x58e>
 80047d6:	2301      	movs	r3, #1
 80047d8:	e000      	b.n	80047dc <HAL_DMA_Abort+0x590>
 80047da:	2300      	movs	r3, #0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d015      	beq.n	800480c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80047e8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00c      	beq.n	800480c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004800:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800480a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40020010 	.word	0x40020010
 800482c:	40020028 	.word	0x40020028
 8004830:	40020040 	.word	0x40020040
 8004834:	40020058 	.word	0x40020058
 8004838:	40020070 	.word	0x40020070
 800483c:	40020088 	.word	0x40020088
 8004840:	400200a0 	.word	0x400200a0
 8004844:	400200b8 	.word	0x400200b8
 8004848:	40020410 	.word	0x40020410
 800484c:	40020428 	.word	0x40020428
 8004850:	40020440 	.word	0x40020440
 8004854:	40020458 	.word	0x40020458
 8004858:	40020470 	.word	0x40020470
 800485c:	40020488 	.word	0x40020488
 8004860:	400204a0 	.word	0x400204a0
 8004864:	400204b8 	.word	0x400204b8
 8004868:	58025408 	.word	0x58025408
 800486c:	5802541c 	.word	0x5802541c
 8004870:	58025430 	.word	0x58025430
 8004874:	58025444 	.word	0x58025444
 8004878:	58025458 	.word	0x58025458
 800487c:	5802546c 	.word	0x5802546c
 8004880:	58025480 	.word	0x58025480
 8004884:	58025494 	.word	0x58025494

08004888 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e237      	b.n	8004d0a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d004      	beq.n	80048b0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2280      	movs	r2, #128	; 0x80
 80048aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e22c      	b.n	8004d0a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a5c      	ldr	r2, [pc, #368]	; (8004a28 <HAL_DMA_Abort_IT+0x1a0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d04a      	beq.n	8004950 <HAL_DMA_Abort_IT+0xc8>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a5b      	ldr	r2, [pc, #364]	; (8004a2c <HAL_DMA_Abort_IT+0x1a4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d045      	beq.n	8004950 <HAL_DMA_Abort_IT+0xc8>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a59      	ldr	r2, [pc, #356]	; (8004a30 <HAL_DMA_Abort_IT+0x1a8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d040      	beq.n	8004950 <HAL_DMA_Abort_IT+0xc8>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a58      	ldr	r2, [pc, #352]	; (8004a34 <HAL_DMA_Abort_IT+0x1ac>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d03b      	beq.n	8004950 <HAL_DMA_Abort_IT+0xc8>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a56      	ldr	r2, [pc, #344]	; (8004a38 <HAL_DMA_Abort_IT+0x1b0>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d036      	beq.n	8004950 <HAL_DMA_Abort_IT+0xc8>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a55      	ldr	r2, [pc, #340]	; (8004a3c <HAL_DMA_Abort_IT+0x1b4>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d031      	beq.n	8004950 <HAL_DMA_Abort_IT+0xc8>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a53      	ldr	r2, [pc, #332]	; (8004a40 <HAL_DMA_Abort_IT+0x1b8>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d02c      	beq.n	8004950 <HAL_DMA_Abort_IT+0xc8>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a52      	ldr	r2, [pc, #328]	; (8004a44 <HAL_DMA_Abort_IT+0x1bc>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d027      	beq.n	8004950 <HAL_DMA_Abort_IT+0xc8>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a50      	ldr	r2, [pc, #320]	; (8004a48 <HAL_DMA_Abort_IT+0x1c0>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d022      	beq.n	8004950 <HAL_DMA_Abort_IT+0xc8>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a4f      	ldr	r2, [pc, #316]	; (8004a4c <HAL_DMA_Abort_IT+0x1c4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d01d      	beq.n	8004950 <HAL_DMA_Abort_IT+0xc8>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a4d      	ldr	r2, [pc, #308]	; (8004a50 <HAL_DMA_Abort_IT+0x1c8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d018      	beq.n	8004950 <HAL_DMA_Abort_IT+0xc8>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a4c      	ldr	r2, [pc, #304]	; (8004a54 <HAL_DMA_Abort_IT+0x1cc>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d013      	beq.n	8004950 <HAL_DMA_Abort_IT+0xc8>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a4a      	ldr	r2, [pc, #296]	; (8004a58 <HAL_DMA_Abort_IT+0x1d0>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d00e      	beq.n	8004950 <HAL_DMA_Abort_IT+0xc8>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a49      	ldr	r2, [pc, #292]	; (8004a5c <HAL_DMA_Abort_IT+0x1d4>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d009      	beq.n	8004950 <HAL_DMA_Abort_IT+0xc8>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a47      	ldr	r2, [pc, #284]	; (8004a60 <HAL_DMA_Abort_IT+0x1d8>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d004      	beq.n	8004950 <HAL_DMA_Abort_IT+0xc8>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a46      	ldr	r2, [pc, #280]	; (8004a64 <HAL_DMA_Abort_IT+0x1dc>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d101      	bne.n	8004954 <HAL_DMA_Abort_IT+0xcc>
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <HAL_DMA_Abort_IT+0xce>
 8004954:	2300      	movs	r3, #0
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 8086 	beq.w	8004a68 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2204      	movs	r2, #4
 8004960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a2f      	ldr	r2, [pc, #188]	; (8004a28 <HAL_DMA_Abort_IT+0x1a0>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d04a      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x17c>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a2e      	ldr	r2, [pc, #184]	; (8004a2c <HAL_DMA_Abort_IT+0x1a4>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d045      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x17c>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a2c      	ldr	r2, [pc, #176]	; (8004a30 <HAL_DMA_Abort_IT+0x1a8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d040      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x17c>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a2b      	ldr	r2, [pc, #172]	; (8004a34 <HAL_DMA_Abort_IT+0x1ac>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d03b      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x17c>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a29      	ldr	r2, [pc, #164]	; (8004a38 <HAL_DMA_Abort_IT+0x1b0>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d036      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x17c>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a28      	ldr	r2, [pc, #160]	; (8004a3c <HAL_DMA_Abort_IT+0x1b4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d031      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x17c>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a26      	ldr	r2, [pc, #152]	; (8004a40 <HAL_DMA_Abort_IT+0x1b8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d02c      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x17c>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a25      	ldr	r2, [pc, #148]	; (8004a44 <HAL_DMA_Abort_IT+0x1bc>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d027      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x17c>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a23      	ldr	r2, [pc, #140]	; (8004a48 <HAL_DMA_Abort_IT+0x1c0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d022      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x17c>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a22      	ldr	r2, [pc, #136]	; (8004a4c <HAL_DMA_Abort_IT+0x1c4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d01d      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x17c>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a20      	ldr	r2, [pc, #128]	; (8004a50 <HAL_DMA_Abort_IT+0x1c8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d018      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x17c>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a1f      	ldr	r2, [pc, #124]	; (8004a54 <HAL_DMA_Abort_IT+0x1cc>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d013      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x17c>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a1d      	ldr	r2, [pc, #116]	; (8004a58 <HAL_DMA_Abort_IT+0x1d0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00e      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x17c>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a1c      	ldr	r2, [pc, #112]	; (8004a5c <HAL_DMA_Abort_IT+0x1d4>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d009      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x17c>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a1a      	ldr	r2, [pc, #104]	; (8004a60 <HAL_DMA_Abort_IT+0x1d8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d004      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x17c>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a19      	ldr	r2, [pc, #100]	; (8004a64 <HAL_DMA_Abort_IT+0x1dc>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d108      	bne.n	8004a16 <HAL_DMA_Abort_IT+0x18e>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0201 	bic.w	r2, r2, #1
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	e178      	b.n	8004d08 <HAL_DMA_Abort_IT+0x480>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0201 	bic.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	e16f      	b.n	8004d08 <HAL_DMA_Abort_IT+0x480>
 8004a28:	40020010 	.word	0x40020010
 8004a2c:	40020028 	.word	0x40020028
 8004a30:	40020040 	.word	0x40020040
 8004a34:	40020058 	.word	0x40020058
 8004a38:	40020070 	.word	0x40020070
 8004a3c:	40020088 	.word	0x40020088
 8004a40:	400200a0 	.word	0x400200a0
 8004a44:	400200b8 	.word	0x400200b8
 8004a48:	40020410 	.word	0x40020410
 8004a4c:	40020428 	.word	0x40020428
 8004a50:	40020440 	.word	0x40020440
 8004a54:	40020458 	.word	0x40020458
 8004a58:	40020470 	.word	0x40020470
 8004a5c:	40020488 	.word	0x40020488
 8004a60:	400204a0 	.word	0x400204a0
 8004a64:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 020e 	bic.w	r2, r2, #14
 8004a76:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a6c      	ldr	r2, [pc, #432]	; (8004c30 <HAL_DMA_Abort_IT+0x3a8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d04a      	beq.n	8004b18 <HAL_DMA_Abort_IT+0x290>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a6b      	ldr	r2, [pc, #428]	; (8004c34 <HAL_DMA_Abort_IT+0x3ac>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d045      	beq.n	8004b18 <HAL_DMA_Abort_IT+0x290>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a69      	ldr	r2, [pc, #420]	; (8004c38 <HAL_DMA_Abort_IT+0x3b0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d040      	beq.n	8004b18 <HAL_DMA_Abort_IT+0x290>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a68      	ldr	r2, [pc, #416]	; (8004c3c <HAL_DMA_Abort_IT+0x3b4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d03b      	beq.n	8004b18 <HAL_DMA_Abort_IT+0x290>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a66      	ldr	r2, [pc, #408]	; (8004c40 <HAL_DMA_Abort_IT+0x3b8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d036      	beq.n	8004b18 <HAL_DMA_Abort_IT+0x290>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a65      	ldr	r2, [pc, #404]	; (8004c44 <HAL_DMA_Abort_IT+0x3bc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d031      	beq.n	8004b18 <HAL_DMA_Abort_IT+0x290>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a63      	ldr	r2, [pc, #396]	; (8004c48 <HAL_DMA_Abort_IT+0x3c0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d02c      	beq.n	8004b18 <HAL_DMA_Abort_IT+0x290>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a62      	ldr	r2, [pc, #392]	; (8004c4c <HAL_DMA_Abort_IT+0x3c4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d027      	beq.n	8004b18 <HAL_DMA_Abort_IT+0x290>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a60      	ldr	r2, [pc, #384]	; (8004c50 <HAL_DMA_Abort_IT+0x3c8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d022      	beq.n	8004b18 <HAL_DMA_Abort_IT+0x290>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a5f      	ldr	r2, [pc, #380]	; (8004c54 <HAL_DMA_Abort_IT+0x3cc>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d01d      	beq.n	8004b18 <HAL_DMA_Abort_IT+0x290>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a5d      	ldr	r2, [pc, #372]	; (8004c58 <HAL_DMA_Abort_IT+0x3d0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d018      	beq.n	8004b18 <HAL_DMA_Abort_IT+0x290>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a5c      	ldr	r2, [pc, #368]	; (8004c5c <HAL_DMA_Abort_IT+0x3d4>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d013      	beq.n	8004b18 <HAL_DMA_Abort_IT+0x290>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a5a      	ldr	r2, [pc, #360]	; (8004c60 <HAL_DMA_Abort_IT+0x3d8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d00e      	beq.n	8004b18 <HAL_DMA_Abort_IT+0x290>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a59      	ldr	r2, [pc, #356]	; (8004c64 <HAL_DMA_Abort_IT+0x3dc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d009      	beq.n	8004b18 <HAL_DMA_Abort_IT+0x290>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a57      	ldr	r2, [pc, #348]	; (8004c68 <HAL_DMA_Abort_IT+0x3e0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d004      	beq.n	8004b18 <HAL_DMA_Abort_IT+0x290>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a56      	ldr	r2, [pc, #344]	; (8004c6c <HAL_DMA_Abort_IT+0x3e4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d108      	bne.n	8004b2a <HAL_DMA_Abort_IT+0x2a2>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0201 	bic.w	r2, r2, #1
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	e007      	b.n	8004b3a <HAL_DMA_Abort_IT+0x2b2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0201 	bic.w	r2, r2, #1
 8004b38:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a3c      	ldr	r2, [pc, #240]	; (8004c30 <HAL_DMA_Abort_IT+0x3a8>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d072      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x3a2>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a3a      	ldr	r2, [pc, #232]	; (8004c34 <HAL_DMA_Abort_IT+0x3ac>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d06d      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x3a2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a39      	ldr	r2, [pc, #228]	; (8004c38 <HAL_DMA_Abort_IT+0x3b0>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d068      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x3a2>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a37      	ldr	r2, [pc, #220]	; (8004c3c <HAL_DMA_Abort_IT+0x3b4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d063      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x3a2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a36      	ldr	r2, [pc, #216]	; (8004c40 <HAL_DMA_Abort_IT+0x3b8>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d05e      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x3a2>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a34      	ldr	r2, [pc, #208]	; (8004c44 <HAL_DMA_Abort_IT+0x3bc>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d059      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x3a2>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a33      	ldr	r2, [pc, #204]	; (8004c48 <HAL_DMA_Abort_IT+0x3c0>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d054      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x3a2>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a31      	ldr	r2, [pc, #196]	; (8004c4c <HAL_DMA_Abort_IT+0x3c4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d04f      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x3a2>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a30      	ldr	r2, [pc, #192]	; (8004c50 <HAL_DMA_Abort_IT+0x3c8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d04a      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x3a2>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a2e      	ldr	r2, [pc, #184]	; (8004c54 <HAL_DMA_Abort_IT+0x3cc>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d045      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x3a2>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a2d      	ldr	r2, [pc, #180]	; (8004c58 <HAL_DMA_Abort_IT+0x3d0>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d040      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x3a2>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a2b      	ldr	r2, [pc, #172]	; (8004c5c <HAL_DMA_Abort_IT+0x3d4>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d03b      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x3a2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a2a      	ldr	r2, [pc, #168]	; (8004c60 <HAL_DMA_Abort_IT+0x3d8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d036      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x3a2>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a28      	ldr	r2, [pc, #160]	; (8004c64 <HAL_DMA_Abort_IT+0x3dc>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d031      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x3a2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a27      	ldr	r2, [pc, #156]	; (8004c68 <HAL_DMA_Abort_IT+0x3e0>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d02c      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x3a2>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a25      	ldr	r2, [pc, #148]	; (8004c6c <HAL_DMA_Abort_IT+0x3e4>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d027      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x3a2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a24      	ldr	r2, [pc, #144]	; (8004c70 <HAL_DMA_Abort_IT+0x3e8>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d022      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x3a2>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a22      	ldr	r2, [pc, #136]	; (8004c74 <HAL_DMA_Abort_IT+0x3ec>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d01d      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x3a2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a21      	ldr	r2, [pc, #132]	; (8004c78 <HAL_DMA_Abort_IT+0x3f0>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d018      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x3a2>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a1f      	ldr	r2, [pc, #124]	; (8004c7c <HAL_DMA_Abort_IT+0x3f4>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d013      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x3a2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a1e      	ldr	r2, [pc, #120]	; (8004c80 <HAL_DMA_Abort_IT+0x3f8>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d00e      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x3a2>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a1c      	ldr	r2, [pc, #112]	; (8004c84 <HAL_DMA_Abort_IT+0x3fc>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d009      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x3a2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a1b      	ldr	r2, [pc, #108]	; (8004c88 <HAL_DMA_Abort_IT+0x400>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d004      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x3a2>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a19      	ldr	r2, [pc, #100]	; (8004c8c <HAL_DMA_Abort_IT+0x404>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d132      	bne.n	8004c90 <HAL_DMA_Abort_IT+0x408>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e031      	b.n	8004c92 <HAL_DMA_Abort_IT+0x40a>
 8004c2e:	bf00      	nop
 8004c30:	40020010 	.word	0x40020010
 8004c34:	40020028 	.word	0x40020028
 8004c38:	40020040 	.word	0x40020040
 8004c3c:	40020058 	.word	0x40020058
 8004c40:	40020070 	.word	0x40020070
 8004c44:	40020088 	.word	0x40020088
 8004c48:	400200a0 	.word	0x400200a0
 8004c4c:	400200b8 	.word	0x400200b8
 8004c50:	40020410 	.word	0x40020410
 8004c54:	40020428 	.word	0x40020428
 8004c58:	40020440 	.word	0x40020440
 8004c5c:	40020458 	.word	0x40020458
 8004c60:	40020470 	.word	0x40020470
 8004c64:	40020488 	.word	0x40020488
 8004c68:	400204a0 	.word	0x400204a0
 8004c6c:	400204b8 	.word	0x400204b8
 8004c70:	58025408 	.word	0x58025408
 8004c74:	5802541c 	.word	0x5802541c
 8004c78:	58025430 	.word	0x58025430
 8004c7c:	58025444 	.word	0x58025444
 8004c80:	58025458 	.word	0x58025458
 8004c84:	5802546c 	.word	0x5802546c
 8004c88:	58025480 	.word	0x58025480
 8004c8c:	58025494 	.word	0x58025494
 8004c90:	2300      	movs	r3, #0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d028      	beq.n	8004ce8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ca4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004caa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb0:	f003 031f 	and.w	r3, r3, #31
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	409a      	lsls	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004cc4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00c      	beq.n	8004ce8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cdc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004ce6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d003      	beq.n	8004d08 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop

08004d14 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08a      	sub	sp, #40	; 0x28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d20:	4b67      	ldr	r3, [pc, #412]	; (8004ec0 <HAL_DMA_IRQHandler+0x1ac>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a67      	ldr	r2, [pc, #412]	; (8004ec4 <HAL_DMA_IRQHandler+0x1b0>)
 8004d26:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2a:	0a9b      	lsrs	r3, r3, #10
 8004d2c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d32:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d38:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a5f      	ldr	r2, [pc, #380]	; (8004ec8 <HAL_DMA_IRQHandler+0x1b4>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d04a      	beq.n	8004de6 <HAL_DMA_IRQHandler+0xd2>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a5d      	ldr	r2, [pc, #372]	; (8004ecc <HAL_DMA_IRQHandler+0x1b8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d045      	beq.n	8004de6 <HAL_DMA_IRQHandler+0xd2>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a5c      	ldr	r2, [pc, #368]	; (8004ed0 <HAL_DMA_IRQHandler+0x1bc>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d040      	beq.n	8004de6 <HAL_DMA_IRQHandler+0xd2>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a5a      	ldr	r2, [pc, #360]	; (8004ed4 <HAL_DMA_IRQHandler+0x1c0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d03b      	beq.n	8004de6 <HAL_DMA_IRQHandler+0xd2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a59      	ldr	r2, [pc, #356]	; (8004ed8 <HAL_DMA_IRQHandler+0x1c4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d036      	beq.n	8004de6 <HAL_DMA_IRQHandler+0xd2>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a57      	ldr	r2, [pc, #348]	; (8004edc <HAL_DMA_IRQHandler+0x1c8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d031      	beq.n	8004de6 <HAL_DMA_IRQHandler+0xd2>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a56      	ldr	r2, [pc, #344]	; (8004ee0 <HAL_DMA_IRQHandler+0x1cc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d02c      	beq.n	8004de6 <HAL_DMA_IRQHandler+0xd2>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a54      	ldr	r2, [pc, #336]	; (8004ee4 <HAL_DMA_IRQHandler+0x1d0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d027      	beq.n	8004de6 <HAL_DMA_IRQHandler+0xd2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a53      	ldr	r2, [pc, #332]	; (8004ee8 <HAL_DMA_IRQHandler+0x1d4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d022      	beq.n	8004de6 <HAL_DMA_IRQHandler+0xd2>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a51      	ldr	r2, [pc, #324]	; (8004eec <HAL_DMA_IRQHandler+0x1d8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d01d      	beq.n	8004de6 <HAL_DMA_IRQHandler+0xd2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a50      	ldr	r2, [pc, #320]	; (8004ef0 <HAL_DMA_IRQHandler+0x1dc>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d018      	beq.n	8004de6 <HAL_DMA_IRQHandler+0xd2>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a4e      	ldr	r2, [pc, #312]	; (8004ef4 <HAL_DMA_IRQHandler+0x1e0>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d013      	beq.n	8004de6 <HAL_DMA_IRQHandler+0xd2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a4d      	ldr	r2, [pc, #308]	; (8004ef8 <HAL_DMA_IRQHandler+0x1e4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d00e      	beq.n	8004de6 <HAL_DMA_IRQHandler+0xd2>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a4b      	ldr	r2, [pc, #300]	; (8004efc <HAL_DMA_IRQHandler+0x1e8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d009      	beq.n	8004de6 <HAL_DMA_IRQHandler+0xd2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a4a      	ldr	r2, [pc, #296]	; (8004f00 <HAL_DMA_IRQHandler+0x1ec>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d004      	beq.n	8004de6 <HAL_DMA_IRQHandler+0xd2>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a48      	ldr	r2, [pc, #288]	; (8004f04 <HAL_DMA_IRQHandler+0x1f0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d101      	bne.n	8004dea <HAL_DMA_IRQHandler+0xd6>
 8004de6:	2301      	movs	r3, #1
 8004de8:	e000      	b.n	8004dec <HAL_DMA_IRQHandler+0xd8>
 8004dea:	2300      	movs	r3, #0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 842b 	beq.w	8005648 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df6:	f003 031f 	and.w	r3, r3, #31
 8004dfa:	2208      	movs	r2, #8
 8004dfc:	409a      	lsls	r2, r3
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	4013      	ands	r3, r2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 80a2 	beq.w	8004f4c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a2e      	ldr	r2, [pc, #184]	; (8004ec8 <HAL_DMA_IRQHandler+0x1b4>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d04a      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x194>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a2d      	ldr	r2, [pc, #180]	; (8004ecc <HAL_DMA_IRQHandler+0x1b8>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d045      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x194>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a2b      	ldr	r2, [pc, #172]	; (8004ed0 <HAL_DMA_IRQHandler+0x1bc>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d040      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x194>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a2a      	ldr	r2, [pc, #168]	; (8004ed4 <HAL_DMA_IRQHandler+0x1c0>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d03b      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x194>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a28      	ldr	r2, [pc, #160]	; (8004ed8 <HAL_DMA_IRQHandler+0x1c4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d036      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x194>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a27      	ldr	r2, [pc, #156]	; (8004edc <HAL_DMA_IRQHandler+0x1c8>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d031      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x194>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a25      	ldr	r2, [pc, #148]	; (8004ee0 <HAL_DMA_IRQHandler+0x1cc>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d02c      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x194>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a24      	ldr	r2, [pc, #144]	; (8004ee4 <HAL_DMA_IRQHandler+0x1d0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d027      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x194>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a22      	ldr	r2, [pc, #136]	; (8004ee8 <HAL_DMA_IRQHandler+0x1d4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d022      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x194>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a21      	ldr	r2, [pc, #132]	; (8004eec <HAL_DMA_IRQHandler+0x1d8>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d01d      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x194>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a1f      	ldr	r2, [pc, #124]	; (8004ef0 <HAL_DMA_IRQHandler+0x1dc>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d018      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x194>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a1e      	ldr	r2, [pc, #120]	; (8004ef4 <HAL_DMA_IRQHandler+0x1e0>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d013      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x194>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a1c      	ldr	r2, [pc, #112]	; (8004ef8 <HAL_DMA_IRQHandler+0x1e4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00e      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x194>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a1b      	ldr	r2, [pc, #108]	; (8004efc <HAL_DMA_IRQHandler+0x1e8>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d009      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x194>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a19      	ldr	r2, [pc, #100]	; (8004f00 <HAL_DMA_IRQHandler+0x1ec>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d004      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x194>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a18      	ldr	r2, [pc, #96]	; (8004f04 <HAL_DMA_IRQHandler+0x1f0>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d12f      	bne.n	8004f08 <HAL_DMA_IRQHandler+0x1f4>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0304 	and.w	r3, r3, #4
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	bf14      	ite	ne
 8004eb6:	2301      	movne	r3, #1
 8004eb8:	2300      	moveq	r3, #0
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	e02e      	b.n	8004f1c <HAL_DMA_IRQHandler+0x208>
 8004ebe:	bf00      	nop
 8004ec0:	24000014 	.word	0x24000014
 8004ec4:	1b4e81b5 	.word	0x1b4e81b5
 8004ec8:	40020010 	.word	0x40020010
 8004ecc:	40020028 	.word	0x40020028
 8004ed0:	40020040 	.word	0x40020040
 8004ed4:	40020058 	.word	0x40020058
 8004ed8:	40020070 	.word	0x40020070
 8004edc:	40020088 	.word	0x40020088
 8004ee0:	400200a0 	.word	0x400200a0
 8004ee4:	400200b8 	.word	0x400200b8
 8004ee8:	40020410 	.word	0x40020410
 8004eec:	40020428 	.word	0x40020428
 8004ef0:	40020440 	.word	0x40020440
 8004ef4:	40020458 	.word	0x40020458
 8004ef8:	40020470 	.word	0x40020470
 8004efc:	40020488 	.word	0x40020488
 8004f00:	400204a0 	.word	0x400204a0
 8004f04:	400204b8 	.word	0x400204b8
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	bf14      	ite	ne
 8004f16:	2301      	movne	r3, #1
 8004f18:	2300      	moveq	r3, #0
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d015      	beq.n	8004f4c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 0204 	bic.w	r2, r2, #4
 8004f2e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f34:	f003 031f 	and.w	r3, r3, #31
 8004f38:	2208      	movs	r2, #8
 8004f3a:	409a      	lsls	r2, r3
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f44:	f043 0201 	orr.w	r2, r3, #1
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f50:	f003 031f 	and.w	r3, r3, #31
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	fa22 f303 	lsr.w	r3, r2, r3
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d06e      	beq.n	8005040 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a69      	ldr	r2, [pc, #420]	; (800510c <HAL_DMA_IRQHandler+0x3f8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d04a      	beq.n	8005002 <HAL_DMA_IRQHandler+0x2ee>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a67      	ldr	r2, [pc, #412]	; (8005110 <HAL_DMA_IRQHandler+0x3fc>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d045      	beq.n	8005002 <HAL_DMA_IRQHandler+0x2ee>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a66      	ldr	r2, [pc, #408]	; (8005114 <HAL_DMA_IRQHandler+0x400>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d040      	beq.n	8005002 <HAL_DMA_IRQHandler+0x2ee>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a64      	ldr	r2, [pc, #400]	; (8005118 <HAL_DMA_IRQHandler+0x404>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d03b      	beq.n	8005002 <HAL_DMA_IRQHandler+0x2ee>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a63      	ldr	r2, [pc, #396]	; (800511c <HAL_DMA_IRQHandler+0x408>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d036      	beq.n	8005002 <HAL_DMA_IRQHandler+0x2ee>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a61      	ldr	r2, [pc, #388]	; (8005120 <HAL_DMA_IRQHandler+0x40c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d031      	beq.n	8005002 <HAL_DMA_IRQHandler+0x2ee>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a60      	ldr	r2, [pc, #384]	; (8005124 <HAL_DMA_IRQHandler+0x410>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d02c      	beq.n	8005002 <HAL_DMA_IRQHandler+0x2ee>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a5e      	ldr	r2, [pc, #376]	; (8005128 <HAL_DMA_IRQHandler+0x414>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d027      	beq.n	8005002 <HAL_DMA_IRQHandler+0x2ee>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a5d      	ldr	r2, [pc, #372]	; (800512c <HAL_DMA_IRQHandler+0x418>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d022      	beq.n	8005002 <HAL_DMA_IRQHandler+0x2ee>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a5b      	ldr	r2, [pc, #364]	; (8005130 <HAL_DMA_IRQHandler+0x41c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d01d      	beq.n	8005002 <HAL_DMA_IRQHandler+0x2ee>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a5a      	ldr	r2, [pc, #360]	; (8005134 <HAL_DMA_IRQHandler+0x420>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d018      	beq.n	8005002 <HAL_DMA_IRQHandler+0x2ee>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a58      	ldr	r2, [pc, #352]	; (8005138 <HAL_DMA_IRQHandler+0x424>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d013      	beq.n	8005002 <HAL_DMA_IRQHandler+0x2ee>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a57      	ldr	r2, [pc, #348]	; (800513c <HAL_DMA_IRQHandler+0x428>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00e      	beq.n	8005002 <HAL_DMA_IRQHandler+0x2ee>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a55      	ldr	r2, [pc, #340]	; (8005140 <HAL_DMA_IRQHandler+0x42c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d009      	beq.n	8005002 <HAL_DMA_IRQHandler+0x2ee>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a54      	ldr	r2, [pc, #336]	; (8005144 <HAL_DMA_IRQHandler+0x430>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d004      	beq.n	8005002 <HAL_DMA_IRQHandler+0x2ee>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a52      	ldr	r2, [pc, #328]	; (8005148 <HAL_DMA_IRQHandler+0x434>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d10a      	bne.n	8005018 <HAL_DMA_IRQHandler+0x304>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500c:	2b00      	cmp	r3, #0
 800500e:	bf14      	ite	ne
 8005010:	2301      	movne	r3, #1
 8005012:	2300      	moveq	r3, #0
 8005014:	b2db      	uxtb	r3, r3
 8005016:	e003      	b.n	8005020 <HAL_DMA_IRQHandler+0x30c>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2300      	movs	r3, #0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00d      	beq.n	8005040 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005028:	f003 031f 	and.w	r3, r3, #31
 800502c:	2201      	movs	r2, #1
 800502e:	409a      	lsls	r2, r3
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005038:	f043 0202 	orr.w	r2, r3, #2
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005044:	f003 031f 	and.w	r3, r3, #31
 8005048:	2204      	movs	r2, #4
 800504a:	409a      	lsls	r2, r3
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	4013      	ands	r3, r2
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 808f 	beq.w	8005174 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a2c      	ldr	r2, [pc, #176]	; (800510c <HAL_DMA_IRQHandler+0x3f8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d04a      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x3e2>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a2a      	ldr	r2, [pc, #168]	; (8005110 <HAL_DMA_IRQHandler+0x3fc>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d045      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x3e2>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a29      	ldr	r2, [pc, #164]	; (8005114 <HAL_DMA_IRQHandler+0x400>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d040      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x3e2>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a27      	ldr	r2, [pc, #156]	; (8005118 <HAL_DMA_IRQHandler+0x404>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d03b      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x3e2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a26      	ldr	r2, [pc, #152]	; (800511c <HAL_DMA_IRQHandler+0x408>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d036      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x3e2>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a24      	ldr	r2, [pc, #144]	; (8005120 <HAL_DMA_IRQHandler+0x40c>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d031      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x3e2>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a23      	ldr	r2, [pc, #140]	; (8005124 <HAL_DMA_IRQHandler+0x410>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d02c      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x3e2>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a21      	ldr	r2, [pc, #132]	; (8005128 <HAL_DMA_IRQHandler+0x414>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d027      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x3e2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a20      	ldr	r2, [pc, #128]	; (800512c <HAL_DMA_IRQHandler+0x418>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d022      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x3e2>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a1e      	ldr	r2, [pc, #120]	; (8005130 <HAL_DMA_IRQHandler+0x41c>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d01d      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x3e2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a1d      	ldr	r2, [pc, #116]	; (8005134 <HAL_DMA_IRQHandler+0x420>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d018      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x3e2>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a1b      	ldr	r2, [pc, #108]	; (8005138 <HAL_DMA_IRQHandler+0x424>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d013      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x3e2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a1a      	ldr	r2, [pc, #104]	; (800513c <HAL_DMA_IRQHandler+0x428>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d00e      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x3e2>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a18      	ldr	r2, [pc, #96]	; (8005140 <HAL_DMA_IRQHandler+0x42c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d009      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x3e2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a17      	ldr	r2, [pc, #92]	; (8005144 <HAL_DMA_IRQHandler+0x430>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d004      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x3e2>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a15      	ldr	r2, [pc, #84]	; (8005148 <HAL_DMA_IRQHandler+0x434>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d12a      	bne.n	800514c <HAL_DMA_IRQHandler+0x438>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	bf14      	ite	ne
 8005104:	2301      	movne	r3, #1
 8005106:	2300      	moveq	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	e023      	b.n	8005154 <HAL_DMA_IRQHandler+0x440>
 800510c:	40020010 	.word	0x40020010
 8005110:	40020028 	.word	0x40020028
 8005114:	40020040 	.word	0x40020040
 8005118:	40020058 	.word	0x40020058
 800511c:	40020070 	.word	0x40020070
 8005120:	40020088 	.word	0x40020088
 8005124:	400200a0 	.word	0x400200a0
 8005128:	400200b8 	.word	0x400200b8
 800512c:	40020410 	.word	0x40020410
 8005130:	40020428 	.word	0x40020428
 8005134:	40020440 	.word	0x40020440
 8005138:	40020458 	.word	0x40020458
 800513c:	40020470 	.word	0x40020470
 8005140:	40020488 	.word	0x40020488
 8005144:	400204a0 	.word	0x400204a0
 8005148:	400204b8 	.word	0x400204b8
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2300      	movs	r3, #0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00d      	beq.n	8005174 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800515c:	f003 031f 	and.w	r3, r3, #31
 8005160:	2204      	movs	r2, #4
 8005162:	409a      	lsls	r2, r3
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516c:	f043 0204 	orr.w	r2, r3, #4
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005178:	f003 031f 	and.w	r3, r3, #31
 800517c:	2210      	movs	r2, #16
 800517e:	409a      	lsls	r2, r3
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	4013      	ands	r3, r2
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 80a6 	beq.w	80052d6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a85      	ldr	r2, [pc, #532]	; (80053a4 <HAL_DMA_IRQHandler+0x690>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d04a      	beq.n	800522a <HAL_DMA_IRQHandler+0x516>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a83      	ldr	r2, [pc, #524]	; (80053a8 <HAL_DMA_IRQHandler+0x694>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d045      	beq.n	800522a <HAL_DMA_IRQHandler+0x516>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a82      	ldr	r2, [pc, #520]	; (80053ac <HAL_DMA_IRQHandler+0x698>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d040      	beq.n	800522a <HAL_DMA_IRQHandler+0x516>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a80      	ldr	r2, [pc, #512]	; (80053b0 <HAL_DMA_IRQHandler+0x69c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d03b      	beq.n	800522a <HAL_DMA_IRQHandler+0x516>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a7f      	ldr	r2, [pc, #508]	; (80053b4 <HAL_DMA_IRQHandler+0x6a0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d036      	beq.n	800522a <HAL_DMA_IRQHandler+0x516>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a7d      	ldr	r2, [pc, #500]	; (80053b8 <HAL_DMA_IRQHandler+0x6a4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d031      	beq.n	800522a <HAL_DMA_IRQHandler+0x516>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a7c      	ldr	r2, [pc, #496]	; (80053bc <HAL_DMA_IRQHandler+0x6a8>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d02c      	beq.n	800522a <HAL_DMA_IRQHandler+0x516>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a7a      	ldr	r2, [pc, #488]	; (80053c0 <HAL_DMA_IRQHandler+0x6ac>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d027      	beq.n	800522a <HAL_DMA_IRQHandler+0x516>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a79      	ldr	r2, [pc, #484]	; (80053c4 <HAL_DMA_IRQHandler+0x6b0>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d022      	beq.n	800522a <HAL_DMA_IRQHandler+0x516>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a77      	ldr	r2, [pc, #476]	; (80053c8 <HAL_DMA_IRQHandler+0x6b4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d01d      	beq.n	800522a <HAL_DMA_IRQHandler+0x516>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a76      	ldr	r2, [pc, #472]	; (80053cc <HAL_DMA_IRQHandler+0x6b8>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d018      	beq.n	800522a <HAL_DMA_IRQHandler+0x516>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a74      	ldr	r2, [pc, #464]	; (80053d0 <HAL_DMA_IRQHandler+0x6bc>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d013      	beq.n	800522a <HAL_DMA_IRQHandler+0x516>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a73      	ldr	r2, [pc, #460]	; (80053d4 <HAL_DMA_IRQHandler+0x6c0>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d00e      	beq.n	800522a <HAL_DMA_IRQHandler+0x516>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a71      	ldr	r2, [pc, #452]	; (80053d8 <HAL_DMA_IRQHandler+0x6c4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d009      	beq.n	800522a <HAL_DMA_IRQHandler+0x516>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a70      	ldr	r2, [pc, #448]	; (80053dc <HAL_DMA_IRQHandler+0x6c8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d004      	beq.n	800522a <HAL_DMA_IRQHandler+0x516>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a6e      	ldr	r2, [pc, #440]	; (80053e0 <HAL_DMA_IRQHandler+0x6cc>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d10a      	bne.n	8005240 <HAL_DMA_IRQHandler+0x52c>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0308 	and.w	r3, r3, #8
 8005234:	2b00      	cmp	r3, #0
 8005236:	bf14      	ite	ne
 8005238:	2301      	movne	r3, #1
 800523a:	2300      	moveq	r3, #0
 800523c:	b2db      	uxtb	r3, r3
 800523e:	e009      	b.n	8005254 <HAL_DMA_IRQHandler+0x540>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0304 	and.w	r3, r3, #4
 800524a:	2b00      	cmp	r3, #0
 800524c:	bf14      	ite	ne
 800524e:	2301      	movne	r3, #1
 8005250:	2300      	moveq	r3, #0
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	d03e      	beq.n	80052d6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800525c:	f003 031f 	and.w	r3, r3, #31
 8005260:	2210      	movs	r2, #16
 8005262:	409a      	lsls	r2, r3
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d018      	beq.n	80052a8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d108      	bne.n	8005296 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005288:	2b00      	cmp	r3, #0
 800528a:	d024      	beq.n	80052d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	4798      	blx	r3
 8005294:	e01f      	b.n	80052d6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800529a:	2b00      	cmp	r3, #0
 800529c:	d01b      	beq.n	80052d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	4798      	blx	r3
 80052a6:	e016      	b.n	80052d6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d107      	bne.n	80052c6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0208 	bic.w	r2, r2, #8
 80052c4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052da:	f003 031f 	and.w	r3, r3, #31
 80052de:	2220      	movs	r2, #32
 80052e0:	409a      	lsls	r2, r3
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	4013      	ands	r3, r2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 8110 	beq.w	800550c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a2c      	ldr	r2, [pc, #176]	; (80053a4 <HAL_DMA_IRQHandler+0x690>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d04a      	beq.n	800538c <HAL_DMA_IRQHandler+0x678>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a2b      	ldr	r2, [pc, #172]	; (80053a8 <HAL_DMA_IRQHandler+0x694>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d045      	beq.n	800538c <HAL_DMA_IRQHandler+0x678>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a29      	ldr	r2, [pc, #164]	; (80053ac <HAL_DMA_IRQHandler+0x698>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d040      	beq.n	800538c <HAL_DMA_IRQHandler+0x678>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a28      	ldr	r2, [pc, #160]	; (80053b0 <HAL_DMA_IRQHandler+0x69c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d03b      	beq.n	800538c <HAL_DMA_IRQHandler+0x678>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a26      	ldr	r2, [pc, #152]	; (80053b4 <HAL_DMA_IRQHandler+0x6a0>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d036      	beq.n	800538c <HAL_DMA_IRQHandler+0x678>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a25      	ldr	r2, [pc, #148]	; (80053b8 <HAL_DMA_IRQHandler+0x6a4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d031      	beq.n	800538c <HAL_DMA_IRQHandler+0x678>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a23      	ldr	r2, [pc, #140]	; (80053bc <HAL_DMA_IRQHandler+0x6a8>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d02c      	beq.n	800538c <HAL_DMA_IRQHandler+0x678>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a22      	ldr	r2, [pc, #136]	; (80053c0 <HAL_DMA_IRQHandler+0x6ac>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d027      	beq.n	800538c <HAL_DMA_IRQHandler+0x678>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a20      	ldr	r2, [pc, #128]	; (80053c4 <HAL_DMA_IRQHandler+0x6b0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d022      	beq.n	800538c <HAL_DMA_IRQHandler+0x678>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a1f      	ldr	r2, [pc, #124]	; (80053c8 <HAL_DMA_IRQHandler+0x6b4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d01d      	beq.n	800538c <HAL_DMA_IRQHandler+0x678>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a1d      	ldr	r2, [pc, #116]	; (80053cc <HAL_DMA_IRQHandler+0x6b8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d018      	beq.n	800538c <HAL_DMA_IRQHandler+0x678>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a1c      	ldr	r2, [pc, #112]	; (80053d0 <HAL_DMA_IRQHandler+0x6bc>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d013      	beq.n	800538c <HAL_DMA_IRQHandler+0x678>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a1a      	ldr	r2, [pc, #104]	; (80053d4 <HAL_DMA_IRQHandler+0x6c0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d00e      	beq.n	800538c <HAL_DMA_IRQHandler+0x678>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a19      	ldr	r2, [pc, #100]	; (80053d8 <HAL_DMA_IRQHandler+0x6c4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d009      	beq.n	800538c <HAL_DMA_IRQHandler+0x678>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a17      	ldr	r2, [pc, #92]	; (80053dc <HAL_DMA_IRQHandler+0x6c8>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d004      	beq.n	800538c <HAL_DMA_IRQHandler+0x678>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a16      	ldr	r2, [pc, #88]	; (80053e0 <HAL_DMA_IRQHandler+0x6cc>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d12b      	bne.n	80053e4 <HAL_DMA_IRQHandler+0x6d0>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0310 	and.w	r3, r3, #16
 8005396:	2b00      	cmp	r3, #0
 8005398:	bf14      	ite	ne
 800539a:	2301      	movne	r3, #1
 800539c:	2300      	moveq	r3, #0
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	e02a      	b.n	80053f8 <HAL_DMA_IRQHandler+0x6e4>
 80053a2:	bf00      	nop
 80053a4:	40020010 	.word	0x40020010
 80053a8:	40020028 	.word	0x40020028
 80053ac:	40020040 	.word	0x40020040
 80053b0:	40020058 	.word	0x40020058
 80053b4:	40020070 	.word	0x40020070
 80053b8:	40020088 	.word	0x40020088
 80053bc:	400200a0 	.word	0x400200a0
 80053c0:	400200b8 	.word	0x400200b8
 80053c4:	40020410 	.word	0x40020410
 80053c8:	40020428 	.word	0x40020428
 80053cc:	40020440 	.word	0x40020440
 80053d0:	40020458 	.word	0x40020458
 80053d4:	40020470 	.word	0x40020470
 80053d8:	40020488 	.word	0x40020488
 80053dc:	400204a0 	.word	0x400204a0
 80053e0:	400204b8 	.word	0x400204b8
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	bf14      	ite	ne
 80053f2:	2301      	movne	r3, #1
 80053f4:	2300      	moveq	r3, #0
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 8087 	beq.w	800550c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005402:	f003 031f 	and.w	r3, r3, #31
 8005406:	2220      	movs	r2, #32
 8005408:	409a      	lsls	r2, r3
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b04      	cmp	r3, #4
 8005418:	d139      	bne.n	800548e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0216 	bic.w	r2, r2, #22
 8005428:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695a      	ldr	r2, [r3, #20]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005438:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	d103      	bne.n	800544a <HAL_DMA_IRQHandler+0x736>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005446:	2b00      	cmp	r3, #0
 8005448:	d007      	beq.n	800545a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0208 	bic.w	r2, r2, #8
 8005458:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800545e:	f003 031f 	and.w	r3, r3, #31
 8005462:	223f      	movs	r2, #63	; 0x3f
 8005464:	409a      	lsls	r2, r3
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 834a 	beq.w	8005b18 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	4798      	blx	r3
          }
          return;
 800548c:	e344      	b.n	8005b18 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d018      	beq.n	80054ce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d108      	bne.n	80054bc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d02c      	beq.n	800550c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	4798      	blx	r3
 80054ba:	e027      	b.n	800550c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d023      	beq.n	800550c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	4798      	blx	r3
 80054cc:	e01e      	b.n	800550c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10f      	bne.n	80054fc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0210 	bic.w	r2, r2, #16
 80054ea:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 8306 	beq.w	8005b22 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 8088 	beq.w	8005634 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2204      	movs	r2, #4
 8005528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a7a      	ldr	r2, [pc, #488]	; (800571c <HAL_DMA_IRQHandler+0xa08>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d04a      	beq.n	80055cc <HAL_DMA_IRQHandler+0x8b8>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a79      	ldr	r2, [pc, #484]	; (8005720 <HAL_DMA_IRQHandler+0xa0c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d045      	beq.n	80055cc <HAL_DMA_IRQHandler+0x8b8>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a77      	ldr	r2, [pc, #476]	; (8005724 <HAL_DMA_IRQHandler+0xa10>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d040      	beq.n	80055cc <HAL_DMA_IRQHandler+0x8b8>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a76      	ldr	r2, [pc, #472]	; (8005728 <HAL_DMA_IRQHandler+0xa14>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d03b      	beq.n	80055cc <HAL_DMA_IRQHandler+0x8b8>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a74      	ldr	r2, [pc, #464]	; (800572c <HAL_DMA_IRQHandler+0xa18>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d036      	beq.n	80055cc <HAL_DMA_IRQHandler+0x8b8>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a73      	ldr	r2, [pc, #460]	; (8005730 <HAL_DMA_IRQHandler+0xa1c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d031      	beq.n	80055cc <HAL_DMA_IRQHandler+0x8b8>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a71      	ldr	r2, [pc, #452]	; (8005734 <HAL_DMA_IRQHandler+0xa20>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d02c      	beq.n	80055cc <HAL_DMA_IRQHandler+0x8b8>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a70      	ldr	r2, [pc, #448]	; (8005738 <HAL_DMA_IRQHandler+0xa24>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d027      	beq.n	80055cc <HAL_DMA_IRQHandler+0x8b8>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a6e      	ldr	r2, [pc, #440]	; (800573c <HAL_DMA_IRQHandler+0xa28>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d022      	beq.n	80055cc <HAL_DMA_IRQHandler+0x8b8>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a6d      	ldr	r2, [pc, #436]	; (8005740 <HAL_DMA_IRQHandler+0xa2c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d01d      	beq.n	80055cc <HAL_DMA_IRQHandler+0x8b8>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a6b      	ldr	r2, [pc, #428]	; (8005744 <HAL_DMA_IRQHandler+0xa30>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d018      	beq.n	80055cc <HAL_DMA_IRQHandler+0x8b8>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a6a      	ldr	r2, [pc, #424]	; (8005748 <HAL_DMA_IRQHandler+0xa34>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d013      	beq.n	80055cc <HAL_DMA_IRQHandler+0x8b8>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a68      	ldr	r2, [pc, #416]	; (800574c <HAL_DMA_IRQHandler+0xa38>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00e      	beq.n	80055cc <HAL_DMA_IRQHandler+0x8b8>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a67      	ldr	r2, [pc, #412]	; (8005750 <HAL_DMA_IRQHandler+0xa3c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d009      	beq.n	80055cc <HAL_DMA_IRQHandler+0x8b8>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a65      	ldr	r2, [pc, #404]	; (8005754 <HAL_DMA_IRQHandler+0xa40>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d004      	beq.n	80055cc <HAL_DMA_IRQHandler+0x8b8>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a64      	ldr	r2, [pc, #400]	; (8005758 <HAL_DMA_IRQHandler+0xa44>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d108      	bne.n	80055de <HAL_DMA_IRQHandler+0x8ca>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0201 	bic.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	e007      	b.n	80055ee <HAL_DMA_IRQHandler+0x8da>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0201 	bic.w	r2, r2, #1
 80055ec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	3301      	adds	r3, #1
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d307      	bcc.n	800560a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1f2      	bne.n	80055ee <HAL_DMA_IRQHandler+0x8da>
 8005608:	e000      	b.n	800560c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800560a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d004      	beq.n	8005624 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2203      	movs	r2, #3
 800561e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005622:	e003      	b.n	800562c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 8272 	beq.w	8005b22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	4798      	blx	r3
 8005646:	e26c      	b.n	8005b22 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a43      	ldr	r2, [pc, #268]	; (800575c <HAL_DMA_IRQHandler+0xa48>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d022      	beq.n	8005698 <HAL_DMA_IRQHandler+0x984>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a42      	ldr	r2, [pc, #264]	; (8005760 <HAL_DMA_IRQHandler+0xa4c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d01d      	beq.n	8005698 <HAL_DMA_IRQHandler+0x984>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a40      	ldr	r2, [pc, #256]	; (8005764 <HAL_DMA_IRQHandler+0xa50>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d018      	beq.n	8005698 <HAL_DMA_IRQHandler+0x984>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a3f      	ldr	r2, [pc, #252]	; (8005768 <HAL_DMA_IRQHandler+0xa54>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d013      	beq.n	8005698 <HAL_DMA_IRQHandler+0x984>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a3d      	ldr	r2, [pc, #244]	; (800576c <HAL_DMA_IRQHandler+0xa58>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00e      	beq.n	8005698 <HAL_DMA_IRQHandler+0x984>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a3c      	ldr	r2, [pc, #240]	; (8005770 <HAL_DMA_IRQHandler+0xa5c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d009      	beq.n	8005698 <HAL_DMA_IRQHandler+0x984>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a3a      	ldr	r2, [pc, #232]	; (8005774 <HAL_DMA_IRQHandler+0xa60>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d004      	beq.n	8005698 <HAL_DMA_IRQHandler+0x984>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a39      	ldr	r2, [pc, #228]	; (8005778 <HAL_DMA_IRQHandler+0xa64>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d101      	bne.n	800569c <HAL_DMA_IRQHandler+0x988>
 8005698:	2301      	movs	r3, #1
 800569a:	e000      	b.n	800569e <HAL_DMA_IRQHandler+0x98a>
 800569c:	2300      	movs	r3, #0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 823f 	beq.w	8005b22 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b0:	f003 031f 	and.w	r3, r3, #31
 80056b4:	2204      	movs	r2, #4
 80056b6:	409a      	lsls	r2, r3
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	4013      	ands	r3, r2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 80cd 	beq.w	800585c <HAL_DMA_IRQHandler+0xb48>
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 80c7 	beq.w	800585c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d2:	f003 031f 	and.w	r3, r3, #31
 80056d6:	2204      	movs	r2, #4
 80056d8:	409a      	lsls	r2, r3
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d049      	beq.n	800577c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d109      	bne.n	8005706 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 8210 	beq.w	8005b1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005704:	e20a      	b.n	8005b1c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	2b00      	cmp	r3, #0
 800570c:	f000 8206 	beq.w	8005b1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005718:	e200      	b.n	8005b1c <HAL_DMA_IRQHandler+0xe08>
 800571a:	bf00      	nop
 800571c:	40020010 	.word	0x40020010
 8005720:	40020028 	.word	0x40020028
 8005724:	40020040 	.word	0x40020040
 8005728:	40020058 	.word	0x40020058
 800572c:	40020070 	.word	0x40020070
 8005730:	40020088 	.word	0x40020088
 8005734:	400200a0 	.word	0x400200a0
 8005738:	400200b8 	.word	0x400200b8
 800573c:	40020410 	.word	0x40020410
 8005740:	40020428 	.word	0x40020428
 8005744:	40020440 	.word	0x40020440
 8005748:	40020458 	.word	0x40020458
 800574c:	40020470 	.word	0x40020470
 8005750:	40020488 	.word	0x40020488
 8005754:	400204a0 	.word	0x400204a0
 8005758:	400204b8 	.word	0x400204b8
 800575c:	58025408 	.word	0x58025408
 8005760:	5802541c 	.word	0x5802541c
 8005764:	58025430 	.word	0x58025430
 8005768:	58025444 	.word	0x58025444
 800576c:	58025458 	.word	0x58025458
 8005770:	5802546c 	.word	0x5802546c
 8005774:	58025480 	.word	0x58025480
 8005778:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f003 0320 	and.w	r3, r3, #32
 8005782:	2b00      	cmp	r3, #0
 8005784:	d160      	bne.n	8005848 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a7f      	ldr	r2, [pc, #508]	; (8005988 <HAL_DMA_IRQHandler+0xc74>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d04a      	beq.n	8005826 <HAL_DMA_IRQHandler+0xb12>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a7d      	ldr	r2, [pc, #500]	; (800598c <HAL_DMA_IRQHandler+0xc78>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d045      	beq.n	8005826 <HAL_DMA_IRQHandler+0xb12>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a7c      	ldr	r2, [pc, #496]	; (8005990 <HAL_DMA_IRQHandler+0xc7c>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d040      	beq.n	8005826 <HAL_DMA_IRQHandler+0xb12>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a7a      	ldr	r2, [pc, #488]	; (8005994 <HAL_DMA_IRQHandler+0xc80>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d03b      	beq.n	8005826 <HAL_DMA_IRQHandler+0xb12>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a79      	ldr	r2, [pc, #484]	; (8005998 <HAL_DMA_IRQHandler+0xc84>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d036      	beq.n	8005826 <HAL_DMA_IRQHandler+0xb12>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a77      	ldr	r2, [pc, #476]	; (800599c <HAL_DMA_IRQHandler+0xc88>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d031      	beq.n	8005826 <HAL_DMA_IRQHandler+0xb12>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a76      	ldr	r2, [pc, #472]	; (80059a0 <HAL_DMA_IRQHandler+0xc8c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d02c      	beq.n	8005826 <HAL_DMA_IRQHandler+0xb12>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a74      	ldr	r2, [pc, #464]	; (80059a4 <HAL_DMA_IRQHandler+0xc90>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d027      	beq.n	8005826 <HAL_DMA_IRQHandler+0xb12>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a73      	ldr	r2, [pc, #460]	; (80059a8 <HAL_DMA_IRQHandler+0xc94>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d022      	beq.n	8005826 <HAL_DMA_IRQHandler+0xb12>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a71      	ldr	r2, [pc, #452]	; (80059ac <HAL_DMA_IRQHandler+0xc98>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d01d      	beq.n	8005826 <HAL_DMA_IRQHandler+0xb12>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a70      	ldr	r2, [pc, #448]	; (80059b0 <HAL_DMA_IRQHandler+0xc9c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d018      	beq.n	8005826 <HAL_DMA_IRQHandler+0xb12>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a6e      	ldr	r2, [pc, #440]	; (80059b4 <HAL_DMA_IRQHandler+0xca0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d013      	beq.n	8005826 <HAL_DMA_IRQHandler+0xb12>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a6d      	ldr	r2, [pc, #436]	; (80059b8 <HAL_DMA_IRQHandler+0xca4>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d00e      	beq.n	8005826 <HAL_DMA_IRQHandler+0xb12>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a6b      	ldr	r2, [pc, #428]	; (80059bc <HAL_DMA_IRQHandler+0xca8>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d009      	beq.n	8005826 <HAL_DMA_IRQHandler+0xb12>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a6a      	ldr	r2, [pc, #424]	; (80059c0 <HAL_DMA_IRQHandler+0xcac>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d004      	beq.n	8005826 <HAL_DMA_IRQHandler+0xb12>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a68      	ldr	r2, [pc, #416]	; (80059c4 <HAL_DMA_IRQHandler+0xcb0>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d108      	bne.n	8005838 <HAL_DMA_IRQHandler+0xb24>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0208 	bic.w	r2, r2, #8
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	e007      	b.n	8005848 <HAL_DMA_IRQHandler+0xb34>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0204 	bic.w	r2, r2, #4
 8005846:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 8165 	beq.w	8005b1c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800585a:	e15f      	b.n	8005b1c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005860:	f003 031f 	and.w	r3, r3, #31
 8005864:	2202      	movs	r2, #2
 8005866:	409a      	lsls	r2, r3
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	4013      	ands	r3, r2
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 80c5 	beq.w	80059fc <HAL_DMA_IRQHandler+0xce8>
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 80bf 	beq.w	80059fc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005882:	f003 031f 	and.w	r3, r3, #31
 8005886:	2202      	movs	r2, #2
 8005888:	409a      	lsls	r2, r3
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d018      	beq.n	80058ca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d109      	bne.n	80058b6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 813a 	beq.w	8005b20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058b4:	e134      	b.n	8005b20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 8130 	beq.w	8005b20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058c8:	e12a      	b.n	8005b20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	f003 0320 	and.w	r3, r3, #32
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f040 8089 	bne.w	80059e8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a2b      	ldr	r2, [pc, #172]	; (8005988 <HAL_DMA_IRQHandler+0xc74>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d04a      	beq.n	8005976 <HAL_DMA_IRQHandler+0xc62>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a29      	ldr	r2, [pc, #164]	; (800598c <HAL_DMA_IRQHandler+0xc78>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d045      	beq.n	8005976 <HAL_DMA_IRQHandler+0xc62>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a28      	ldr	r2, [pc, #160]	; (8005990 <HAL_DMA_IRQHandler+0xc7c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d040      	beq.n	8005976 <HAL_DMA_IRQHandler+0xc62>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a26      	ldr	r2, [pc, #152]	; (8005994 <HAL_DMA_IRQHandler+0xc80>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d03b      	beq.n	8005976 <HAL_DMA_IRQHandler+0xc62>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a25      	ldr	r2, [pc, #148]	; (8005998 <HAL_DMA_IRQHandler+0xc84>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d036      	beq.n	8005976 <HAL_DMA_IRQHandler+0xc62>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a23      	ldr	r2, [pc, #140]	; (800599c <HAL_DMA_IRQHandler+0xc88>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d031      	beq.n	8005976 <HAL_DMA_IRQHandler+0xc62>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a22      	ldr	r2, [pc, #136]	; (80059a0 <HAL_DMA_IRQHandler+0xc8c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d02c      	beq.n	8005976 <HAL_DMA_IRQHandler+0xc62>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a20      	ldr	r2, [pc, #128]	; (80059a4 <HAL_DMA_IRQHandler+0xc90>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d027      	beq.n	8005976 <HAL_DMA_IRQHandler+0xc62>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a1f      	ldr	r2, [pc, #124]	; (80059a8 <HAL_DMA_IRQHandler+0xc94>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d022      	beq.n	8005976 <HAL_DMA_IRQHandler+0xc62>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1d      	ldr	r2, [pc, #116]	; (80059ac <HAL_DMA_IRQHandler+0xc98>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d01d      	beq.n	8005976 <HAL_DMA_IRQHandler+0xc62>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a1c      	ldr	r2, [pc, #112]	; (80059b0 <HAL_DMA_IRQHandler+0xc9c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d018      	beq.n	8005976 <HAL_DMA_IRQHandler+0xc62>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a1a      	ldr	r2, [pc, #104]	; (80059b4 <HAL_DMA_IRQHandler+0xca0>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d013      	beq.n	8005976 <HAL_DMA_IRQHandler+0xc62>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a19      	ldr	r2, [pc, #100]	; (80059b8 <HAL_DMA_IRQHandler+0xca4>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d00e      	beq.n	8005976 <HAL_DMA_IRQHandler+0xc62>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a17      	ldr	r2, [pc, #92]	; (80059bc <HAL_DMA_IRQHandler+0xca8>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d009      	beq.n	8005976 <HAL_DMA_IRQHandler+0xc62>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a16      	ldr	r2, [pc, #88]	; (80059c0 <HAL_DMA_IRQHandler+0xcac>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d004      	beq.n	8005976 <HAL_DMA_IRQHandler+0xc62>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a14      	ldr	r2, [pc, #80]	; (80059c4 <HAL_DMA_IRQHandler+0xcb0>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d128      	bne.n	80059c8 <HAL_DMA_IRQHandler+0xcb4>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f022 0214 	bic.w	r2, r2, #20
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	e027      	b.n	80059d8 <HAL_DMA_IRQHandler+0xcc4>
 8005988:	40020010 	.word	0x40020010
 800598c:	40020028 	.word	0x40020028
 8005990:	40020040 	.word	0x40020040
 8005994:	40020058 	.word	0x40020058
 8005998:	40020070 	.word	0x40020070
 800599c:	40020088 	.word	0x40020088
 80059a0:	400200a0 	.word	0x400200a0
 80059a4:	400200b8 	.word	0x400200b8
 80059a8:	40020410 	.word	0x40020410
 80059ac:	40020428 	.word	0x40020428
 80059b0:	40020440 	.word	0x40020440
 80059b4:	40020458 	.word	0x40020458
 80059b8:	40020470 	.word	0x40020470
 80059bc:	40020488 	.word	0x40020488
 80059c0:	400204a0 	.word	0x400204a0
 80059c4:	400204b8 	.word	0x400204b8
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 020a 	bic.w	r2, r2, #10
 80059d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 8097 	beq.w	8005b20 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059fa:	e091      	b.n	8005b20 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a00:	f003 031f 	and.w	r3, r3, #31
 8005a04:	2208      	movs	r2, #8
 8005a06:	409a      	lsls	r2, r3
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 8088 	beq.w	8005b22 <HAL_DMA_IRQHandler+0xe0e>
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f003 0308 	and.w	r3, r3, #8
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 8082 	beq.w	8005b22 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a41      	ldr	r2, [pc, #260]	; (8005b28 <HAL_DMA_IRQHandler+0xe14>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d04a      	beq.n	8005abe <HAL_DMA_IRQHandler+0xdaa>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a3f      	ldr	r2, [pc, #252]	; (8005b2c <HAL_DMA_IRQHandler+0xe18>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d045      	beq.n	8005abe <HAL_DMA_IRQHandler+0xdaa>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a3e      	ldr	r2, [pc, #248]	; (8005b30 <HAL_DMA_IRQHandler+0xe1c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d040      	beq.n	8005abe <HAL_DMA_IRQHandler+0xdaa>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a3c      	ldr	r2, [pc, #240]	; (8005b34 <HAL_DMA_IRQHandler+0xe20>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d03b      	beq.n	8005abe <HAL_DMA_IRQHandler+0xdaa>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a3b      	ldr	r2, [pc, #236]	; (8005b38 <HAL_DMA_IRQHandler+0xe24>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d036      	beq.n	8005abe <HAL_DMA_IRQHandler+0xdaa>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a39      	ldr	r2, [pc, #228]	; (8005b3c <HAL_DMA_IRQHandler+0xe28>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d031      	beq.n	8005abe <HAL_DMA_IRQHandler+0xdaa>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a38      	ldr	r2, [pc, #224]	; (8005b40 <HAL_DMA_IRQHandler+0xe2c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d02c      	beq.n	8005abe <HAL_DMA_IRQHandler+0xdaa>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a36      	ldr	r2, [pc, #216]	; (8005b44 <HAL_DMA_IRQHandler+0xe30>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d027      	beq.n	8005abe <HAL_DMA_IRQHandler+0xdaa>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a35      	ldr	r2, [pc, #212]	; (8005b48 <HAL_DMA_IRQHandler+0xe34>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d022      	beq.n	8005abe <HAL_DMA_IRQHandler+0xdaa>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a33      	ldr	r2, [pc, #204]	; (8005b4c <HAL_DMA_IRQHandler+0xe38>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d01d      	beq.n	8005abe <HAL_DMA_IRQHandler+0xdaa>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a32      	ldr	r2, [pc, #200]	; (8005b50 <HAL_DMA_IRQHandler+0xe3c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d018      	beq.n	8005abe <HAL_DMA_IRQHandler+0xdaa>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a30      	ldr	r2, [pc, #192]	; (8005b54 <HAL_DMA_IRQHandler+0xe40>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d013      	beq.n	8005abe <HAL_DMA_IRQHandler+0xdaa>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a2f      	ldr	r2, [pc, #188]	; (8005b58 <HAL_DMA_IRQHandler+0xe44>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d00e      	beq.n	8005abe <HAL_DMA_IRQHandler+0xdaa>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a2d      	ldr	r2, [pc, #180]	; (8005b5c <HAL_DMA_IRQHandler+0xe48>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d009      	beq.n	8005abe <HAL_DMA_IRQHandler+0xdaa>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a2c      	ldr	r2, [pc, #176]	; (8005b60 <HAL_DMA_IRQHandler+0xe4c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d004      	beq.n	8005abe <HAL_DMA_IRQHandler+0xdaa>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a2a      	ldr	r2, [pc, #168]	; (8005b64 <HAL_DMA_IRQHandler+0xe50>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d108      	bne.n	8005ad0 <HAL_DMA_IRQHandler+0xdbc>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 021c 	bic.w	r2, r2, #28
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	e007      	b.n	8005ae0 <HAL_DMA_IRQHandler+0xdcc>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 020e 	bic.w	r2, r2, #14
 8005ade:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae4:	f003 031f 	and.w	r3, r3, #31
 8005ae8:	2201      	movs	r2, #1
 8005aea:	409a      	lsls	r2, r3
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d009      	beq.n	8005b22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	4798      	blx	r3
 8005b16:	e004      	b.n	8005b22 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005b18:	bf00      	nop
 8005b1a:	e002      	b.n	8005b22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b1c:	bf00      	nop
 8005b1e:	e000      	b.n	8005b22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b20:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005b22:	3728      	adds	r7, #40	; 0x28
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	40020010 	.word	0x40020010
 8005b2c:	40020028 	.word	0x40020028
 8005b30:	40020040 	.word	0x40020040
 8005b34:	40020058 	.word	0x40020058
 8005b38:	40020070 	.word	0x40020070
 8005b3c:	40020088 	.word	0x40020088
 8005b40:	400200a0 	.word	0x400200a0
 8005b44:	400200b8 	.word	0x400200b8
 8005b48:	40020410 	.word	0x40020410
 8005b4c:	40020428 	.word	0x40020428
 8005b50:	40020440 	.word	0x40020440
 8005b54:	40020458 	.word	0x40020458
 8005b58:	40020470 	.word	0x40020470
 8005b5c:	40020488 	.word	0x40020488
 8005b60:	400204a0 	.word	0x400204a0
 8005b64:	400204b8 	.word	0x400204b8

08005b68 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e04f      	b.n	8005c1a <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f84e 	bl	8005c30 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	4b20      	ldr	r3, [pc, #128]	; (8005c24 <HAL_DMA2D_Init+0xbc>)
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	6851      	ldr	r1, [r2, #4]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	69d2      	ldr	r2, [r2, #28]
 8005bae:	4311      	orrs	r1, r2
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	6812      	ldr	r2, [r2, #0]
 8005bb4:	430b      	orrs	r3, r1
 8005bb6:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bbe:	4b1a      	ldr	r3, [pc, #104]	; (8005c28 <HAL_DMA2D_Init+0xc0>)
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	6891      	ldr	r1, [r2, #8]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	6992      	ldr	r2, [r2, #24]
 8005bca:	4311      	orrs	r1, r2
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6812      	ldr	r2, [r2, #0]
 8005bd0:	430b      	orrs	r3, r1
 8005bd2:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bda:	4b14      	ldr	r3, [pc, #80]	; (8005c2c <HAL_DMA2D_Init+0xc4>)
 8005bdc:	4013      	ands	r3, r2
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	68d1      	ldr	r1, [r2, #12]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	6812      	ldr	r2, [r2, #0]
 8005be6:	430b      	orrs	r3, r1
 8005be8:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	051a      	lsls	r2, r3, #20
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	055b      	lsls	r3, r3, #21
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	fff8ffbf 	.word	0xfff8ffbf
 8005c28:	fffffef8 	.word	0xfffffef8
 8005c2c:	ffff0000 	.word	0xffff0000

08005c30 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af02      	add	r7, sp, #8
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
 8005c50:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d101      	bne.n	8005c60 <HAL_DMA2D_Start+0x1c>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e018      	b.n	8005c92 <HAL_DMA2D_Start+0x4e>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	68b9      	ldr	r1, [r7, #8]
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f000 f9a4 	bl	8005fc8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0201 	orr.w	r2, r2, #1
 8005c8e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b086      	sub	sp, #24
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d056      	beq.n	8005d64 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cb6:	f7fe f8f1 	bl	8003e9c <HAL_GetTick>
 8005cba:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005cbc:	e04b      	b.n	8005d56 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d023      	beq.n	8005d18 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d005      	beq.n	8005ce6 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cde:	f043 0202 	orr.w	r2, r3, #2
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d005      	beq.n	8005cfc <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cf4:	f043 0201 	orr.w	r2, r3, #1
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2221      	movs	r2, #33	; 0x21
 8005d02:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2204      	movs	r2, #4
 8005d08:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e0a5      	b.n	8005e64 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d1e:	d01a      	beq.n	8005d56 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d20:	f7fe f8bc 	bl	8003e9c <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d302      	bcc.n	8005d36 <HAL_DMA2D_PollForTransfer+0x9c>
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10f      	bne.n	8005d56 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d3a:	f043 0220 	orr.w	r2, r3, #32
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2203      	movs	r2, #3
 8005d46:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e086      	b.n	8005e64 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0ac      	beq.n	8005cbe <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	f003 0320 	and.w	r3, r3, #32
 8005d6e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d76:	f003 0320 	and.w	r3, r3, #32
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d061      	beq.n	8005e4a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d86:	f7fe f889 	bl	8003e9c <HAL_GetTick>
 8005d8a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005d8c:	e056      	b.n	8005e3c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d02e      	beq.n	8005dfe <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f003 0308 	and.w	r3, r3, #8
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d005      	beq.n	8005db6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dae:	f043 0204 	orr.w	r2, r3, #4
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f003 0320 	and.w	r3, r3, #32
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d005      	beq.n	8005dcc <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dc4:	f043 0202 	orr.w	r2, r3, #2
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d005      	beq.n	8005de2 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dda:	f043 0201 	orr.w	r2, r3, #1
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2229      	movs	r2, #41	; 0x29
 8005de8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2204      	movs	r2, #4
 8005dee:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e032      	b.n	8005e64 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e04:	d01a      	beq.n	8005e3c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e06:	f7fe f849 	bl	8003e9c <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d302      	bcc.n	8005e1c <HAL_DMA2D_PollForTransfer+0x182>
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10f      	bne.n	8005e3c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e20:	f043 0220 	orr.w	r2, r3, #32
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2203      	movs	r2, #3
 8005e2c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e013      	b.n	8005e64 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f003 0310 	and.w	r3, r3, #16
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d0a1      	beq.n	8005d8e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2212      	movs	r2, #18
 8005e50:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3718      	adds	r7, #24
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d101      	bne.n	8005e90 <HAL_DMA2D_ConfigLayer+0x24>
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	e092      	b.n	8005fb6 <HAL_DMA2D_ConfigLayer+0x14a>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005ea0:	683a      	ldr	r2, [r7, #0]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	00db      	lsls	r3, r3, #3
 8005ea6:	1a9b      	subs	r3, r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	3328      	adds	r3, #40	; 0x28
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	4413      	add	r3, r2
 8005eb0:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	041b      	lsls	r3, r3, #16
 8005ebc:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005ec4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8005ed0:	4b3c      	ldr	r3, [pc, #240]	; (8005fc4 <HAL_DMA2D_ConfigLayer+0x158>)
 8005ed2:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	2b0a      	cmp	r3, #10
 8005eda:	d003      	beq.n	8005ee4 <HAL_DMA2D_ConfigLayer+0x78>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	2b09      	cmp	r3, #9
 8005ee2:	d107      	bne.n	8005ef4 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	613b      	str	r3, [r7, #16]
 8005ef2:	e005      	b.n	8005f00 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	061b      	lsls	r3, r3, #24
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d120      	bne.n	8005f48 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	43db      	mvns	r3, r3
 8005f10:	ea02 0103 	and.w	r1, r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	6812      	ldr	r2, [r2, #0]
 8005f26:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	2b0a      	cmp	r3, #10
 8005f2e:	d003      	beq.n	8005f38 <HAL_DMA2D_ConfigLayer+0xcc>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	2b09      	cmp	r3, #9
 8005f36:	d135      	bne.n	8005fa4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	68da      	ldr	r2, [r3, #12]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005f44:	629a      	str	r2, [r3, #40]	; 0x28
 8005f46:	e02d      	b.n	8005fa4 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	2b0b      	cmp	r3, #11
 8005f4e:	d109      	bne.n	8005f64 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	049b      	lsls	r3, r3, #18
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8005f62:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	69da      	ldr	r2, [r3, #28]
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	43db      	mvns	r3, r3
 8005f6e:	ea02 0103 	and.w	r1, r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	6812      	ldr	r2, [r2, #0]
 8005f84:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	2b0a      	cmp	r3, #10
 8005f8c:	d003      	beq.n	8005f96 <HAL_DMA2D_ConfigLayer+0x12a>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	2b09      	cmp	r3, #9
 8005f94:	d106      	bne.n	8005fa4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005fa2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	ff33000f 	.word	0xff33000f

08005fc8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b08b      	sub	sp, #44	; 0x2c
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
 8005fd4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fdc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	041a      	lsls	r2, r3, #16
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	430a      	orrs	r2, r1
 8005fee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006000:	d174      	bne.n	80060ec <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006008:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006010:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006018:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	b2db      	uxtb	r3, r3
 800601e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d108      	bne.n	800603a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	431a      	orrs	r2, r3
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	4313      	orrs	r3, r2
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	4313      	orrs	r3, r2
 8006036:	627b      	str	r3, [r7, #36]	; 0x24
 8006038:	e053      	b.n	80060e2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d106      	bne.n	8006050 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	4313      	orrs	r3, r2
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	4313      	orrs	r3, r2
 800604c:	627b      	str	r3, [r7, #36]	; 0x24
 800604e:	e048      	b.n	80060e2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	2b02      	cmp	r3, #2
 8006056:	d111      	bne.n	800607c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	0cdb      	lsrs	r3, r3, #19
 800605c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	0a9b      	lsrs	r3, r3, #10
 8006062:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	08db      	lsrs	r3, r3, #3
 8006068:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	02db      	lsls	r3, r3, #11
 8006072:	4313      	orrs	r3, r2
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	4313      	orrs	r3, r2
 8006078:	627b      	str	r3, [r7, #36]	; 0x24
 800607a:	e032      	b.n	80060e2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	2b03      	cmp	r3, #3
 8006082:	d117      	bne.n	80060b4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	0fdb      	lsrs	r3, r3, #31
 8006088:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	0cdb      	lsrs	r3, r3, #19
 800608e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	0adb      	lsrs	r3, r3, #11
 8006094:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	08db      	lsrs	r3, r3, #3
 800609a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	029b      	lsls	r3, r3, #10
 80060a4:	431a      	orrs	r2, r3
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	03db      	lsls	r3, r3, #15
 80060aa:	4313      	orrs	r3, r2
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	627b      	str	r3, [r7, #36]	; 0x24
 80060b2:	e016      	b.n	80060e2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	0f1b      	lsrs	r3, r3, #28
 80060b8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	0d1b      	lsrs	r3, r3, #20
 80060be:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	0b1b      	lsrs	r3, r3, #12
 80060c4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	091b      	lsrs	r3, r3, #4
 80060ca:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	011a      	lsls	r2, r3, #4
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	021b      	lsls	r3, r3, #8
 80060d4:	431a      	orrs	r2, r3
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	031b      	lsls	r3, r3, #12
 80060da:	4313      	orrs	r3, r2
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	4313      	orrs	r3, r2
 80060e0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060e8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80060ea:	e00d      	b.n	8006108 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060f4:	d104      	bne.n	8006100 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	615a      	str	r2, [r3, #20]
}
 80060fe:	e003      	b.n	8006108 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	60da      	str	r2, [r3, #12]
}
 8006108:	bf00      	nop
 800610a:	372c      	adds	r7, #44	; 0x2c
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	460b      	mov	r3, r1
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e00a      	b.n	8006146 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8006130:	7afb      	ldrb	r3, [r7, #11]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d103      	bne.n	800613e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	605a      	str	r2, [r3, #4]
      break;
 800613c:	e002      	b.n	8006144 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	75fb      	strb	r3, [r7, #23]
      break;
 8006142:	bf00      	nop
  }

  return status;
 8006144:	7dfb      	ldrb	r3, [r7, #23]
}
 8006146:	4618      	mov	r0, r3
 8006148:	371c      	adds	r7, #28
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8006152:	b480      	push	{r7}
 8006154:	b083      	sub	sp, #12
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
 800615a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e003      	b.n	800616e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800616c:	2300      	movs	r3, #0
  }
}
 800616e:	4618      	mov	r0, r3
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
	...

0800617c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	0c1b      	lsrs	r3, r3, #16
 800618a:	f003 0303 	and.w	r3, r3, #3
 800618e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 031f 	and.w	r3, r3, #31
 8006198:	2201      	movs	r2, #1
 800619a:	fa02 f303 	lsl.w	r3, r2, r3
 800619e:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	011a      	lsls	r2, r3, #4
 80061a4:	4b0c      	ldr	r3, [pc, #48]	; (80061d8 <HAL_EXTI_IRQHandler+0x5c>)
 80061a6:	4413      	add	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	4013      	ands	r3, r2
 80061b2:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d009      	beq.n	80061ce <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d002      	beq.n	80061ce <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	4798      	blx	r3
    }
  }
}
 80061ce:	bf00      	nop
 80061d0:	3718      	adds	r7, #24
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	58000088 	.word	0x58000088

080061dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061dc:	b480      	push	{r7}
 80061de:	b089      	sub	sp, #36	; 0x24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80061ea:	4b89      	ldr	r3, [pc, #548]	; (8006410 <HAL_GPIO_Init+0x234>)
 80061ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80061ee:	e194      	b.n	800651a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	2101      	movs	r1, #1
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	fa01 f303 	lsl.w	r3, r1, r3
 80061fc:	4013      	ands	r3, r2
 80061fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 8186 	beq.w	8006514 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f003 0303 	and.w	r3, r3, #3
 8006210:	2b01      	cmp	r3, #1
 8006212:	d005      	beq.n	8006220 <HAL_GPIO_Init+0x44>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f003 0303 	and.w	r3, r3, #3
 800621c:	2b02      	cmp	r3, #2
 800621e:	d130      	bne.n	8006282 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	005b      	lsls	r3, r3, #1
 800622a:	2203      	movs	r2, #3
 800622c:	fa02 f303 	lsl.w	r3, r2, r3
 8006230:	43db      	mvns	r3, r3
 8006232:	69ba      	ldr	r2, [r7, #24]
 8006234:	4013      	ands	r3, r2
 8006236:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	68da      	ldr	r2, [r3, #12]
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	005b      	lsls	r3, r3, #1
 8006240:	fa02 f303 	lsl.w	r3, r2, r3
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	4313      	orrs	r3, r2
 8006248:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	69ba      	ldr	r2, [r7, #24]
 800624e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006256:	2201      	movs	r2, #1
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	fa02 f303 	lsl.w	r3, r2, r3
 800625e:	43db      	mvns	r3, r3
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	4013      	ands	r3, r2
 8006264:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	091b      	lsrs	r3, r3, #4
 800626c:	f003 0201 	and.w	r2, r3, #1
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	fa02 f303 	lsl.w	r3, r2, r3
 8006276:	69ba      	ldr	r2, [r7, #24]
 8006278:	4313      	orrs	r3, r2
 800627a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	f003 0303 	and.w	r3, r3, #3
 800628a:	2b03      	cmp	r3, #3
 800628c:	d017      	beq.n	80062be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	2203      	movs	r2, #3
 800629a:	fa02 f303 	lsl.w	r3, r2, r3
 800629e:	43db      	mvns	r3, r3
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	4013      	ands	r3, r2
 80062a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	689a      	ldr	r2, [r3, #8]
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	fa02 f303 	lsl.w	r3, r2, r3
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	69ba      	ldr	r2, [r7, #24]
 80062bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f003 0303 	and.w	r3, r3, #3
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d123      	bne.n	8006312 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	08da      	lsrs	r2, r3, #3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	3208      	adds	r2, #8
 80062d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	f003 0307 	and.w	r3, r3, #7
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	220f      	movs	r2, #15
 80062e2:	fa02 f303 	lsl.w	r3, r2, r3
 80062e6:	43db      	mvns	r3, r3
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	4013      	ands	r3, r2
 80062ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	691a      	ldr	r2, [r3, #16]
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	f003 0307 	and.w	r3, r3, #7
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	fa02 f303 	lsl.w	r3, r2, r3
 80062fe:	69ba      	ldr	r2, [r7, #24]
 8006300:	4313      	orrs	r3, r2
 8006302:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	08da      	lsrs	r2, r3, #3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	3208      	adds	r2, #8
 800630c:	69b9      	ldr	r1, [r7, #24]
 800630e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	005b      	lsls	r3, r3, #1
 800631c:	2203      	movs	r2, #3
 800631e:	fa02 f303 	lsl.w	r3, r2, r3
 8006322:	43db      	mvns	r3, r3
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	4013      	ands	r3, r2
 8006328:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f003 0203 	and.w	r2, r3, #3
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	005b      	lsls	r3, r3, #1
 8006336:	fa02 f303 	lsl.w	r3, r2, r3
 800633a:	69ba      	ldr	r2, [r7, #24]
 800633c:	4313      	orrs	r3, r2
 800633e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 80e0 	beq.w	8006514 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006354:	4b2f      	ldr	r3, [pc, #188]	; (8006414 <HAL_GPIO_Init+0x238>)
 8006356:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800635a:	4a2e      	ldr	r2, [pc, #184]	; (8006414 <HAL_GPIO_Init+0x238>)
 800635c:	f043 0302 	orr.w	r3, r3, #2
 8006360:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006364:	4b2b      	ldr	r3, [pc, #172]	; (8006414 <HAL_GPIO_Init+0x238>)
 8006366:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800636a:	f003 0302 	and.w	r3, r3, #2
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006372:	4a29      	ldr	r2, [pc, #164]	; (8006418 <HAL_GPIO_Init+0x23c>)
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	089b      	lsrs	r3, r3, #2
 8006378:	3302      	adds	r3, #2
 800637a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800637e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	f003 0303 	and.w	r3, r3, #3
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	220f      	movs	r2, #15
 800638a:	fa02 f303 	lsl.w	r3, r2, r3
 800638e:	43db      	mvns	r3, r3
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	4013      	ands	r3, r2
 8006394:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a20      	ldr	r2, [pc, #128]	; (800641c <HAL_GPIO_Init+0x240>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d052      	beq.n	8006444 <HAL_GPIO_Init+0x268>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a1f      	ldr	r2, [pc, #124]	; (8006420 <HAL_GPIO_Init+0x244>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d031      	beq.n	800640a <HAL_GPIO_Init+0x22e>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a1e      	ldr	r2, [pc, #120]	; (8006424 <HAL_GPIO_Init+0x248>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d02b      	beq.n	8006406 <HAL_GPIO_Init+0x22a>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a1d      	ldr	r2, [pc, #116]	; (8006428 <HAL_GPIO_Init+0x24c>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d025      	beq.n	8006402 <HAL_GPIO_Init+0x226>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a1c      	ldr	r2, [pc, #112]	; (800642c <HAL_GPIO_Init+0x250>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d01f      	beq.n	80063fe <HAL_GPIO_Init+0x222>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a1b      	ldr	r2, [pc, #108]	; (8006430 <HAL_GPIO_Init+0x254>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d019      	beq.n	80063fa <HAL_GPIO_Init+0x21e>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a1a      	ldr	r2, [pc, #104]	; (8006434 <HAL_GPIO_Init+0x258>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d013      	beq.n	80063f6 <HAL_GPIO_Init+0x21a>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a19      	ldr	r2, [pc, #100]	; (8006438 <HAL_GPIO_Init+0x25c>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d00d      	beq.n	80063f2 <HAL_GPIO_Init+0x216>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a18      	ldr	r2, [pc, #96]	; (800643c <HAL_GPIO_Init+0x260>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d007      	beq.n	80063ee <HAL_GPIO_Init+0x212>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a17      	ldr	r2, [pc, #92]	; (8006440 <HAL_GPIO_Init+0x264>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d101      	bne.n	80063ea <HAL_GPIO_Init+0x20e>
 80063e6:	2309      	movs	r3, #9
 80063e8:	e02d      	b.n	8006446 <HAL_GPIO_Init+0x26a>
 80063ea:	230a      	movs	r3, #10
 80063ec:	e02b      	b.n	8006446 <HAL_GPIO_Init+0x26a>
 80063ee:	2308      	movs	r3, #8
 80063f0:	e029      	b.n	8006446 <HAL_GPIO_Init+0x26a>
 80063f2:	2307      	movs	r3, #7
 80063f4:	e027      	b.n	8006446 <HAL_GPIO_Init+0x26a>
 80063f6:	2306      	movs	r3, #6
 80063f8:	e025      	b.n	8006446 <HAL_GPIO_Init+0x26a>
 80063fa:	2305      	movs	r3, #5
 80063fc:	e023      	b.n	8006446 <HAL_GPIO_Init+0x26a>
 80063fe:	2304      	movs	r3, #4
 8006400:	e021      	b.n	8006446 <HAL_GPIO_Init+0x26a>
 8006402:	2303      	movs	r3, #3
 8006404:	e01f      	b.n	8006446 <HAL_GPIO_Init+0x26a>
 8006406:	2302      	movs	r3, #2
 8006408:	e01d      	b.n	8006446 <HAL_GPIO_Init+0x26a>
 800640a:	2301      	movs	r3, #1
 800640c:	e01b      	b.n	8006446 <HAL_GPIO_Init+0x26a>
 800640e:	bf00      	nop
 8006410:	58000080 	.word	0x58000080
 8006414:	58024400 	.word	0x58024400
 8006418:	58000400 	.word	0x58000400
 800641c:	58020000 	.word	0x58020000
 8006420:	58020400 	.word	0x58020400
 8006424:	58020800 	.word	0x58020800
 8006428:	58020c00 	.word	0x58020c00
 800642c:	58021000 	.word	0x58021000
 8006430:	58021400 	.word	0x58021400
 8006434:	58021800 	.word	0x58021800
 8006438:	58021c00 	.word	0x58021c00
 800643c:	58022000 	.word	0x58022000
 8006440:	58022400 	.word	0x58022400
 8006444:	2300      	movs	r3, #0
 8006446:	69fa      	ldr	r2, [r7, #28]
 8006448:	f002 0203 	and.w	r2, r2, #3
 800644c:	0092      	lsls	r2, r2, #2
 800644e:	4093      	lsls	r3, r2
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	4313      	orrs	r3, r2
 8006454:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006456:	4938      	ldr	r1, [pc, #224]	; (8006538 <HAL_GPIO_Init+0x35c>)
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	089b      	lsrs	r3, r3, #2
 800645c:	3302      	adds	r3, #2
 800645e:	69ba      	ldr	r2, [r7, #24]
 8006460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	43db      	mvns	r3, r3
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	4013      	ands	r3, r2
 8006474:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	4313      	orrs	r3, r2
 8006488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800648a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	43db      	mvns	r3, r3
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	4013      	ands	r3, r2
 80064a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d003      	beq.n	80064b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80064b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	43db      	mvns	r3, r3
 80064ca:	69ba      	ldr	r2, [r7, #24]
 80064cc:	4013      	ands	r3, r2
 80064ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d003      	beq.n	80064e4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	43db      	mvns	r3, r3
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	4013      	ands	r3, r2
 80064f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006506:	69ba      	ldr	r2, [r7, #24]
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	4313      	orrs	r3, r2
 800650c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	3301      	adds	r3, #1
 8006518:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	fa22 f303 	lsr.w	r3, r2, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	f47f ae63 	bne.w	80061f0 <HAL_GPIO_Init+0x14>
  }
}
 800652a:	bf00      	nop
 800652c:	bf00      	nop
 800652e:	3724      	adds	r7, #36	; 0x24
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr
 8006538:	58000400 	.word	0x58000400

0800653c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	460b      	mov	r3, r1
 8006546:	807b      	strh	r3, [r7, #2]
 8006548:	4613      	mov	r3, r2
 800654a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800654c:	787b      	ldrb	r3, [r7, #1]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006552:	887a      	ldrh	r2, [r7, #2]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006558:	e003      	b.n	8006562 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800655a:	887b      	ldrh	r3, [r7, #2]
 800655c:	041a      	lsls	r2, r3, #16
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	619a      	str	r2, [r3, #24]
}
 8006562:	bf00      	nop
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
	...

08006570 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e07f      	b.n	8006682 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d106      	bne.n	800659c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f87a 	bl	8006690 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2224      	movs	r2, #36	; 0x24
 80065a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 0201 	bic.w	r2, r2, #1
 80065b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80065c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689a      	ldr	r2, [r3, #8]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d107      	bne.n	80065ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	689a      	ldr	r2, [r3, #8]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065e6:	609a      	str	r2, [r3, #8]
 80065e8:	e006      	b.n	80065f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	689a      	ldr	r2, [r3, #8]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80065f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d104      	bne.n	800660a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006608:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6859      	ldr	r1, [r3, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	4b1d      	ldr	r3, [pc, #116]	; (800668c <HAL_I2C_Init+0x11c>)
 8006616:	430b      	orrs	r3, r1
 8006618:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68da      	ldr	r2, [r3, #12]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006628:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	691a      	ldr	r2, [r3, #16]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	430a      	orrs	r2, r1
 8006642:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	69d9      	ldr	r1, [r3, #28]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a1a      	ldr	r2, [r3, #32]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	430a      	orrs	r2, r1
 8006652:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f042 0201 	orr.w	r2, r2, #1
 8006662:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2220      	movs	r2, #32
 800666e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	02008000 	.word	0x02008000

08006690 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b088      	sub	sp, #32
 80066a8:	af02      	add	r7, sp, #8
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	4608      	mov	r0, r1
 80066ae:	4611      	mov	r1, r2
 80066b0:	461a      	mov	r2, r3
 80066b2:	4603      	mov	r3, r0
 80066b4:	817b      	strh	r3, [r7, #10]
 80066b6:	460b      	mov	r3, r1
 80066b8:	813b      	strh	r3, [r7, #8]
 80066ba:	4613      	mov	r3, r2
 80066bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b20      	cmp	r3, #32
 80066c8:	f040 80fd 	bne.w	80068c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <HAL_I2C_Mem_Read+0x34>
 80066d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d105      	bne.n	80066e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e0f1      	b.n	80068c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d101      	bne.n	80066f2 <HAL_I2C_Mem_Read+0x4e>
 80066ee:	2302      	movs	r3, #2
 80066f0:	e0ea      	b.n	80068c8 <HAL_I2C_Mem_Read+0x224>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80066fa:	f7fd fbcf 	bl	8003e9c <HAL_GetTick>
 80066fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	2319      	movs	r3, #25
 8006706:	2201      	movs	r2, #1
 8006708:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 f975 	bl	80069fc <I2C_WaitOnFlagUntilTimeout>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e0d5      	b.n	80068c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2222      	movs	r2, #34	; 0x22
 8006720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2240      	movs	r2, #64	; 0x40
 8006728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6a3a      	ldr	r2, [r7, #32]
 8006736:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800673c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006744:	88f8      	ldrh	r0, [r7, #6]
 8006746:	893a      	ldrh	r2, [r7, #8]
 8006748:	8979      	ldrh	r1, [r7, #10]
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	9301      	str	r3, [sp, #4]
 800674e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	4603      	mov	r3, r0
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 f8d9 	bl	800690c <I2C_RequestMemoryRead>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d005      	beq.n	800676c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e0ad      	b.n	80068c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006770:	b29b      	uxth	r3, r3
 8006772:	2bff      	cmp	r3, #255	; 0xff
 8006774:	d90e      	bls.n	8006794 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	22ff      	movs	r2, #255	; 0xff
 800677a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006780:	b2da      	uxtb	r2, r3
 8006782:	8979      	ldrh	r1, [r7, #10]
 8006784:	4b52      	ldr	r3, [pc, #328]	; (80068d0 <HAL_I2C_Mem_Read+0x22c>)
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f000 faef 	bl	8006d70 <I2C_TransferConfig>
 8006792:	e00f      	b.n	80067b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006798:	b29a      	uxth	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	8979      	ldrh	r1, [r7, #10]
 80067a6:	4b4a      	ldr	r3, [pc, #296]	; (80068d0 <HAL_I2C_Mem_Read+0x22c>)
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f000 fade 	bl	8006d70 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ba:	2200      	movs	r2, #0
 80067bc:	2104      	movs	r1, #4
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f000 f91c 	bl	80069fc <I2C_WaitOnFlagUntilTimeout>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e07c      	b.n	80068c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	b2d2      	uxtb	r2, r2
 80067da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ea:	3b01      	subs	r3, #1
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	3b01      	subs	r3, #1
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006804:	b29b      	uxth	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d034      	beq.n	8006874 <HAL_I2C_Mem_Read+0x1d0>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800680e:	2b00      	cmp	r3, #0
 8006810:	d130      	bne.n	8006874 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006818:	2200      	movs	r2, #0
 800681a:	2180      	movs	r1, #128	; 0x80
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 f8ed 	bl	80069fc <I2C_WaitOnFlagUntilTimeout>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e04d      	b.n	80068c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006830:	b29b      	uxth	r3, r3
 8006832:	2bff      	cmp	r3, #255	; 0xff
 8006834:	d90e      	bls.n	8006854 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	22ff      	movs	r2, #255	; 0xff
 800683a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006840:	b2da      	uxtb	r2, r3
 8006842:	8979      	ldrh	r1, [r7, #10]
 8006844:	2300      	movs	r3, #0
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f000 fa8f 	bl	8006d70 <I2C_TransferConfig>
 8006852:	e00f      	b.n	8006874 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006858:	b29a      	uxth	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006862:	b2da      	uxtb	r2, r3
 8006864:	8979      	ldrh	r1, [r7, #10]
 8006866:	2300      	movs	r3, #0
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f000 fa7e 	bl	8006d70 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006878:	b29b      	uxth	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d19a      	bne.n	80067b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f000 f950 	bl	8006b28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e01a      	b.n	80068c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2220      	movs	r2, #32
 8006898:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6859      	ldr	r1, [r3, #4]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	4b0b      	ldr	r3, [pc, #44]	; (80068d4 <HAL_I2C_Mem_Read+0x230>)
 80068a6:	400b      	ands	r3, r1
 80068a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2220      	movs	r2, #32
 80068ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	e000      	b.n	80068c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80068c6:	2302      	movs	r3, #2
  }
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3718      	adds	r7, #24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	80002400 	.word	0x80002400
 80068d4:	fe00e800 	.word	0xfe00e800

080068d8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068e6:	b2db      	uxtb	r3, r3
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006900:	4618      	mov	r0, r3
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af02      	add	r7, sp, #8
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	4608      	mov	r0, r1
 8006916:	4611      	mov	r1, r2
 8006918:	461a      	mov	r2, r3
 800691a:	4603      	mov	r3, r0
 800691c:	817b      	strh	r3, [r7, #10]
 800691e:	460b      	mov	r3, r1
 8006920:	813b      	strh	r3, [r7, #8]
 8006922:	4613      	mov	r3, r2
 8006924:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006926:	88fb      	ldrh	r3, [r7, #6]
 8006928:	b2da      	uxtb	r2, r3
 800692a:	8979      	ldrh	r1, [r7, #10]
 800692c:	4b20      	ldr	r3, [pc, #128]	; (80069b0 <I2C_RequestMemoryRead+0xa4>)
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	2300      	movs	r3, #0
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f000 fa1c 	bl	8006d70 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006938:	69fa      	ldr	r2, [r7, #28]
 800693a:	69b9      	ldr	r1, [r7, #24]
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 f8ac 	bl	8006a9a <I2C_WaitOnTXISFlagUntilTimeout>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d001      	beq.n	800694c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e02c      	b.n	80069a6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800694c:	88fb      	ldrh	r3, [r7, #6]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d105      	bne.n	800695e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006952:	893b      	ldrh	r3, [r7, #8]
 8006954:	b2da      	uxtb	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	629a      	str	r2, [r3, #40]	; 0x28
 800695c:	e015      	b.n	800698a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800695e:	893b      	ldrh	r3, [r7, #8]
 8006960:	0a1b      	lsrs	r3, r3, #8
 8006962:	b29b      	uxth	r3, r3
 8006964:	b2da      	uxtb	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800696c:	69fa      	ldr	r2, [r7, #28]
 800696e:	69b9      	ldr	r1, [r7, #24]
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f000 f892 	bl	8006a9a <I2C_WaitOnTXISFlagUntilTimeout>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e012      	b.n	80069a6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006980:	893b      	ldrh	r3, [r7, #8]
 8006982:	b2da      	uxtb	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	9300      	str	r3, [sp, #0]
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	2200      	movs	r2, #0
 8006992:	2140      	movs	r1, #64	; 0x40
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f000 f831 	bl	80069fc <I2C_WaitOnFlagUntilTimeout>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e000      	b.n	80069a6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	80002000 	.word	0x80002000

080069b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d103      	bne.n	80069d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2200      	movs	r2, #0
 80069d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d007      	beq.n	80069f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	699a      	ldr	r2, [r3, #24]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f042 0201 	orr.w	r2, r2, #1
 80069ee:	619a      	str	r2, [r3, #24]
  }
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	603b      	str	r3, [r7, #0]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a0c:	e031      	b.n	8006a72 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a14:	d02d      	beq.n	8006a72 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a16:	f7fd fa41 	bl	8003e9c <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	683a      	ldr	r2, [r7, #0]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d302      	bcc.n	8006a2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d122      	bne.n	8006a72 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	699a      	ldr	r2, [r3, #24]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	4013      	ands	r3, r2
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	bf0c      	ite	eq
 8006a3c:	2301      	moveq	r3, #1
 8006a3e:	2300      	movne	r3, #0
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	461a      	mov	r2, r3
 8006a44:	79fb      	ldrb	r3, [r7, #7]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d113      	bne.n	8006a72 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a4e:	f043 0220 	orr.w	r2, r3, #32
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e00f      	b.n	8006a92 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	699a      	ldr	r2, [r3, #24]
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	bf0c      	ite	eq
 8006a82:	2301      	moveq	r3, #1
 8006a84:	2300      	movne	r3, #0
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	461a      	mov	r2, r3
 8006a8a:	79fb      	ldrb	r3, [r7, #7]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d0be      	beq.n	8006a0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b084      	sub	sp, #16
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	60f8      	str	r0, [r7, #12]
 8006aa2:	60b9      	str	r1, [r7, #8]
 8006aa4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006aa6:	e033      	b.n	8006b10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	68b9      	ldr	r1, [r7, #8]
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f000 f87f 	bl	8006bb0 <I2C_IsErrorOccurred>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e031      	b.n	8006b20 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ac2:	d025      	beq.n	8006b10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ac4:	f7fd f9ea 	bl	8003e9c <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d302      	bcc.n	8006ada <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d11a      	bne.n	8006b10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d013      	beq.n	8006b10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aec:	f043 0220 	orr.w	r2, r3, #32
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2220      	movs	r2, #32
 8006af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e007      	b.n	8006b20 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d1c4      	bne.n	8006aa8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b34:	e02f      	b.n	8006b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	68b9      	ldr	r1, [r7, #8]
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 f838 	bl	8006bb0 <I2C_IsErrorOccurred>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e02d      	b.n	8006ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b4a:	f7fd f9a7 	bl	8003e9c <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	68ba      	ldr	r2, [r7, #8]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d302      	bcc.n	8006b60 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d11a      	bne.n	8006b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	d013      	beq.n	8006b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b72:	f043 0220 	orr.w	r2, r3, #32
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e007      	b.n	8006ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	f003 0320 	and.w	r3, r3, #32
 8006ba0:	2b20      	cmp	r3, #32
 8006ba2:	d1c8      	bne.n	8006b36 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b08a      	sub	sp, #40	; 0x28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	f003 0310 	and.w	r3, r3, #16
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d068      	beq.n	8006cae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2210      	movs	r2, #16
 8006be2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006be4:	e049      	b.n	8006c7a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bec:	d045      	beq.n	8006c7a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006bee:	f7fd f955 	bl	8003e9c <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d302      	bcc.n	8006c04 <I2C_IsErrorOccurred+0x54>
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d13a      	bne.n	8006c7a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c0e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c16:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c26:	d121      	bne.n	8006c6c <I2C_IsErrorOccurred+0xbc>
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c2e:	d01d      	beq.n	8006c6c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006c30:	7cfb      	ldrb	r3, [r7, #19]
 8006c32:	2b20      	cmp	r3, #32
 8006c34:	d01a      	beq.n	8006c6c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c44:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006c46:	f7fd f929 	bl	8003e9c <HAL_GetTick>
 8006c4a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c4c:	e00e      	b.n	8006c6c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006c4e:	f7fd f925 	bl	8003e9c <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b19      	cmp	r3, #25
 8006c5a:	d907      	bls.n	8006c6c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	f043 0320 	orr.w	r3, r3, #32
 8006c62:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006c6a:	e006      	b.n	8006c7a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	f003 0320 	and.w	r3, r3, #32
 8006c76:	2b20      	cmp	r3, #32
 8006c78:	d1e9      	bne.n	8006c4e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	f003 0320 	and.w	r3, r3, #32
 8006c84:	2b20      	cmp	r3, #32
 8006c86:	d003      	beq.n	8006c90 <I2C_IsErrorOccurred+0xe0>
 8006c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d0aa      	beq.n	8006be6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006c90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d103      	bne.n	8006ca0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	f043 0304 	orr.w	r3, r3, #4
 8006ca6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00b      	beq.n	8006cd8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	f043 0301 	orr.w	r3, r3, #1
 8006cc6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cd0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00b      	beq.n	8006cfa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006ce2:	6a3b      	ldr	r3, [r7, #32]
 8006ce4:	f043 0308 	orr.w	r3, r3, #8
 8006ce8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006cf2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00b      	beq.n	8006d1c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	f043 0302 	orr.w	r3, r3, #2
 8006d0a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d01c      	beq.n	8006d5e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f7ff fe45 	bl	80069b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6859      	ldr	r1, [r3, #4]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	4b0d      	ldr	r3, [pc, #52]	; (8006d6c <I2C_IsErrorOccurred+0x1bc>)
 8006d36:	400b      	ands	r3, r1
 8006d38:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	431a      	orrs	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006d5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3728      	adds	r7, #40	; 0x28
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	fe00e800 	.word	0xfe00e800

08006d70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b087      	sub	sp, #28
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	607b      	str	r3, [r7, #4]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	817b      	strh	r3, [r7, #10]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006d82:	897b      	ldrh	r3, [r7, #10]
 8006d84:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006d88:	7a7b      	ldrb	r3, [r7, #9]
 8006d8a:	041b      	lsls	r3, r3, #16
 8006d8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006d90:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d9e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	6a3b      	ldr	r3, [r7, #32]
 8006da8:	0d5b      	lsrs	r3, r3, #21
 8006daa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006dae:	4b08      	ldr	r3, [pc, #32]	; (8006dd0 <I2C_TransferConfig+0x60>)
 8006db0:	430b      	orrs	r3, r1
 8006db2:	43db      	mvns	r3, r3
 8006db4:	ea02 0103 	and.w	r1, r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006dc2:	bf00      	nop
 8006dc4:	371c      	adds	r7, #28
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	03ff63ff 	.word	0x03ff63ff

08006dd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b20      	cmp	r3, #32
 8006de8:	d138      	bne.n	8006e5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d101      	bne.n	8006df8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006df4:	2302      	movs	r3, #2
 8006df6:	e032      	b.n	8006e5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2224      	movs	r2, #36	; 0x24
 8006e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 0201 	bic.w	r2, r2, #1
 8006e16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6819      	ldr	r1, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f042 0201 	orr.w	r2, r2, #1
 8006e46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	e000      	b.n	8006e5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006e5c:	2302      	movs	r3, #2
  }
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b085      	sub	sp, #20
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b20      	cmp	r3, #32
 8006e7e:	d139      	bne.n	8006ef4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d101      	bne.n	8006e8e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	e033      	b.n	8006ef6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2224      	movs	r2, #36	; 0x24
 8006e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f022 0201 	bic.w	r2, r2, #1
 8006eac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006ebc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	021b      	lsls	r3, r3, #8
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f042 0201 	orr.w	r2, r2, #1
 8006ede:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	e000      	b.n	8006ef6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006ef4:	2302      	movs	r3, #2
  }
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
	...

08006f04 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e0bf      	b.n	8007096 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d106      	bne.n	8006f30 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f8ba 	bl	80070a4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2202      	movs	r2, #2
 8006f34:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	699a      	ldr	r2, [r3, #24]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006f46:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6999      	ldr	r1, [r3, #24]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006f5c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6899      	ldr	r1, [r3, #8]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	4b4a      	ldr	r3, [pc, #296]	; (80070a0 <HAL_LTDC_Init+0x19c>)
 8006f78:	400b      	ands	r3, r1
 8006f7a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	695b      	ldr	r3, [r3, #20]
 8006f80:	041b      	lsls	r3, r3, #16
 8006f82:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6899      	ldr	r1, [r3, #8]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	699a      	ldr	r2, [r3, #24]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	431a      	orrs	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68d9      	ldr	r1, [r3, #12]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	4b3e      	ldr	r3, [pc, #248]	; (80070a0 <HAL_LTDC_Init+0x19c>)
 8006fa6:	400b      	ands	r3, r1
 8006fa8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	041b      	lsls	r3, r3, #16
 8006fb0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68d9      	ldr	r1, [r3, #12]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a1a      	ldr	r2, [r3, #32]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6919      	ldr	r1, [r3, #16]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	4b33      	ldr	r3, [pc, #204]	; (80070a0 <HAL_LTDC_Init+0x19c>)
 8006fd4:	400b      	ands	r3, r1
 8006fd6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fdc:	041b      	lsls	r3, r3, #16
 8006fde:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	6919      	ldr	r1, [r3, #16]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	431a      	orrs	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6959      	ldr	r1, [r3, #20]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	4b27      	ldr	r3, [pc, #156]	; (80070a0 <HAL_LTDC_Init+0x19c>)
 8007002:	400b      	ands	r3, r1
 8007004:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700a:	041b      	lsls	r3, r3, #16
 800700c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	6959      	ldr	r1, [r3, #20]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	431a      	orrs	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	430a      	orrs	r2, r1
 8007022:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800702a:	021b      	lsls	r3, r3, #8
 800702c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007034:	041b      	lsls	r3, r3, #16
 8007036:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007046:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4313      	orrs	r3, r2
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800705a:	431a      	orrs	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	430a      	orrs	r2, r1
 8007062:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f042 0206 	orr.w	r2, r2, #6
 8007072:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	699a      	ldr	r2, [r3, #24]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f042 0201 	orr.w	r2, r2, #1
 8007082:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	f000f800 	.word	0xf000f800

080070a4 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80070b8:	b5b0      	push	{r4, r5, r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d101      	bne.n	80070d2 <HAL_LTDC_ConfigLayer+0x1a>
 80070ce:	2302      	movs	r3, #2
 80070d0:	e02c      	b.n	800712c <HAL_LTDC_ConfigLayer+0x74>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2202      	movs	r2, #2
 80070de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2134      	movs	r1, #52	; 0x34
 80070e8:	fb01 f303 	mul.w	r3, r1, r3
 80070ec:	4413      	add	r3, r2
 80070ee:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	4614      	mov	r4, r2
 80070f6:	461d      	mov	r5, r3
 80070f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007104:	682b      	ldr	r3, [r5, #0]
 8007106:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	68b9      	ldr	r1, [r7, #8]
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f000 f811 	bl	8007134 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2201      	movs	r2, #1
 8007118:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bdb0      	pop	{r4, r5, r7, pc}

08007134 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007134:	b480      	push	{r7}
 8007136:	b089      	sub	sp, #36	; 0x24
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	0c1b      	lsrs	r3, r3, #16
 800714c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007150:	4413      	add	r3, r2
 8007152:	041b      	lsls	r3, r3, #16
 8007154:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	461a      	mov	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	01db      	lsls	r3, r3, #7
 8007160:	4413      	add	r3, r2
 8007162:	3384      	adds	r3, #132	; 0x84
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	6812      	ldr	r2, [r2, #0]
 800716a:	4611      	mov	r1, r2
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	01d2      	lsls	r2, r2, #7
 8007170:	440a      	add	r2, r1
 8007172:	3284      	adds	r2, #132	; 0x84
 8007174:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007178:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	0c1b      	lsrs	r3, r3, #16
 8007186:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800718a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800718c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4619      	mov	r1, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	01db      	lsls	r3, r3, #7
 8007198:	440b      	add	r3, r1
 800719a:	3384      	adds	r3, #132	; 0x84
 800719c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80071a2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	68da      	ldr	r2, [r3, #12]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071b2:	4413      	add	r3, r2
 80071b4:	041b      	lsls	r3, r3, #16
 80071b6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	461a      	mov	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	01db      	lsls	r3, r3, #7
 80071c2:	4413      	add	r3, r2
 80071c4:	3384      	adds	r3, #132	; 0x84
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	6812      	ldr	r2, [r2, #0]
 80071cc:	4611      	mov	r1, r2
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	01d2      	lsls	r2, r2, #7
 80071d2:	440a      	add	r2, r1
 80071d4:	3284      	adds	r2, #132	; 0x84
 80071d6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80071da:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	689a      	ldr	r2, [r3, #8]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071ea:	4413      	add	r3, r2
 80071ec:	1c5a      	adds	r2, r3, #1
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4619      	mov	r1, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	01db      	lsls	r3, r3, #7
 80071f8:	440b      	add	r3, r1
 80071fa:	3384      	adds	r3, #132	; 0x84
 80071fc:	4619      	mov	r1, r3
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	4313      	orrs	r3, r2
 8007202:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	461a      	mov	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	01db      	lsls	r3, r3, #7
 800720e:	4413      	add	r3, r2
 8007210:	3384      	adds	r3, #132	; 0x84
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	6812      	ldr	r2, [r2, #0]
 8007218:	4611      	mov	r1, r2
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	01d2      	lsls	r2, r2, #7
 800721e:	440a      	add	r2, r1
 8007220:	3284      	adds	r2, #132	; 0x84
 8007222:	f023 0307 	bic.w	r3, r3, #7
 8007226:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	461a      	mov	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	01db      	lsls	r3, r3, #7
 8007232:	4413      	add	r3, r2
 8007234:	3384      	adds	r3, #132	; 0x84
 8007236:	461a      	mov	r2, r3
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007244:	021b      	lsls	r3, r3, #8
 8007246:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800724e:	041b      	lsls	r3, r3, #16
 8007250:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	061b      	lsls	r3, r3, #24
 8007258:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	01db      	lsls	r3, r3, #7
 8007264:	4413      	add	r3, r2
 8007266:	3384      	adds	r3, #132	; 0x84
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	461a      	mov	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	01db      	lsls	r3, r3, #7
 8007274:	4413      	add	r3, r2
 8007276:	3384      	adds	r3, #132	; 0x84
 8007278:	461a      	mov	r2, r3
 800727a:	2300      	movs	r3, #0
 800727c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007284:	461a      	mov	r2, r3
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	431a      	orrs	r2, r3
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	431a      	orrs	r2, r3
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4619      	mov	r1, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	01db      	lsls	r3, r3, #7
 8007298:	440b      	add	r3, r1
 800729a:	3384      	adds	r3, #132	; 0x84
 800729c:	4619      	mov	r1, r3
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	461a      	mov	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	01db      	lsls	r3, r3, #7
 80072ae:	4413      	add	r3, r2
 80072b0:	3384      	adds	r3, #132	; 0x84
 80072b2:	695b      	ldr	r3, [r3, #20]
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	6812      	ldr	r2, [r2, #0]
 80072b8:	4611      	mov	r1, r2
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	01d2      	lsls	r2, r2, #7
 80072be:	440a      	add	r2, r1
 80072c0:	3284      	adds	r2, #132	; 0x84
 80072c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80072c6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	461a      	mov	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	01db      	lsls	r3, r3, #7
 80072d2:	4413      	add	r3, r2
 80072d4:	3384      	adds	r3, #132	; 0x84
 80072d6:	461a      	mov	r2, r3
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	695b      	ldr	r3, [r3, #20]
 80072dc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	461a      	mov	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	01db      	lsls	r3, r3, #7
 80072e8:	4413      	add	r3, r2
 80072ea:	3384      	adds	r3, #132	; 0x84
 80072ec:	69da      	ldr	r2, [r3, #28]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4619      	mov	r1, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	01db      	lsls	r3, r3, #7
 80072f8:	440b      	add	r3, r1
 80072fa:	3384      	adds	r3, #132	; 0x84
 80072fc:	4619      	mov	r1, r3
 80072fe:	4b58      	ldr	r3, [pc, #352]	; (8007460 <LTDC_SetConfig+0x32c>)
 8007300:	4013      	ands	r3, r2
 8007302:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	69da      	ldr	r2, [r3, #28]
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	6a1b      	ldr	r3, [r3, #32]
 800730c:	68f9      	ldr	r1, [r7, #12]
 800730e:	6809      	ldr	r1, [r1, #0]
 8007310:	4608      	mov	r0, r1
 8007312:	6879      	ldr	r1, [r7, #4]
 8007314:	01c9      	lsls	r1, r1, #7
 8007316:	4401      	add	r1, r0
 8007318:	3184      	adds	r1, #132	; 0x84
 800731a:	4313      	orrs	r3, r2
 800731c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	01db      	lsls	r3, r3, #7
 8007328:	4413      	add	r3, r2
 800732a:	3384      	adds	r3, #132	; 0x84
 800732c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	461a      	mov	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	01db      	lsls	r3, r3, #7
 8007338:	4413      	add	r3, r2
 800733a:	3384      	adds	r3, #132	; 0x84
 800733c:	461a      	mov	r2, r3
 800733e:	2300      	movs	r3, #0
 8007340:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	461a      	mov	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	01db      	lsls	r3, r3, #7
 800734c:	4413      	add	r3, r2
 800734e:	3384      	adds	r3, #132	; 0x84
 8007350:	461a      	mov	r2, r3
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007356:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d102      	bne.n	8007366 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007360:	2304      	movs	r3, #4
 8007362:	61fb      	str	r3, [r7, #28]
 8007364:	e01b      	b.n	800739e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d102      	bne.n	8007374 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800736e:	2303      	movs	r3, #3
 8007370:	61fb      	str	r3, [r7, #28]
 8007372:	e014      	b.n	800739e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	2b04      	cmp	r3, #4
 800737a:	d00b      	beq.n	8007394 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007380:	2b02      	cmp	r3, #2
 8007382:	d007      	beq.n	8007394 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007388:	2b03      	cmp	r3, #3
 800738a:	d003      	beq.n	8007394 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007390:	2b07      	cmp	r3, #7
 8007392:	d102      	bne.n	800739a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007394:	2302      	movs	r3, #2
 8007396:	61fb      	str	r3, [r7, #28]
 8007398:	e001      	b.n	800739e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800739a:	2301      	movs	r3, #1
 800739c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	461a      	mov	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	01db      	lsls	r3, r3, #7
 80073a8:	4413      	add	r3, r2
 80073aa:	3384      	adds	r3, #132	; 0x84
 80073ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	6812      	ldr	r2, [r2, #0]
 80073b2:	4611      	mov	r1, r2
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	01d2      	lsls	r2, r2, #7
 80073b8:	440a      	add	r2, r1
 80073ba:	3284      	adds	r2, #132	; 0x84
 80073bc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80073c0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c6:	69fa      	ldr	r2, [r7, #28]
 80073c8:	fb02 f303 	mul.w	r3, r2, r3
 80073cc:	041a      	lsls	r2, r3, #16
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	6859      	ldr	r1, [r3, #4]
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	1acb      	subs	r3, r1, r3
 80073d8:	69f9      	ldr	r1, [r7, #28]
 80073da:	fb01 f303 	mul.w	r3, r1, r3
 80073de:	3307      	adds	r3, #7
 80073e0:	68f9      	ldr	r1, [r7, #12]
 80073e2:	6809      	ldr	r1, [r1, #0]
 80073e4:	4608      	mov	r0, r1
 80073e6:	6879      	ldr	r1, [r7, #4]
 80073e8:	01c9      	lsls	r1, r1, #7
 80073ea:	4401      	add	r1, r0
 80073ec:	3184      	adds	r1, #132	; 0x84
 80073ee:	4313      	orrs	r3, r2
 80073f0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	461a      	mov	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	01db      	lsls	r3, r3, #7
 80073fc:	4413      	add	r3, r2
 80073fe:	3384      	adds	r3, #132	; 0x84
 8007400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4619      	mov	r1, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	01db      	lsls	r3, r3, #7
 800740c:	440b      	add	r3, r1
 800740e:	3384      	adds	r3, #132	; 0x84
 8007410:	4619      	mov	r1, r3
 8007412:	4b14      	ldr	r3, [pc, #80]	; (8007464 <LTDC_SetConfig+0x330>)
 8007414:	4013      	ands	r3, r2
 8007416:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	461a      	mov	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	01db      	lsls	r3, r3, #7
 8007422:	4413      	add	r3, r2
 8007424:	3384      	adds	r3, #132	; 0x84
 8007426:	461a      	mov	r2, r3
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	461a      	mov	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	01db      	lsls	r3, r3, #7
 8007438:	4413      	add	r3, r2
 800743a:	3384      	adds	r3, #132	; 0x84
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	6812      	ldr	r2, [r2, #0]
 8007442:	4611      	mov	r1, r2
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	01d2      	lsls	r2, r2, #7
 8007448:	440a      	add	r2, r1
 800744a:	3284      	adds	r2, #132	; 0x84
 800744c:	f043 0301 	orr.w	r3, r3, #1
 8007450:	6013      	str	r3, [r2, #0]
}
 8007452:	bf00      	nop
 8007454:	3724      	adds	r7, #36	; 0x24
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	fffff8f8 	.word	0xfffff8f8
 8007464:	fffff800 	.word	0xfffff800

08007468 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007470:	f7fc fd14 	bl	8003e9c <HAL_GetTick>
 8007474:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d101      	bne.n	8007480 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e03b      	b.n	80074f8 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2202      	movs	r2, #2
 800748c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68da      	ldr	r2, [r3, #12]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f022 0201 	bic.w	r2, r2, #1
 800749e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80074a0:	e00f      	b.n	80074c2 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80074a2:	f7fc fcfb 	bl	8003e9c <HAL_GetTick>
 80074a6:	4602      	mov	r2, r0
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	2b05      	cmp	r3, #5
 80074ae:	d908      	bls.n	80074c2 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2240      	movs	r2, #64	; 0x40
 80074b4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2203      	movs	r2, #3
 80074ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e01a      	b.n	80074f8 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	f003 0301 	and.w	r3, r3, #1
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1e8      	bne.n	80074a2 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fab3 	bl	8007a3c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d101      	bne.n	8007512 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e048      	b.n	80075a4 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68da      	ldr	r2, [r3, #12]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f022 0201 	bic.w	r2, r2, #1
 8007520:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2200      	movs	r2, #0
 8007528:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2200      	movs	r2, #0
 8007530:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2200      	movs	r2, #0
 8007538:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2200      	movs	r2, #0
 8007540:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2200      	movs	r2, #0
 8007548:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2200      	movs	r2, #0
 8007550:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2200      	movs	r2, #0
 8007558:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2200      	movs	r2, #0
 8007560:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2200      	movs	r2, #0
 8007568:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2200      	movs	r2, #0
 8007570:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	221f      	movs	r2, #31
 8007578:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b086      	sub	sp, #24
 80075b4:	af02      	add	r7, sp, #8
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
 80075bc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d101      	bne.n	80075c8 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e070      	b.n	80076aa <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d101      	bne.n	80075d6 <HAL_MDMA_Start_IT+0x26>
 80075d2:	2302      	movs	r3, #2
 80075d4:	e069      	b.n	80076aa <HAL_MDMA_Start_IT+0xfa>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d158      	bne.n	800769c <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2202      	movs	r2, #2
 80075ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	669a      	str	r2, [r3, #104]	; 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68da      	ldr	r2, [r3, #12]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f022 0201 	bic.w	r2, r2, #1
 8007606:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	68b9      	ldr	r1, [r7, #8]
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f000 f9a2 	bl	800795c <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68da      	ldr	r2, [r3, #12]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0206 	orr.w	r2, r2, #6
 8007626:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800762c:	2b00      	cmp	r3, #0
 800762e:	d007      	beq.n	8007640 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68da      	ldr	r2, [r3, #12]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f042 0210 	orr.w	r2, r2, #16
 800763e:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007644:	2b00      	cmp	r3, #0
 8007646:	d007      	beq.n	8007658 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68da      	ldr	r2, [r3, #12]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f042 0208 	orr.w	r2, r2, #8
 8007656:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800765c:	2b00      	cmp	r3, #0
 800765e:	d007      	beq.n	8007670 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68da      	ldr	r2, [r3, #12]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f042 0220 	orr.w	r2, r2, #32
 800766e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68da      	ldr	r2, [r3, #12]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f042 0201 	orr.w	r2, r2, #1
 800767e:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007688:	d10e      	bne.n	80076a8 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68da      	ldr	r2, [r3, #12]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007698:	60da      	str	r2, [r3, #12]
 800769a:	e005      	b.n	80076a8 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
 80076a4:	2302      	movs	r3, #2
 80076a6:	e000      	b.n	80076aa <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
	...

080076b4 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80076bc:	2300      	movs	r3, #0
 80076be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80076c0:	4b91      	ldr	r3, [pc, #580]	; (8007908 <HAL_MDMA_IRQHandler+0x254>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a91      	ldr	r2, [pc, #580]	; (800790c <HAL_MDMA_IRQHandler+0x258>)
 80076c6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ca:	0a9b      	lsrs	r3, r3, #10
 80076cc:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	461a      	mov	r2, r3
 80076d4:	4b8e      	ldr	r3, [pc, #568]	; (8007910 <HAL_MDMA_IRQHandler+0x25c>)
 80076d6:	4413      	add	r3, r2
 80076d8:	099b      	lsrs	r3, r3, #6
 80076da:	f003 031f 	and.w	r3, r3, #31
 80076de:	2201      	movs	r2, #1
 80076e0:	fa02 f303 	lsl.w	r3, r2, r3
 80076e4:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80076e6:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	4013      	ands	r3, r2
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f000 812d 	beq.w	8007950 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	2b00      	cmp	r3, #0
 8007702:	d054      	beq.n	80077ae <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	f003 0302 	and.w	r3, r3, #2
 800770e:	2b00      	cmp	r3, #0
 8007710:	d04d      	beq.n	80077ae <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68da      	ldr	r2, [r3, #12]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f022 0202 	bic.w	r2, r2, #2
 8007720:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007730:	2b00      	cmp	r3, #0
 8007732:	d106      	bne.n	8007742 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007738:	f043 0201 	orr.w	r2, r3, #1
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	669a      	str	r2, [r3, #104]	; 0x68
 8007740:	e005      	b.n	800774e <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007746:	f043 0202 	orr.w	r2, r3, #2
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007754:	2b00      	cmp	r3, #0
 8007756:	d005      	beq.n	8007764 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800775c:	f043 0204 	orr.w	r2, r3, #4
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800776a:	2b00      	cmp	r3, #0
 800776c:	d005      	beq.n	800777a <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007772:	f043 0208 	orr.w	r2, r3, #8
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007780:	2b00      	cmp	r3, #0
 8007782:	d005      	beq.n	8007790 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007788:	f043 0210 	orr.w	r2, r3, #16
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007796:	2b00      	cmp	r3, #0
 8007798:	d005      	beq.n	80077a6 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800779e:	f043 0220 	orr.w	r2, r3, #32
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2201      	movs	r2, #1
 80077ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0310 	and.w	r3, r3, #16
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d012      	beq.n	80077e2 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	f003 0320 	and.w	r3, r3, #32
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00b      	beq.n	80077e2 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2210      	movs	r2, #16
 80077d0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0308 	and.w	r3, r3, #8
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d012      	beq.n	8007816 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	f003 0310 	and.w	r3, r3, #16
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00b      	beq.n	8007816 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2208      	movs	r2, #8
 8007804:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800780a:	2b00      	cmp	r3, #0
 800780c:	d003      	beq.n	8007816 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0304 	and.w	r3, r3, #4
 8007820:	2b00      	cmp	r3, #0
 8007822:	d012      	beq.n	800784a <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	f003 0308 	and.w	r3, r3, #8
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00b      	beq.n	800784a <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2204      	movs	r2, #4
 8007838:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800783e:	2b00      	cmp	r3, #0
 8007840:	d003      	beq.n	800784a <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0302 	and.w	r3, r3, #2
 8007854:	2b00      	cmp	r3, #0
 8007856:	d039      	beq.n	80078cc <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	f003 0304 	and.w	r3, r3, #4
 8007862:	2b00      	cmp	r3, #0
 8007864:	d032      	beq.n	80078cc <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68da      	ldr	r2, [r3, #12]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8007874:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b04      	cmp	r3, #4
 8007880:	d110      	bne.n	80078a4 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007896:	2b00      	cmp	r3, #0
 8007898:	d05c      	beq.n	8007954 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	4798      	blx	r3
        }
        return;
 80078a2:	e057      	b.n	8007954 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2202      	movs	r2, #2
 80078aa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d003      	beq.n	80078cc <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d040      	beq.n	8007956 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2204      	movs	r2, #4
 80078d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68da      	ldr	r2, [r3, #12]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f022 0201 	bic.w	r2, r2, #1
 80078ea:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	3301      	adds	r3, #1
 80078f0:	60bb      	str	r3, [r7, #8]
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d30d      	bcc.n	8007914 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1f2      	bne.n	80078ec <HAL_MDMA_IRQHandler+0x238>
 8007906:	e006      	b.n	8007916 <HAL_MDMA_IRQHandler+0x262>
 8007908:	24000014 	.word	0x24000014
 800790c:	1b4e81b5 	.word	0x1b4e81b5
 8007910:	adffffc0 	.word	0xadffffc0
        break;
 8007914:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	f003 0301 	and.w	r3, r3, #1
 8007928:	2b00      	cmp	r3, #0
 800792a:	d004      	beq.n	8007936 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2203      	movs	r2, #3
 8007930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007934:	e003      	b.n	800793e <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007942:	2b00      	cmp	r3, #0
 8007944:	d007      	beq.n	8007956 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	4798      	blx	r3
 800794e:	e002      	b.n	8007956 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8007950:	bf00      	nop
 8007952:	e000      	b.n	8007956 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8007954:	bf00      	nop
    }
  }
}
 8007956:	3718      	adds	r7, #24
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800795c:	b480      	push	{r7}
 800795e:	b087      	sub	sp, #28
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
 8007968:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	695a      	ldr	r2, [r3, #20]
 8007970:	4b31      	ldr	r3, [pc, #196]	; (8007a38 <MDMA_SetConfig+0xdc>)
 8007972:	4013      	ands	r3, r2
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	f3c2 0110 	ubfx	r1, r2, #0, #17
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	6812      	ldr	r2, [r2, #0]
 800797e:	430b      	orrs	r3, r1
 8007980:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	695b      	ldr	r3, [r3, #20]
 8007988:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800798c:	6a3b      	ldr	r3, [r7, #32]
 800798e:	3b01      	subs	r3, #1
 8007990:	051a      	lsls	r2, r3, #20
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	430a      	orrs	r2, r1
 8007998:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	221f      	movs	r2, #31
 80079a0:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80079b8:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079c0:	d002      	beq.n	80079c8 <MDMA_SetConfig+0x6c>
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d108      	bne.n	80079da <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80079d6:	629a      	str	r2, [r3, #40]	; 0x28
 80079d8:	e007      	b.n	80079ea <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80079e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80079f0:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079f8:	d002      	beq.n	8007a00 <MDMA_SetConfig+0xa4>
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d108      	bne.n	8007a12 <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007a0e:	629a      	str	r2, [r3, #40]	; 0x28
 8007a10:	e007      	b.n	8007a22 <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007a20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007a2c:	bf00      	nop
 8007a2e:	371c      	adds	r7, #28
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr
 8007a38:	fffe0000 	.word	0xfffe0000

08007a3c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	68d9      	ldr	r1, [r3, #12]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	691a      	ldr	r2, [r3, #16]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	430a      	orrs	r2, r1
 8007a52:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	695a      	ldr	r2, [r3, #20]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007a62:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a1b      	ldr	r3, [r3, #32]
 8007a68:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8007a6e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a74:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8007a7a:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a80:	3b01      	subs	r3, #1
 8007a82:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8007a84:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8007a90:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007a92:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a9c:	d107      	bne.n	8007aae <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	691a      	ldr	r2, [r3, #16]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8007aac:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	da11      	bge.n	8007ae2 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	695a      	ldr	r2, [r3, #20]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007acc:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad2:	425b      	negs	r3, r3
 8007ad4:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	b292      	uxth	r2, r2
 8007ade:	621a      	str	r2, [r3, #32]
 8007ae0:	e006      	b.n	8007af0 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	b292      	uxth	r2, r2
 8007aee:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	da15      	bge.n	8007b24 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	695a      	ldr	r2, [r3, #20]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007b06:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0c:	425b      	negs	r3, r3
 8007b0e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	6a19      	ldr	r1, [r3, #32]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	041a      	lsls	r2, r3, #16
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	621a      	str	r2, [r3, #32]
 8007b22:	e009      	b.n	8007b38 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	6a19      	ldr	r1, [r3, #32]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2e:	041a      	lsls	r2, r3, #16
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	430a      	orrs	r2, r1
 8007b36:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b40:	d006      	beq.n	8007b50 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	685a      	ldr	r2, [r3, #4]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	b2d2      	uxtb	r2, r2
 8007b4c:	629a      	str	r2, [r3, #40]	; 0x28
 8007b4e:	e003      	b.n	8007b58 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2200      	movs	r2, #0
 8007b56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007b60:	bf00      	nop
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007b74:	4b19      	ldr	r3, [pc, #100]	; (8007bdc <HAL_PWREx_ConfigSupply+0x70>)
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	f003 0304 	and.w	r3, r3, #4
 8007b7c:	2b04      	cmp	r3, #4
 8007b7e:	d00a      	beq.n	8007b96 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007b80:	4b16      	ldr	r3, [pc, #88]	; (8007bdc <HAL_PWREx_ConfigSupply+0x70>)
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	f003 0307 	and.w	r3, r3, #7
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d001      	beq.n	8007b92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e01f      	b.n	8007bd2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	e01d      	b.n	8007bd2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007b96:	4b11      	ldr	r3, [pc, #68]	; (8007bdc <HAL_PWREx_ConfigSupply+0x70>)
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	f023 0207 	bic.w	r2, r3, #7
 8007b9e:	490f      	ldr	r1, [pc, #60]	; (8007bdc <HAL_PWREx_ConfigSupply+0x70>)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007ba6:	f7fc f979 	bl	8003e9c <HAL_GetTick>
 8007baa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007bac:	e009      	b.n	8007bc2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007bae:	f7fc f975 	bl	8003e9c <HAL_GetTick>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	1ad3      	subs	r3, r2, r3
 8007bb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bbc:	d901      	bls.n	8007bc2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e007      	b.n	8007bd2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007bc2:	4b06      	ldr	r3, [pc, #24]	; (8007bdc <HAL_PWREx_ConfigSupply+0x70>)
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bce:	d1ee      	bne.n	8007bae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	58024800 	.word	0x58024800

08007be0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b08c      	sub	sp, #48	; 0x30
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d102      	bne.n	8007bf4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	f000 bc48 	b.w	8008484 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0301 	and.w	r3, r3, #1
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f000 8088 	beq.w	8007d12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c02:	4b99      	ldr	r3, [pc, #612]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c0c:	4b96      	ldr	r3, [pc, #600]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c10:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c14:	2b10      	cmp	r3, #16
 8007c16:	d007      	beq.n	8007c28 <HAL_RCC_OscConfig+0x48>
 8007c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1a:	2b18      	cmp	r3, #24
 8007c1c:	d111      	bne.n	8007c42 <HAL_RCC_OscConfig+0x62>
 8007c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c20:	f003 0303 	and.w	r3, r3, #3
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d10c      	bne.n	8007c42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c28:	4b8f      	ldr	r3, [pc, #572]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d06d      	beq.n	8007d10 <HAL_RCC_OscConfig+0x130>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d169      	bne.n	8007d10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	f000 bc21 	b.w	8008484 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c4a:	d106      	bne.n	8007c5a <HAL_RCC_OscConfig+0x7a>
 8007c4c:	4b86      	ldr	r3, [pc, #536]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a85      	ldr	r2, [pc, #532]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c56:	6013      	str	r3, [r2, #0]
 8007c58:	e02e      	b.n	8007cb8 <HAL_RCC_OscConfig+0xd8>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10c      	bne.n	8007c7c <HAL_RCC_OscConfig+0x9c>
 8007c62:	4b81      	ldr	r3, [pc, #516]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a80      	ldr	r2, [pc, #512]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c6c:	6013      	str	r3, [r2, #0]
 8007c6e:	4b7e      	ldr	r3, [pc, #504]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a7d      	ldr	r2, [pc, #500]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007c74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c78:	6013      	str	r3, [r2, #0]
 8007c7a:	e01d      	b.n	8007cb8 <HAL_RCC_OscConfig+0xd8>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c84:	d10c      	bne.n	8007ca0 <HAL_RCC_OscConfig+0xc0>
 8007c86:	4b78      	ldr	r3, [pc, #480]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a77      	ldr	r2, [pc, #476]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c90:	6013      	str	r3, [r2, #0]
 8007c92:	4b75      	ldr	r3, [pc, #468]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a74      	ldr	r2, [pc, #464]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c9c:	6013      	str	r3, [r2, #0]
 8007c9e:	e00b      	b.n	8007cb8 <HAL_RCC_OscConfig+0xd8>
 8007ca0:	4b71      	ldr	r3, [pc, #452]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a70      	ldr	r2, [pc, #448]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007caa:	6013      	str	r3, [r2, #0]
 8007cac:	4b6e      	ldr	r3, [pc, #440]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a6d      	ldr	r2, [pc, #436]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d013      	beq.n	8007ce8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cc0:	f7fc f8ec 	bl	8003e9c <HAL_GetTick>
 8007cc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007cc6:	e008      	b.n	8007cda <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cc8:	f7fc f8e8 	bl	8003e9c <HAL_GetTick>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	2b64      	cmp	r3, #100	; 0x64
 8007cd4:	d901      	bls.n	8007cda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	e3d4      	b.n	8008484 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007cda:	4b63      	ldr	r3, [pc, #396]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d0f0      	beq.n	8007cc8 <HAL_RCC_OscConfig+0xe8>
 8007ce6:	e014      	b.n	8007d12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ce8:	f7fc f8d8 	bl	8003e9c <HAL_GetTick>
 8007cec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007cee:	e008      	b.n	8007d02 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cf0:	f7fc f8d4 	bl	8003e9c <HAL_GetTick>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	2b64      	cmp	r3, #100	; 0x64
 8007cfc:	d901      	bls.n	8007d02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e3c0      	b.n	8008484 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007d02:	4b59      	ldr	r3, [pc, #356]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1f0      	bne.n	8007cf0 <HAL_RCC_OscConfig+0x110>
 8007d0e:	e000      	b.n	8007d12 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0302 	and.w	r3, r3, #2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 80ca 	beq.w	8007eb4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d20:	4b51      	ldr	r3, [pc, #324]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d28:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d2a:	4b4f      	ldr	r3, [pc, #316]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007d30:	6a3b      	ldr	r3, [r7, #32]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d007      	beq.n	8007d46 <HAL_RCC_OscConfig+0x166>
 8007d36:	6a3b      	ldr	r3, [r7, #32]
 8007d38:	2b18      	cmp	r3, #24
 8007d3a:	d156      	bne.n	8007dea <HAL_RCC_OscConfig+0x20a>
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	f003 0303 	and.w	r3, r3, #3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d151      	bne.n	8007dea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d46:	4b48      	ldr	r3, [pc, #288]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 0304 	and.w	r3, r3, #4
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d005      	beq.n	8007d5e <HAL_RCC_OscConfig+0x17e>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d101      	bne.n	8007d5e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e392      	b.n	8008484 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007d5e:	4b42      	ldr	r3, [pc, #264]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f023 0219 	bic.w	r2, r3, #25
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	493f      	ldr	r1, [pc, #252]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d70:	f7fc f894 	bl	8003e9c <HAL_GetTick>
 8007d74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d76:	e008      	b.n	8007d8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d78:	f7fc f890 	bl	8003e9c <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d901      	bls.n	8007d8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e37c      	b.n	8008484 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d8a:	4b37      	ldr	r3, [pc, #220]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0304 	and.w	r3, r3, #4
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d0f0      	beq.n	8007d78 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d96:	f7fc f8b1 	bl	8003efc <HAL_GetREVID>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d817      	bhi.n	8007dd4 <HAL_RCC_OscConfig+0x1f4>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	2b40      	cmp	r3, #64	; 0x40
 8007daa:	d108      	bne.n	8007dbe <HAL_RCC_OscConfig+0x1de>
 8007dac:	4b2e      	ldr	r3, [pc, #184]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007db4:	4a2c      	ldr	r2, [pc, #176]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007dbc:	e07a      	b.n	8007eb4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dbe:	4b2a      	ldr	r3, [pc, #168]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	031b      	lsls	r3, r3, #12
 8007dcc:	4926      	ldr	r1, [pc, #152]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007dd2:	e06f      	b.n	8007eb4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dd4:	4b24      	ldr	r3, [pc, #144]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	061b      	lsls	r3, r3, #24
 8007de2:	4921      	ldr	r1, [pc, #132]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007de4:	4313      	orrs	r3, r2
 8007de6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007de8:	e064      	b.n	8007eb4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d047      	beq.n	8007e82 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007df2:	4b1d      	ldr	r3, [pc, #116]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f023 0219 	bic.w	r2, r3, #25
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	491a      	ldr	r1, [pc, #104]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007e00:	4313      	orrs	r3, r2
 8007e02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e04:	f7fc f84a 	bl	8003e9c <HAL_GetTick>
 8007e08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e0a:	e008      	b.n	8007e1e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e0c:	f7fc f846 	bl	8003e9c <HAL_GetTick>
 8007e10:	4602      	mov	r2, r0
 8007e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d901      	bls.n	8007e1e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e332      	b.n	8008484 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e1e:	4b12      	ldr	r3, [pc, #72]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0304 	and.w	r3, r3, #4
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d0f0      	beq.n	8007e0c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e2a:	f7fc f867 	bl	8003efc <HAL_GetREVID>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	f241 0203 	movw	r2, #4099	; 0x1003
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d819      	bhi.n	8007e6c <HAL_RCC_OscConfig+0x28c>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	2b40      	cmp	r3, #64	; 0x40
 8007e3e:	d108      	bne.n	8007e52 <HAL_RCC_OscConfig+0x272>
 8007e40:	4b09      	ldr	r3, [pc, #36]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007e48:	4a07      	ldr	r2, [pc, #28]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e4e:	6053      	str	r3, [r2, #4]
 8007e50:	e030      	b.n	8007eb4 <HAL_RCC_OscConfig+0x2d4>
 8007e52:	4b05      	ldr	r3, [pc, #20]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	031b      	lsls	r3, r3, #12
 8007e60:	4901      	ldr	r1, [pc, #4]	; (8007e68 <HAL_RCC_OscConfig+0x288>)
 8007e62:	4313      	orrs	r3, r2
 8007e64:	604b      	str	r3, [r1, #4]
 8007e66:	e025      	b.n	8007eb4 <HAL_RCC_OscConfig+0x2d4>
 8007e68:	58024400 	.word	0x58024400
 8007e6c:	4b9a      	ldr	r3, [pc, #616]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	061b      	lsls	r3, r3, #24
 8007e7a:	4997      	ldr	r1, [pc, #604]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	604b      	str	r3, [r1, #4]
 8007e80:	e018      	b.n	8007eb4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e82:	4b95      	ldr	r3, [pc, #596]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a94      	ldr	r2, [pc, #592]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8007e88:	f023 0301 	bic.w	r3, r3, #1
 8007e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e8e:	f7fc f805 	bl	8003e9c <HAL_GetTick>
 8007e92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007e94:	e008      	b.n	8007ea8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e96:	f7fc f801 	bl	8003e9c <HAL_GetTick>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	1ad3      	subs	r3, r2, r3
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d901      	bls.n	8007ea8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e2ed      	b.n	8008484 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007ea8:	4b8b      	ldr	r3, [pc, #556]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0304 	and.w	r3, r3, #4
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1f0      	bne.n	8007e96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 0310 	and.w	r3, r3, #16
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f000 80a9 	beq.w	8008014 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ec2:	4b85      	ldr	r3, [pc, #532]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007eca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ecc:	4b82      	ldr	r3, [pc, #520]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8007ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	2b08      	cmp	r3, #8
 8007ed6:	d007      	beq.n	8007ee8 <HAL_RCC_OscConfig+0x308>
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	2b18      	cmp	r3, #24
 8007edc:	d13a      	bne.n	8007f54 <HAL_RCC_OscConfig+0x374>
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	f003 0303 	and.w	r3, r3, #3
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d135      	bne.n	8007f54 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007ee8:	4b7b      	ldr	r3, [pc, #492]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d005      	beq.n	8007f00 <HAL_RCC_OscConfig+0x320>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	69db      	ldr	r3, [r3, #28]
 8007ef8:	2b80      	cmp	r3, #128	; 0x80
 8007efa:	d001      	beq.n	8007f00 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e2c1      	b.n	8008484 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007f00:	f7fb fffc 	bl	8003efc <HAL_GetREVID>
 8007f04:	4603      	mov	r3, r0
 8007f06:	f241 0203 	movw	r2, #4099	; 0x1003
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d817      	bhi.n	8007f3e <HAL_RCC_OscConfig+0x35e>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	2b20      	cmp	r3, #32
 8007f14:	d108      	bne.n	8007f28 <HAL_RCC_OscConfig+0x348>
 8007f16:	4b70      	ldr	r3, [pc, #448]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007f1e:	4a6e      	ldr	r2, [pc, #440]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8007f20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f24:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f26:	e075      	b.n	8008014 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007f28:	4b6b      	ldr	r3, [pc, #428]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a1b      	ldr	r3, [r3, #32]
 8007f34:	069b      	lsls	r3, r3, #26
 8007f36:	4968      	ldr	r1, [pc, #416]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f3c:	e06a      	b.n	8008014 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007f3e:	4b66      	ldr	r3, [pc, #408]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	061b      	lsls	r3, r3, #24
 8007f4c:	4962      	ldr	r1, [pc, #392]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f52:	e05f      	b.n	8008014 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	69db      	ldr	r3, [r3, #28]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d042      	beq.n	8007fe2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007f5c:	4b5e      	ldr	r3, [pc, #376]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a5d      	ldr	r2, [pc, #372]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8007f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f68:	f7fb ff98 	bl	8003e9c <HAL_GetTick>
 8007f6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007f6e:	e008      	b.n	8007f82 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007f70:	f7fb ff94 	bl	8003e9c <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d901      	bls.n	8007f82 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e280      	b.n	8008484 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007f82:	4b55      	ldr	r3, [pc, #340]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d0f0      	beq.n	8007f70 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007f8e:	f7fb ffb5 	bl	8003efc <HAL_GetREVID>
 8007f92:	4603      	mov	r3, r0
 8007f94:	f241 0203 	movw	r2, #4099	; 0x1003
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d817      	bhi.n	8007fcc <HAL_RCC_OscConfig+0x3ec>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6a1b      	ldr	r3, [r3, #32]
 8007fa0:	2b20      	cmp	r3, #32
 8007fa2:	d108      	bne.n	8007fb6 <HAL_RCC_OscConfig+0x3d6>
 8007fa4:	4b4c      	ldr	r3, [pc, #304]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007fac:	4a4a      	ldr	r2, [pc, #296]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8007fae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fb2:	6053      	str	r3, [r2, #4]
 8007fb4:	e02e      	b.n	8008014 <HAL_RCC_OscConfig+0x434>
 8007fb6:	4b48      	ldr	r3, [pc, #288]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a1b      	ldr	r3, [r3, #32]
 8007fc2:	069b      	lsls	r3, r3, #26
 8007fc4:	4944      	ldr	r1, [pc, #272]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	604b      	str	r3, [r1, #4]
 8007fca:	e023      	b.n	8008014 <HAL_RCC_OscConfig+0x434>
 8007fcc:	4b42      	ldr	r3, [pc, #264]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a1b      	ldr	r3, [r3, #32]
 8007fd8:	061b      	lsls	r3, r3, #24
 8007fda:	493f      	ldr	r1, [pc, #252]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	60cb      	str	r3, [r1, #12]
 8007fe0:	e018      	b.n	8008014 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007fe2:	4b3d      	ldr	r3, [pc, #244]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a3c      	ldr	r2, [pc, #240]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8007fe8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fee:	f7fb ff55 	bl	8003e9c <HAL_GetTick>
 8007ff2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007ff4:	e008      	b.n	8008008 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007ff6:	f7fb ff51 	bl	8003e9c <HAL_GetTick>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	2b02      	cmp	r3, #2
 8008002:	d901      	bls.n	8008008 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008004:	2303      	movs	r3, #3
 8008006:	e23d      	b.n	8008484 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008008:	4b33      	ldr	r3, [pc, #204]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1f0      	bne.n	8007ff6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 0308 	and.w	r3, r3, #8
 800801c:	2b00      	cmp	r3, #0
 800801e:	d036      	beq.n	800808e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	695b      	ldr	r3, [r3, #20]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d019      	beq.n	800805c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008028:	4b2b      	ldr	r3, [pc, #172]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 800802a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800802c:	4a2a      	ldr	r2, [pc, #168]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 800802e:	f043 0301 	orr.w	r3, r3, #1
 8008032:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008034:	f7fb ff32 	bl	8003e9c <HAL_GetTick>
 8008038:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800803a:	e008      	b.n	800804e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800803c:	f7fb ff2e 	bl	8003e9c <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	2b02      	cmp	r3, #2
 8008048:	d901      	bls.n	800804e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e21a      	b.n	8008484 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800804e:	4b22      	ldr	r3, [pc, #136]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8008050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008052:	f003 0302 	and.w	r3, r3, #2
 8008056:	2b00      	cmp	r3, #0
 8008058:	d0f0      	beq.n	800803c <HAL_RCC_OscConfig+0x45c>
 800805a:	e018      	b.n	800808e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800805c:	4b1e      	ldr	r3, [pc, #120]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 800805e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008060:	4a1d      	ldr	r2, [pc, #116]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8008062:	f023 0301 	bic.w	r3, r3, #1
 8008066:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008068:	f7fb ff18 	bl	8003e9c <HAL_GetTick>
 800806c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800806e:	e008      	b.n	8008082 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008070:	f7fb ff14 	bl	8003e9c <HAL_GetTick>
 8008074:	4602      	mov	r2, r0
 8008076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	2b02      	cmp	r3, #2
 800807c:	d901      	bls.n	8008082 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e200      	b.n	8008484 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008082:	4b15      	ldr	r3, [pc, #84]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 8008084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008086:	f003 0302 	and.w	r3, r3, #2
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1f0      	bne.n	8008070 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0320 	and.w	r3, r3, #32
 8008096:	2b00      	cmp	r3, #0
 8008098:	d039      	beq.n	800810e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	699b      	ldr	r3, [r3, #24]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d01c      	beq.n	80080dc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80080a2:	4b0d      	ldr	r3, [pc, #52]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a0c      	ldr	r2, [pc, #48]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 80080a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80080ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80080ae:	f7fb fef5 	bl	8003e9c <HAL_GetTick>
 80080b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80080b4:	e008      	b.n	80080c8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80080b6:	f7fb fef1 	bl	8003e9c <HAL_GetTick>
 80080ba:	4602      	mov	r2, r0
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d901      	bls.n	80080c8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80080c4:	2303      	movs	r3, #3
 80080c6:	e1dd      	b.n	8008484 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80080c8:	4b03      	ldr	r3, [pc, #12]	; (80080d8 <HAL_RCC_OscConfig+0x4f8>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d0f0      	beq.n	80080b6 <HAL_RCC_OscConfig+0x4d6>
 80080d4:	e01b      	b.n	800810e <HAL_RCC_OscConfig+0x52e>
 80080d6:	bf00      	nop
 80080d8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80080dc:	4b9b      	ldr	r3, [pc, #620]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a9a      	ldr	r2, [pc, #616]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 80080e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80080e8:	f7fb fed8 	bl	8003e9c <HAL_GetTick>
 80080ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80080ee:	e008      	b.n	8008102 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80080f0:	f7fb fed4 	bl	8003e9c <HAL_GetTick>
 80080f4:	4602      	mov	r2, r0
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d901      	bls.n	8008102 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e1c0      	b.n	8008484 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008102:	4b92      	ldr	r3, [pc, #584]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1f0      	bne.n	80080f0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 0304 	and.w	r3, r3, #4
 8008116:	2b00      	cmp	r3, #0
 8008118:	f000 8081 	beq.w	800821e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800811c:	4b8c      	ldr	r3, [pc, #560]	; (8008350 <HAL_RCC_OscConfig+0x770>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a8b      	ldr	r2, [pc, #556]	; (8008350 <HAL_RCC_OscConfig+0x770>)
 8008122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008126:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008128:	f7fb feb8 	bl	8003e9c <HAL_GetTick>
 800812c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800812e:	e008      	b.n	8008142 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008130:	f7fb feb4 	bl	8003e9c <HAL_GetTick>
 8008134:	4602      	mov	r2, r0
 8008136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	2b64      	cmp	r3, #100	; 0x64
 800813c:	d901      	bls.n	8008142 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e1a0      	b.n	8008484 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008142:	4b83      	ldr	r3, [pc, #524]	; (8008350 <HAL_RCC_OscConfig+0x770>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800814a:	2b00      	cmp	r3, #0
 800814c:	d0f0      	beq.n	8008130 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	2b01      	cmp	r3, #1
 8008154:	d106      	bne.n	8008164 <HAL_RCC_OscConfig+0x584>
 8008156:	4b7d      	ldr	r3, [pc, #500]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 8008158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800815a:	4a7c      	ldr	r2, [pc, #496]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 800815c:	f043 0301 	orr.w	r3, r3, #1
 8008160:	6713      	str	r3, [r2, #112]	; 0x70
 8008162:	e02d      	b.n	80081c0 <HAL_RCC_OscConfig+0x5e0>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10c      	bne.n	8008186 <HAL_RCC_OscConfig+0x5a6>
 800816c:	4b77      	ldr	r3, [pc, #476]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 800816e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008170:	4a76      	ldr	r2, [pc, #472]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 8008172:	f023 0301 	bic.w	r3, r3, #1
 8008176:	6713      	str	r3, [r2, #112]	; 0x70
 8008178:	4b74      	ldr	r3, [pc, #464]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 800817a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800817c:	4a73      	ldr	r2, [pc, #460]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 800817e:	f023 0304 	bic.w	r3, r3, #4
 8008182:	6713      	str	r3, [r2, #112]	; 0x70
 8008184:	e01c      	b.n	80081c0 <HAL_RCC_OscConfig+0x5e0>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	2b05      	cmp	r3, #5
 800818c:	d10c      	bne.n	80081a8 <HAL_RCC_OscConfig+0x5c8>
 800818e:	4b6f      	ldr	r3, [pc, #444]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 8008190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008192:	4a6e      	ldr	r2, [pc, #440]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 8008194:	f043 0304 	orr.w	r3, r3, #4
 8008198:	6713      	str	r3, [r2, #112]	; 0x70
 800819a:	4b6c      	ldr	r3, [pc, #432]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 800819c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800819e:	4a6b      	ldr	r2, [pc, #428]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 80081a0:	f043 0301 	orr.w	r3, r3, #1
 80081a4:	6713      	str	r3, [r2, #112]	; 0x70
 80081a6:	e00b      	b.n	80081c0 <HAL_RCC_OscConfig+0x5e0>
 80081a8:	4b68      	ldr	r3, [pc, #416]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 80081aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ac:	4a67      	ldr	r2, [pc, #412]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 80081ae:	f023 0301 	bic.w	r3, r3, #1
 80081b2:	6713      	str	r3, [r2, #112]	; 0x70
 80081b4:	4b65      	ldr	r3, [pc, #404]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 80081b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b8:	4a64      	ldr	r2, [pc, #400]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 80081ba:	f023 0304 	bic.w	r3, r3, #4
 80081be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d015      	beq.n	80081f4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081c8:	f7fb fe68 	bl	8003e9c <HAL_GetTick>
 80081cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081ce:	e00a      	b.n	80081e6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081d0:	f7fb fe64 	bl	8003e9c <HAL_GetTick>
 80081d4:	4602      	mov	r2, r0
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	f241 3288 	movw	r2, #5000	; 0x1388
 80081de:	4293      	cmp	r3, r2
 80081e0:	d901      	bls.n	80081e6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80081e2:	2303      	movs	r3, #3
 80081e4:	e14e      	b.n	8008484 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081e6:	4b59      	ldr	r3, [pc, #356]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 80081e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ea:	f003 0302 	and.w	r3, r3, #2
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d0ee      	beq.n	80081d0 <HAL_RCC_OscConfig+0x5f0>
 80081f2:	e014      	b.n	800821e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081f4:	f7fb fe52 	bl	8003e9c <HAL_GetTick>
 80081f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80081fa:	e00a      	b.n	8008212 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081fc:	f7fb fe4e 	bl	8003e9c <HAL_GetTick>
 8008200:	4602      	mov	r2, r0
 8008202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	f241 3288 	movw	r2, #5000	; 0x1388
 800820a:	4293      	cmp	r3, r2
 800820c:	d901      	bls.n	8008212 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e138      	b.n	8008484 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008212:	4b4e      	ldr	r3, [pc, #312]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 8008214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008216:	f003 0302 	and.w	r3, r3, #2
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1ee      	bne.n	80081fc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008222:	2b00      	cmp	r3, #0
 8008224:	f000 812d 	beq.w	8008482 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008228:	4b48      	ldr	r3, [pc, #288]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008230:	2b18      	cmp	r3, #24
 8008232:	f000 80bd 	beq.w	80083b0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823a:	2b02      	cmp	r3, #2
 800823c:	f040 809e 	bne.w	800837c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008240:	4b42      	ldr	r3, [pc, #264]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a41      	ldr	r2, [pc, #260]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 8008246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800824a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800824c:	f7fb fe26 	bl	8003e9c <HAL_GetTick>
 8008250:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008252:	e008      	b.n	8008266 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008254:	f7fb fe22 	bl	8003e9c <HAL_GetTick>
 8008258:	4602      	mov	r2, r0
 800825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825c:	1ad3      	subs	r3, r2, r3
 800825e:	2b02      	cmp	r3, #2
 8008260:	d901      	bls.n	8008266 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008262:	2303      	movs	r3, #3
 8008264:	e10e      	b.n	8008484 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008266:	4b39      	ldr	r3, [pc, #228]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1f0      	bne.n	8008254 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008272:	4b36      	ldr	r3, [pc, #216]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 8008274:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008276:	4b37      	ldr	r3, [pc, #220]	; (8008354 <HAL_RCC_OscConfig+0x774>)
 8008278:	4013      	ands	r3, r2
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008282:	0112      	lsls	r2, r2, #4
 8008284:	430a      	orrs	r2, r1
 8008286:	4931      	ldr	r1, [pc, #196]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 8008288:	4313      	orrs	r3, r2
 800828a:	628b      	str	r3, [r1, #40]	; 0x28
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008290:	3b01      	subs	r3, #1
 8008292:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800829a:	3b01      	subs	r3, #1
 800829c:	025b      	lsls	r3, r3, #9
 800829e:	b29b      	uxth	r3, r3
 80082a0:	431a      	orrs	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a6:	3b01      	subs	r3, #1
 80082a8:	041b      	lsls	r3, r3, #16
 80082aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80082ae:	431a      	orrs	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082b4:	3b01      	subs	r3, #1
 80082b6:	061b      	lsls	r3, r3, #24
 80082b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80082bc:	4923      	ldr	r1, [pc, #140]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 80082be:	4313      	orrs	r3, r2
 80082c0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80082c2:	4b22      	ldr	r3, [pc, #136]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 80082c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c6:	4a21      	ldr	r2, [pc, #132]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 80082c8:	f023 0301 	bic.w	r3, r3, #1
 80082cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80082ce:	4b1f      	ldr	r3, [pc, #124]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 80082d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082d2:	4b21      	ldr	r3, [pc, #132]	; (8008358 <HAL_RCC_OscConfig+0x778>)
 80082d4:	4013      	ands	r3, r2
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80082da:	00d2      	lsls	r2, r2, #3
 80082dc:	491b      	ldr	r1, [pc, #108]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 80082de:	4313      	orrs	r3, r2
 80082e0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80082e2:	4b1a      	ldr	r3, [pc, #104]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 80082e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e6:	f023 020c 	bic.w	r2, r3, #12
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ee:	4917      	ldr	r1, [pc, #92]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 80082f0:	4313      	orrs	r3, r2
 80082f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80082f4:	4b15      	ldr	r3, [pc, #84]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 80082f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f8:	f023 0202 	bic.w	r2, r3, #2
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008300:	4912      	ldr	r1, [pc, #72]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 8008302:	4313      	orrs	r3, r2
 8008304:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008306:	4b11      	ldr	r3, [pc, #68]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 8008308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830a:	4a10      	ldr	r2, [pc, #64]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 800830c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008310:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008312:	4b0e      	ldr	r3, [pc, #56]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 8008314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008316:	4a0d      	ldr	r2, [pc, #52]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 8008318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800831c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800831e:	4b0b      	ldr	r3, [pc, #44]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 8008320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008322:	4a0a      	ldr	r2, [pc, #40]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 8008324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008328:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800832a:	4b08      	ldr	r3, [pc, #32]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 800832c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832e:	4a07      	ldr	r2, [pc, #28]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 8008330:	f043 0301 	orr.w	r3, r3, #1
 8008334:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008336:	4b05      	ldr	r3, [pc, #20]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a04      	ldr	r2, [pc, #16]	; (800834c <HAL_RCC_OscConfig+0x76c>)
 800833c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008342:	f7fb fdab 	bl	8003e9c <HAL_GetTick>
 8008346:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008348:	e011      	b.n	800836e <HAL_RCC_OscConfig+0x78e>
 800834a:	bf00      	nop
 800834c:	58024400 	.word	0x58024400
 8008350:	58024800 	.word	0x58024800
 8008354:	fffffc0c 	.word	0xfffffc0c
 8008358:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800835c:	f7fb fd9e 	bl	8003e9c <HAL_GetTick>
 8008360:	4602      	mov	r2, r0
 8008362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	2b02      	cmp	r3, #2
 8008368:	d901      	bls.n	800836e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800836a:	2303      	movs	r3, #3
 800836c:	e08a      	b.n	8008484 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800836e:	4b47      	ldr	r3, [pc, #284]	; (800848c <HAL_RCC_OscConfig+0x8ac>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008376:	2b00      	cmp	r3, #0
 8008378:	d0f0      	beq.n	800835c <HAL_RCC_OscConfig+0x77c>
 800837a:	e082      	b.n	8008482 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800837c:	4b43      	ldr	r3, [pc, #268]	; (800848c <HAL_RCC_OscConfig+0x8ac>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a42      	ldr	r2, [pc, #264]	; (800848c <HAL_RCC_OscConfig+0x8ac>)
 8008382:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008388:	f7fb fd88 	bl	8003e9c <HAL_GetTick>
 800838c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800838e:	e008      	b.n	80083a2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008390:	f7fb fd84 	bl	8003e9c <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	2b02      	cmp	r3, #2
 800839c:	d901      	bls.n	80083a2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	e070      	b.n	8008484 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083a2:	4b3a      	ldr	r3, [pc, #232]	; (800848c <HAL_RCC_OscConfig+0x8ac>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1f0      	bne.n	8008390 <HAL_RCC_OscConfig+0x7b0>
 80083ae:	e068      	b.n	8008482 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80083b0:	4b36      	ldr	r3, [pc, #216]	; (800848c <HAL_RCC_OscConfig+0x8ac>)
 80083b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80083b6:	4b35      	ldr	r3, [pc, #212]	; (800848c <HAL_RCC_OscConfig+0x8ac>)
 80083b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d031      	beq.n	8008428 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	f003 0203 	and.w	r2, r3, #3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d12a      	bne.n	8008428 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	091b      	lsrs	r3, r3, #4
 80083d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083de:	429a      	cmp	r2, r3
 80083e0:	d122      	bne.n	8008428 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d11a      	bne.n	8008428 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	0a5b      	lsrs	r3, r3, #9
 80083f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008400:	429a      	cmp	r2, r3
 8008402:	d111      	bne.n	8008428 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	0c1b      	lsrs	r3, r3, #16
 8008408:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008410:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008412:	429a      	cmp	r2, r3
 8008414:	d108      	bne.n	8008428 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	0e1b      	lsrs	r3, r3, #24
 800841a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008422:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008424:	429a      	cmp	r2, r3
 8008426:	d001      	beq.n	800842c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	e02b      	b.n	8008484 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800842c:	4b17      	ldr	r3, [pc, #92]	; (800848c <HAL_RCC_OscConfig+0x8ac>)
 800842e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008430:	08db      	lsrs	r3, r3, #3
 8008432:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008436:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	429a      	cmp	r2, r3
 8008440:	d01f      	beq.n	8008482 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008442:	4b12      	ldr	r3, [pc, #72]	; (800848c <HAL_RCC_OscConfig+0x8ac>)
 8008444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008446:	4a11      	ldr	r2, [pc, #68]	; (800848c <HAL_RCC_OscConfig+0x8ac>)
 8008448:	f023 0301 	bic.w	r3, r3, #1
 800844c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800844e:	f7fb fd25 	bl	8003e9c <HAL_GetTick>
 8008452:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008454:	bf00      	nop
 8008456:	f7fb fd21 	bl	8003e9c <HAL_GetTick>
 800845a:	4602      	mov	r2, r0
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	4293      	cmp	r3, r2
 8008460:	d0f9      	beq.n	8008456 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008462:	4b0a      	ldr	r3, [pc, #40]	; (800848c <HAL_RCC_OscConfig+0x8ac>)
 8008464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008466:	4b0a      	ldr	r3, [pc, #40]	; (8008490 <HAL_RCC_OscConfig+0x8b0>)
 8008468:	4013      	ands	r3, r2
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800846e:	00d2      	lsls	r2, r2, #3
 8008470:	4906      	ldr	r1, [pc, #24]	; (800848c <HAL_RCC_OscConfig+0x8ac>)
 8008472:	4313      	orrs	r3, r2
 8008474:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008476:	4b05      	ldr	r3, [pc, #20]	; (800848c <HAL_RCC_OscConfig+0x8ac>)
 8008478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847a:	4a04      	ldr	r2, [pc, #16]	; (800848c <HAL_RCC_OscConfig+0x8ac>)
 800847c:	f043 0301 	orr.w	r3, r3, #1
 8008480:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3730      	adds	r7, #48	; 0x30
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	58024400 	.word	0x58024400
 8008490:	ffff0007 	.word	0xffff0007

08008494 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b086      	sub	sp, #24
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d101      	bne.n	80084a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	e19c      	b.n	80087e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80084a8:	4b8a      	ldr	r3, [pc, #552]	; (80086d4 <HAL_RCC_ClockConfig+0x240>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 030f 	and.w	r3, r3, #15
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d910      	bls.n	80084d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084b6:	4b87      	ldr	r3, [pc, #540]	; (80086d4 <HAL_RCC_ClockConfig+0x240>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f023 020f 	bic.w	r2, r3, #15
 80084be:	4985      	ldr	r1, [pc, #532]	; (80086d4 <HAL_RCC_ClockConfig+0x240>)
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084c6:	4b83      	ldr	r3, [pc, #524]	; (80086d4 <HAL_RCC_ClockConfig+0x240>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 030f 	and.w	r3, r3, #15
 80084ce:	683a      	ldr	r2, [r7, #0]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d001      	beq.n	80084d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e184      	b.n	80087e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 0304 	and.w	r3, r3, #4
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d010      	beq.n	8008506 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	691a      	ldr	r2, [r3, #16]
 80084e8:	4b7b      	ldr	r3, [pc, #492]	; (80086d8 <HAL_RCC_ClockConfig+0x244>)
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d908      	bls.n	8008506 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80084f4:	4b78      	ldr	r3, [pc, #480]	; (80086d8 <HAL_RCC_ClockConfig+0x244>)
 80084f6:	699b      	ldr	r3, [r3, #24]
 80084f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	4975      	ldr	r1, [pc, #468]	; (80086d8 <HAL_RCC_ClockConfig+0x244>)
 8008502:	4313      	orrs	r3, r2
 8008504:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0308 	and.w	r3, r3, #8
 800850e:	2b00      	cmp	r3, #0
 8008510:	d010      	beq.n	8008534 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	695a      	ldr	r2, [r3, #20]
 8008516:	4b70      	ldr	r3, [pc, #448]	; (80086d8 <HAL_RCC_ClockConfig+0x244>)
 8008518:	69db      	ldr	r3, [r3, #28]
 800851a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800851e:	429a      	cmp	r2, r3
 8008520:	d908      	bls.n	8008534 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008522:	4b6d      	ldr	r3, [pc, #436]	; (80086d8 <HAL_RCC_ClockConfig+0x244>)
 8008524:	69db      	ldr	r3, [r3, #28]
 8008526:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	695b      	ldr	r3, [r3, #20]
 800852e:	496a      	ldr	r1, [pc, #424]	; (80086d8 <HAL_RCC_ClockConfig+0x244>)
 8008530:	4313      	orrs	r3, r2
 8008532:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f003 0310 	and.w	r3, r3, #16
 800853c:	2b00      	cmp	r3, #0
 800853e:	d010      	beq.n	8008562 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	699a      	ldr	r2, [r3, #24]
 8008544:	4b64      	ldr	r3, [pc, #400]	; (80086d8 <HAL_RCC_ClockConfig+0x244>)
 8008546:	69db      	ldr	r3, [r3, #28]
 8008548:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800854c:	429a      	cmp	r2, r3
 800854e:	d908      	bls.n	8008562 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008550:	4b61      	ldr	r3, [pc, #388]	; (80086d8 <HAL_RCC_ClockConfig+0x244>)
 8008552:	69db      	ldr	r3, [r3, #28]
 8008554:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	495e      	ldr	r1, [pc, #376]	; (80086d8 <HAL_RCC_ClockConfig+0x244>)
 800855e:	4313      	orrs	r3, r2
 8008560:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f003 0320 	and.w	r3, r3, #32
 800856a:	2b00      	cmp	r3, #0
 800856c:	d010      	beq.n	8008590 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	69da      	ldr	r2, [r3, #28]
 8008572:	4b59      	ldr	r3, [pc, #356]	; (80086d8 <HAL_RCC_ClockConfig+0x244>)
 8008574:	6a1b      	ldr	r3, [r3, #32]
 8008576:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800857a:	429a      	cmp	r2, r3
 800857c:	d908      	bls.n	8008590 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800857e:	4b56      	ldr	r3, [pc, #344]	; (80086d8 <HAL_RCC_ClockConfig+0x244>)
 8008580:	6a1b      	ldr	r3, [r3, #32]
 8008582:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	69db      	ldr	r3, [r3, #28]
 800858a:	4953      	ldr	r1, [pc, #332]	; (80086d8 <HAL_RCC_ClockConfig+0x244>)
 800858c:	4313      	orrs	r3, r2
 800858e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 0302 	and.w	r3, r3, #2
 8008598:	2b00      	cmp	r3, #0
 800859a:	d010      	beq.n	80085be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	68da      	ldr	r2, [r3, #12]
 80085a0:	4b4d      	ldr	r3, [pc, #308]	; (80086d8 <HAL_RCC_ClockConfig+0x244>)
 80085a2:	699b      	ldr	r3, [r3, #24]
 80085a4:	f003 030f 	and.w	r3, r3, #15
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d908      	bls.n	80085be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085ac:	4b4a      	ldr	r3, [pc, #296]	; (80086d8 <HAL_RCC_ClockConfig+0x244>)
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	f023 020f 	bic.w	r2, r3, #15
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	4947      	ldr	r1, [pc, #284]	; (80086d8 <HAL_RCC_ClockConfig+0x244>)
 80085ba:	4313      	orrs	r3, r2
 80085bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d055      	beq.n	8008676 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80085ca:	4b43      	ldr	r3, [pc, #268]	; (80086d8 <HAL_RCC_ClockConfig+0x244>)
 80085cc:	699b      	ldr	r3, [r3, #24]
 80085ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	4940      	ldr	r1, [pc, #256]	; (80086d8 <HAL_RCC_ClockConfig+0x244>)
 80085d8:	4313      	orrs	r3, r2
 80085da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	d107      	bne.n	80085f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80085e4:	4b3c      	ldr	r3, [pc, #240]	; (80086d8 <HAL_RCC_ClockConfig+0x244>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d121      	bne.n	8008634 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	e0f6      	b.n	80087e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	2b03      	cmp	r3, #3
 80085fa:	d107      	bne.n	800860c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80085fc:	4b36      	ldr	r3, [pc, #216]	; (80086d8 <HAL_RCC_ClockConfig+0x244>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008604:	2b00      	cmp	r3, #0
 8008606:	d115      	bne.n	8008634 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e0ea      	b.n	80087e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	2b01      	cmp	r3, #1
 8008612:	d107      	bne.n	8008624 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008614:	4b30      	ldr	r3, [pc, #192]	; (80086d8 <HAL_RCC_ClockConfig+0x244>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800861c:	2b00      	cmp	r3, #0
 800861e:	d109      	bne.n	8008634 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	e0de      	b.n	80087e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008624:	4b2c      	ldr	r3, [pc, #176]	; (80086d8 <HAL_RCC_ClockConfig+0x244>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 0304 	and.w	r3, r3, #4
 800862c:	2b00      	cmp	r3, #0
 800862e:	d101      	bne.n	8008634 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e0d6      	b.n	80087e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008634:	4b28      	ldr	r3, [pc, #160]	; (80086d8 <HAL_RCC_ClockConfig+0x244>)
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	f023 0207 	bic.w	r2, r3, #7
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	4925      	ldr	r1, [pc, #148]	; (80086d8 <HAL_RCC_ClockConfig+0x244>)
 8008642:	4313      	orrs	r3, r2
 8008644:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008646:	f7fb fc29 	bl	8003e9c <HAL_GetTick>
 800864a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800864c:	e00a      	b.n	8008664 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800864e:	f7fb fc25 	bl	8003e9c <HAL_GetTick>
 8008652:	4602      	mov	r2, r0
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	f241 3288 	movw	r2, #5000	; 0x1388
 800865c:	4293      	cmp	r3, r2
 800865e:	d901      	bls.n	8008664 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008660:	2303      	movs	r3, #3
 8008662:	e0be      	b.n	80087e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008664:	4b1c      	ldr	r3, [pc, #112]	; (80086d8 <HAL_RCC_ClockConfig+0x244>)
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	00db      	lsls	r3, r3, #3
 8008672:	429a      	cmp	r2, r3
 8008674:	d1eb      	bne.n	800864e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 0302 	and.w	r3, r3, #2
 800867e:	2b00      	cmp	r3, #0
 8008680:	d010      	beq.n	80086a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	68da      	ldr	r2, [r3, #12]
 8008686:	4b14      	ldr	r3, [pc, #80]	; (80086d8 <HAL_RCC_ClockConfig+0x244>)
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	f003 030f 	and.w	r3, r3, #15
 800868e:	429a      	cmp	r2, r3
 8008690:	d208      	bcs.n	80086a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008692:	4b11      	ldr	r3, [pc, #68]	; (80086d8 <HAL_RCC_ClockConfig+0x244>)
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	f023 020f 	bic.w	r2, r3, #15
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	490e      	ldr	r1, [pc, #56]	; (80086d8 <HAL_RCC_ClockConfig+0x244>)
 80086a0:	4313      	orrs	r3, r2
 80086a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80086a4:	4b0b      	ldr	r3, [pc, #44]	; (80086d4 <HAL_RCC_ClockConfig+0x240>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 030f 	and.w	r3, r3, #15
 80086ac:	683a      	ldr	r2, [r7, #0]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d214      	bcs.n	80086dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086b2:	4b08      	ldr	r3, [pc, #32]	; (80086d4 <HAL_RCC_ClockConfig+0x240>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f023 020f 	bic.w	r2, r3, #15
 80086ba:	4906      	ldr	r1, [pc, #24]	; (80086d4 <HAL_RCC_ClockConfig+0x240>)
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	4313      	orrs	r3, r2
 80086c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086c2:	4b04      	ldr	r3, [pc, #16]	; (80086d4 <HAL_RCC_ClockConfig+0x240>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 030f 	and.w	r3, r3, #15
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d005      	beq.n	80086dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e086      	b.n	80087e2 <HAL_RCC_ClockConfig+0x34e>
 80086d4:	52002000 	.word	0x52002000
 80086d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 0304 	and.w	r3, r3, #4
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d010      	beq.n	800870a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	691a      	ldr	r2, [r3, #16]
 80086ec:	4b3f      	ldr	r3, [pc, #252]	; (80087ec <HAL_RCC_ClockConfig+0x358>)
 80086ee:	699b      	ldr	r3, [r3, #24]
 80086f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d208      	bcs.n	800870a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80086f8:	4b3c      	ldr	r3, [pc, #240]	; (80087ec <HAL_RCC_ClockConfig+0x358>)
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	4939      	ldr	r1, [pc, #228]	; (80087ec <HAL_RCC_ClockConfig+0x358>)
 8008706:	4313      	orrs	r3, r2
 8008708:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f003 0308 	and.w	r3, r3, #8
 8008712:	2b00      	cmp	r3, #0
 8008714:	d010      	beq.n	8008738 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	695a      	ldr	r2, [r3, #20]
 800871a:	4b34      	ldr	r3, [pc, #208]	; (80087ec <HAL_RCC_ClockConfig+0x358>)
 800871c:	69db      	ldr	r3, [r3, #28]
 800871e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008722:	429a      	cmp	r2, r3
 8008724:	d208      	bcs.n	8008738 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008726:	4b31      	ldr	r3, [pc, #196]	; (80087ec <HAL_RCC_ClockConfig+0x358>)
 8008728:	69db      	ldr	r3, [r3, #28]
 800872a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	695b      	ldr	r3, [r3, #20]
 8008732:	492e      	ldr	r1, [pc, #184]	; (80087ec <HAL_RCC_ClockConfig+0x358>)
 8008734:	4313      	orrs	r3, r2
 8008736:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f003 0310 	and.w	r3, r3, #16
 8008740:	2b00      	cmp	r3, #0
 8008742:	d010      	beq.n	8008766 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	699a      	ldr	r2, [r3, #24]
 8008748:	4b28      	ldr	r3, [pc, #160]	; (80087ec <HAL_RCC_ClockConfig+0x358>)
 800874a:	69db      	ldr	r3, [r3, #28]
 800874c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008750:	429a      	cmp	r2, r3
 8008752:	d208      	bcs.n	8008766 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008754:	4b25      	ldr	r3, [pc, #148]	; (80087ec <HAL_RCC_ClockConfig+0x358>)
 8008756:	69db      	ldr	r3, [r3, #28]
 8008758:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	699b      	ldr	r3, [r3, #24]
 8008760:	4922      	ldr	r1, [pc, #136]	; (80087ec <HAL_RCC_ClockConfig+0x358>)
 8008762:	4313      	orrs	r3, r2
 8008764:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 0320 	and.w	r3, r3, #32
 800876e:	2b00      	cmp	r3, #0
 8008770:	d010      	beq.n	8008794 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	69da      	ldr	r2, [r3, #28]
 8008776:	4b1d      	ldr	r3, [pc, #116]	; (80087ec <HAL_RCC_ClockConfig+0x358>)
 8008778:	6a1b      	ldr	r3, [r3, #32]
 800877a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800877e:	429a      	cmp	r2, r3
 8008780:	d208      	bcs.n	8008794 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008782:	4b1a      	ldr	r3, [pc, #104]	; (80087ec <HAL_RCC_ClockConfig+0x358>)
 8008784:	6a1b      	ldr	r3, [r3, #32]
 8008786:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	69db      	ldr	r3, [r3, #28]
 800878e:	4917      	ldr	r1, [pc, #92]	; (80087ec <HAL_RCC_ClockConfig+0x358>)
 8008790:	4313      	orrs	r3, r2
 8008792:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008794:	f000 f834 	bl	8008800 <HAL_RCC_GetSysClockFreq>
 8008798:	4602      	mov	r2, r0
 800879a:	4b14      	ldr	r3, [pc, #80]	; (80087ec <HAL_RCC_ClockConfig+0x358>)
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	0a1b      	lsrs	r3, r3, #8
 80087a0:	f003 030f 	and.w	r3, r3, #15
 80087a4:	4912      	ldr	r1, [pc, #72]	; (80087f0 <HAL_RCC_ClockConfig+0x35c>)
 80087a6:	5ccb      	ldrb	r3, [r1, r3]
 80087a8:	f003 031f 	and.w	r3, r3, #31
 80087ac:	fa22 f303 	lsr.w	r3, r2, r3
 80087b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80087b2:	4b0e      	ldr	r3, [pc, #56]	; (80087ec <HAL_RCC_ClockConfig+0x358>)
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	f003 030f 	and.w	r3, r3, #15
 80087ba:	4a0d      	ldr	r2, [pc, #52]	; (80087f0 <HAL_RCC_ClockConfig+0x35c>)
 80087bc:	5cd3      	ldrb	r3, [r2, r3]
 80087be:	f003 031f 	and.w	r3, r3, #31
 80087c2:	693a      	ldr	r2, [r7, #16]
 80087c4:	fa22 f303 	lsr.w	r3, r2, r3
 80087c8:	4a0a      	ldr	r2, [pc, #40]	; (80087f4 <HAL_RCC_ClockConfig+0x360>)
 80087ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80087cc:	4a0a      	ldr	r2, [pc, #40]	; (80087f8 <HAL_RCC_ClockConfig+0x364>)
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80087d2:	4b0a      	ldr	r3, [pc, #40]	; (80087fc <HAL_RCC_ClockConfig+0x368>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7fb fb16 	bl	8003e08 <HAL_InitTick>
 80087dc:	4603      	mov	r3, r0
 80087de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80087e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3718      	adds	r7, #24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	58024400 	.word	0x58024400
 80087f0:	08010350 	.word	0x08010350
 80087f4:	24000018 	.word	0x24000018
 80087f8:	24000014 	.word	0x24000014
 80087fc:	24000030 	.word	0x24000030

08008800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008800:	b480      	push	{r7}
 8008802:	b089      	sub	sp, #36	; 0x24
 8008804:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008806:	4bb3      	ldr	r3, [pc, #716]	; (8008ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800880e:	2b18      	cmp	r3, #24
 8008810:	f200 8155 	bhi.w	8008abe <HAL_RCC_GetSysClockFreq+0x2be>
 8008814:	a201      	add	r2, pc, #4	; (adr r2, 800881c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800881a:	bf00      	nop
 800881c:	08008881 	.word	0x08008881
 8008820:	08008abf 	.word	0x08008abf
 8008824:	08008abf 	.word	0x08008abf
 8008828:	08008abf 	.word	0x08008abf
 800882c:	08008abf 	.word	0x08008abf
 8008830:	08008abf 	.word	0x08008abf
 8008834:	08008abf 	.word	0x08008abf
 8008838:	08008abf 	.word	0x08008abf
 800883c:	080088a7 	.word	0x080088a7
 8008840:	08008abf 	.word	0x08008abf
 8008844:	08008abf 	.word	0x08008abf
 8008848:	08008abf 	.word	0x08008abf
 800884c:	08008abf 	.word	0x08008abf
 8008850:	08008abf 	.word	0x08008abf
 8008854:	08008abf 	.word	0x08008abf
 8008858:	08008abf 	.word	0x08008abf
 800885c:	080088ad 	.word	0x080088ad
 8008860:	08008abf 	.word	0x08008abf
 8008864:	08008abf 	.word	0x08008abf
 8008868:	08008abf 	.word	0x08008abf
 800886c:	08008abf 	.word	0x08008abf
 8008870:	08008abf 	.word	0x08008abf
 8008874:	08008abf 	.word	0x08008abf
 8008878:	08008abf 	.word	0x08008abf
 800887c:	080088b3 	.word	0x080088b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008880:	4b94      	ldr	r3, [pc, #592]	; (8008ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 0320 	and.w	r3, r3, #32
 8008888:	2b00      	cmp	r3, #0
 800888a:	d009      	beq.n	80088a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800888c:	4b91      	ldr	r3, [pc, #580]	; (8008ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	08db      	lsrs	r3, r3, #3
 8008892:	f003 0303 	and.w	r3, r3, #3
 8008896:	4a90      	ldr	r2, [pc, #576]	; (8008ad8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008898:	fa22 f303 	lsr.w	r3, r2, r3
 800889c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800889e:	e111      	b.n	8008ac4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80088a0:	4b8d      	ldr	r3, [pc, #564]	; (8008ad8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80088a2:	61bb      	str	r3, [r7, #24]
      break;
 80088a4:	e10e      	b.n	8008ac4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80088a6:	4b8d      	ldr	r3, [pc, #564]	; (8008adc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80088a8:	61bb      	str	r3, [r7, #24]
      break;
 80088aa:	e10b      	b.n	8008ac4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80088ac:	4b8c      	ldr	r3, [pc, #560]	; (8008ae0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80088ae:	61bb      	str	r3, [r7, #24]
      break;
 80088b0:	e108      	b.n	8008ac4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088b2:	4b88      	ldr	r3, [pc, #544]	; (8008ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b6:	f003 0303 	and.w	r3, r3, #3
 80088ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80088bc:	4b85      	ldr	r3, [pc, #532]	; (8008ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c0:	091b      	lsrs	r3, r3, #4
 80088c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80088c8:	4b82      	ldr	r3, [pc, #520]	; (8008ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088cc:	f003 0301 	and.w	r3, r3, #1
 80088d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80088d2:	4b80      	ldr	r3, [pc, #512]	; (8008ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d6:	08db      	lsrs	r3, r3, #3
 80088d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	fb02 f303 	mul.w	r3, r2, r3
 80088e2:	ee07 3a90 	vmov	s15, r3
 80088e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f000 80e1 	beq.w	8008ab8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	f000 8083 	beq.w	8008a04 <HAL_RCC_GetSysClockFreq+0x204>
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	2b02      	cmp	r3, #2
 8008902:	f200 80a1 	bhi.w	8008a48 <HAL_RCC_GetSysClockFreq+0x248>
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d003      	beq.n	8008914 <HAL_RCC_GetSysClockFreq+0x114>
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	2b01      	cmp	r3, #1
 8008910:	d056      	beq.n	80089c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008912:	e099      	b.n	8008a48 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008914:	4b6f      	ldr	r3, [pc, #444]	; (8008ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0320 	and.w	r3, r3, #32
 800891c:	2b00      	cmp	r3, #0
 800891e:	d02d      	beq.n	800897c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008920:	4b6c      	ldr	r3, [pc, #432]	; (8008ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	08db      	lsrs	r3, r3, #3
 8008926:	f003 0303 	and.w	r3, r3, #3
 800892a:	4a6b      	ldr	r2, [pc, #428]	; (8008ad8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800892c:	fa22 f303 	lsr.w	r3, r2, r3
 8008930:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	ee07 3a90 	vmov	s15, r3
 8008938:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	ee07 3a90 	vmov	s15, r3
 8008942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800894a:	4b62      	ldr	r3, [pc, #392]	; (8008ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800894c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008952:	ee07 3a90 	vmov	s15, r3
 8008956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800895a:	ed97 6a02 	vldr	s12, [r7, #8]
 800895e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008ae4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800896a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800896e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008976:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800897a:	e087      	b.n	8008a8c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	ee07 3a90 	vmov	s15, r3
 8008982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008986:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008ae8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800898a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800898e:	4b51      	ldr	r3, [pc, #324]	; (8008ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008996:	ee07 3a90 	vmov	s15, r3
 800899a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800899e:	ed97 6a02 	vldr	s12, [r7, #8]
 80089a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008ae4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80089a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80089be:	e065      	b.n	8008a8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	ee07 3a90 	vmov	s15, r3
 80089c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008aec <HAL_RCC_GetSysClockFreq+0x2ec>
 80089ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089d2:	4b40      	ldr	r3, [pc, #256]	; (8008ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089da:	ee07 3a90 	vmov	s15, r3
 80089de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80089e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008ae4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80089ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008a02:	e043      	b.n	8008a8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	ee07 3a90 	vmov	s15, r3
 8008a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a0e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008af0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a16:	4b2f      	ldr	r3, [pc, #188]	; (8008ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a1e:	ee07 3a90 	vmov	s15, r3
 8008a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a26:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a2a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008ae4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008a46:	e021      	b.n	8008a8c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	ee07 3a90 	vmov	s15, r3
 8008a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a52:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008aec <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a5a:	4b1e      	ldr	r3, [pc, #120]	; (8008ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a62:	ee07 3a90 	vmov	s15, r3
 8008a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a6e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008ae4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008a8a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008a8c:	4b11      	ldr	r3, [pc, #68]	; (8008ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a90:	0a5b      	lsrs	r3, r3, #9
 8008a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a96:	3301      	adds	r3, #1
 8008a98:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	ee07 3a90 	vmov	s15, r3
 8008aa0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008aa4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008aa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008aac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ab0:	ee17 3a90 	vmov	r3, s15
 8008ab4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008ab6:	e005      	b.n	8008ac4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	61bb      	str	r3, [r7, #24]
      break;
 8008abc:	e002      	b.n	8008ac4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008abe:	4b07      	ldr	r3, [pc, #28]	; (8008adc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ac0:	61bb      	str	r3, [r7, #24]
      break;
 8008ac2:	bf00      	nop
  }

  return sysclockfreq;
 8008ac4:	69bb      	ldr	r3, [r7, #24]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3724      	adds	r7, #36	; 0x24
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	58024400 	.word	0x58024400
 8008ad8:	03d09000 	.word	0x03d09000
 8008adc:	003d0900 	.word	0x003d0900
 8008ae0:	017d7840 	.word	0x017d7840
 8008ae4:	46000000 	.word	0x46000000
 8008ae8:	4c742400 	.word	0x4c742400
 8008aec:	4a742400 	.word	0x4a742400
 8008af0:	4bbebc20 	.word	0x4bbebc20

08008af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008afa:	f7ff fe81 	bl	8008800 <HAL_RCC_GetSysClockFreq>
 8008afe:	4602      	mov	r2, r0
 8008b00:	4b10      	ldr	r3, [pc, #64]	; (8008b44 <HAL_RCC_GetHCLKFreq+0x50>)
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	0a1b      	lsrs	r3, r3, #8
 8008b06:	f003 030f 	and.w	r3, r3, #15
 8008b0a:	490f      	ldr	r1, [pc, #60]	; (8008b48 <HAL_RCC_GetHCLKFreq+0x54>)
 8008b0c:	5ccb      	ldrb	r3, [r1, r3]
 8008b0e:	f003 031f 	and.w	r3, r3, #31
 8008b12:	fa22 f303 	lsr.w	r3, r2, r3
 8008b16:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b18:	4b0a      	ldr	r3, [pc, #40]	; (8008b44 <HAL_RCC_GetHCLKFreq+0x50>)
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	f003 030f 	and.w	r3, r3, #15
 8008b20:	4a09      	ldr	r2, [pc, #36]	; (8008b48 <HAL_RCC_GetHCLKFreq+0x54>)
 8008b22:	5cd3      	ldrb	r3, [r2, r3]
 8008b24:	f003 031f 	and.w	r3, r3, #31
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b2e:	4a07      	ldr	r2, [pc, #28]	; (8008b4c <HAL_RCC_GetHCLKFreq+0x58>)
 8008b30:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008b32:	4a07      	ldr	r2, [pc, #28]	; (8008b50 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008b38:	4b04      	ldr	r3, [pc, #16]	; (8008b4c <HAL_RCC_GetHCLKFreq+0x58>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3708      	adds	r7, #8
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	58024400 	.word	0x58024400
 8008b48:	08010350 	.word	0x08010350
 8008b4c:	24000018 	.word	0x24000018
 8008b50:	24000014 	.word	0x24000014

08008b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008b58:	f7ff ffcc 	bl	8008af4 <HAL_RCC_GetHCLKFreq>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	4b06      	ldr	r3, [pc, #24]	; (8008b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b60:	69db      	ldr	r3, [r3, #28]
 8008b62:	091b      	lsrs	r3, r3, #4
 8008b64:	f003 0307 	and.w	r3, r3, #7
 8008b68:	4904      	ldr	r1, [pc, #16]	; (8008b7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008b6a:	5ccb      	ldrb	r3, [r1, r3]
 8008b6c:	f003 031f 	and.w	r3, r3, #31
 8008b70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	58024400 	.word	0x58024400
 8008b7c:	08010350 	.word	0x08010350

08008b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008b84:	f7ff ffb6 	bl	8008af4 <HAL_RCC_GetHCLKFreq>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	4b06      	ldr	r3, [pc, #24]	; (8008ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b8c:	69db      	ldr	r3, [r3, #28]
 8008b8e:	0a1b      	lsrs	r3, r3, #8
 8008b90:	f003 0307 	and.w	r3, r3, #7
 8008b94:	4904      	ldr	r1, [pc, #16]	; (8008ba8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008b96:	5ccb      	ldrb	r3, [r1, r3]
 8008b98:	f003 031f 	and.w	r3, r3, #31
 8008b9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	58024400 	.word	0x58024400
 8008ba8:	08010350 	.word	0x08010350

08008bac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bb0:	b0ca      	sub	sp, #296	; 0x128
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008bb8:	2300      	movs	r3, #0
 8008bba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bcc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008bd0:	2500      	movs	r5, #0
 8008bd2:	ea54 0305 	orrs.w	r3, r4, r5
 8008bd6:	d049      	beq.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008be2:	d02f      	beq.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008be4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008be8:	d828      	bhi.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008bea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bee:	d01a      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008bf0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bf4:	d822      	bhi.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d003      	beq.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008bfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bfe:	d007      	beq.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008c00:	e01c      	b.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c02:	4bb8      	ldr	r3, [pc, #736]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c06:	4ab7      	ldr	r2, [pc, #732]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008c0e:	e01a      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c14:	3308      	adds	r3, #8
 8008c16:	2102      	movs	r1, #2
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f001 fc8f 	bl	800a53c <RCCEx_PLL2_Config>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008c24:	e00f      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c2a:	3328      	adds	r3, #40	; 0x28
 8008c2c:	2102      	movs	r1, #2
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f001 fd36 	bl	800a6a0 <RCCEx_PLL3_Config>
 8008c34:	4603      	mov	r3, r0
 8008c36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008c3a:	e004      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c42:	e000      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10a      	bne.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008c4e:	4ba5      	ldr	r3, [pc, #660]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c52:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c5c:	4aa1      	ldr	r2, [pc, #644]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c5e:	430b      	orrs	r3, r1
 8008c60:	6513      	str	r3, [r2, #80]	; 0x50
 8008c62:	e003      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c74:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008c78:	f04f 0900 	mov.w	r9, #0
 8008c7c:	ea58 0309 	orrs.w	r3, r8, r9
 8008c80:	d047      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c88:	2b04      	cmp	r3, #4
 8008c8a:	d82a      	bhi.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008c8c:	a201      	add	r2, pc, #4	; (adr r2, 8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c92:	bf00      	nop
 8008c94:	08008ca9 	.word	0x08008ca9
 8008c98:	08008cb7 	.word	0x08008cb7
 8008c9c:	08008ccd 	.word	0x08008ccd
 8008ca0:	08008ceb 	.word	0x08008ceb
 8008ca4:	08008ceb 	.word	0x08008ceb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ca8:	4b8e      	ldr	r3, [pc, #568]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cac:	4a8d      	ldr	r2, [pc, #564]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008cb4:	e01a      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cba:	3308      	adds	r3, #8
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f001 fc3c 	bl	800a53c <RCCEx_PLL2_Config>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008cca:	e00f      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cd0:	3328      	adds	r3, #40	; 0x28
 8008cd2:	2100      	movs	r1, #0
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f001 fce3 	bl	800a6a0 <RCCEx_PLL3_Config>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ce0:	e004      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ce8:	e000      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008cea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d10a      	bne.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008cf4:	4b7b      	ldr	r3, [pc, #492]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cf8:	f023 0107 	bic.w	r1, r3, #7
 8008cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d02:	4a78      	ldr	r2, [pc, #480]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d04:	430b      	orrs	r3, r1
 8008d06:	6513      	str	r3, [r2, #80]	; 0x50
 8008d08:	e003      	b.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8008d1e:	f04f 0b00 	mov.w	fp, #0
 8008d22:	ea5a 030b 	orrs.w	r3, sl, fp
 8008d26:	d04c      	beq.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d32:	d030      	beq.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d38:	d829      	bhi.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008d3a:	2bc0      	cmp	r3, #192	; 0xc0
 8008d3c:	d02d      	beq.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008d3e:	2bc0      	cmp	r3, #192	; 0xc0
 8008d40:	d825      	bhi.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008d42:	2b80      	cmp	r3, #128	; 0x80
 8008d44:	d018      	beq.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008d46:	2b80      	cmp	r3, #128	; 0x80
 8008d48:	d821      	bhi.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d002      	beq.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008d4e:	2b40      	cmp	r3, #64	; 0x40
 8008d50:	d007      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008d52:	e01c      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d54:	4b63      	ldr	r3, [pc, #396]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d58:	4a62      	ldr	r2, [pc, #392]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008d60:	e01c      	b.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d66:	3308      	adds	r3, #8
 8008d68:	2100      	movs	r1, #0
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f001 fbe6 	bl	800a53c <RCCEx_PLL2_Config>
 8008d70:	4603      	mov	r3, r0
 8008d72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008d76:	e011      	b.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d7c:	3328      	adds	r3, #40	; 0x28
 8008d7e:	2100      	movs	r1, #0
 8008d80:	4618      	mov	r0, r3
 8008d82:	f001 fc8d 	bl	800a6a0 <RCCEx_PLL3_Config>
 8008d86:	4603      	mov	r3, r0
 8008d88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008d8c:	e006      	b.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d94:	e002      	b.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008d96:	bf00      	nop
 8008d98:	e000      	b.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008d9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d10a      	bne.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008da4:	4b4f      	ldr	r3, [pc, #316]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008da8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008db2:	4a4c      	ldr	r2, [pc, #304]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008db4:	430b      	orrs	r3, r1
 8008db6:	6513      	str	r3, [r2, #80]	; 0x50
 8008db8:	e003      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008dbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dca:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008dce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008dd8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008ddc:	460b      	mov	r3, r1
 8008dde:	4313      	orrs	r3, r2
 8008de0:	d053      	beq.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008de6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008dea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008dee:	d035      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008df0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008df4:	d82e      	bhi.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008df6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008dfa:	d031      	beq.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008dfc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e00:	d828      	bhi.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e06:	d01a      	beq.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008e08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e0c:	d822      	bhi.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d003      	beq.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008e12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e16:	d007      	beq.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008e18:	e01c      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e1a:	4b32      	ldr	r3, [pc, #200]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1e:	4a31      	ldr	r2, [pc, #196]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e26:	e01c      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e2c:	3308      	adds	r3, #8
 8008e2e:	2100      	movs	r1, #0
 8008e30:	4618      	mov	r0, r3
 8008e32:	f001 fb83 	bl	800a53c <RCCEx_PLL2_Config>
 8008e36:	4603      	mov	r3, r0
 8008e38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008e3c:	e011      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e42:	3328      	adds	r3, #40	; 0x28
 8008e44:	2100      	movs	r1, #0
 8008e46:	4618      	mov	r0, r3
 8008e48:	f001 fc2a 	bl	800a6a0 <RCCEx_PLL3_Config>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e52:	e006      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e5a:	e002      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008e5c:	bf00      	nop
 8008e5e:	e000      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008e60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d10b      	bne.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008e6a:	4b1e      	ldr	r3, [pc, #120]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e6e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008e7a:	4a1a      	ldr	r2, [pc, #104]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e7c:	430b      	orrs	r3, r1
 8008e7e:	6593      	str	r3, [r2, #88]	; 0x58
 8008e80:	e003      	b.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e92:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008e96:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008ea0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	d056      	beq.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008eb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008eb6:	d038      	beq.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008eb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ebc:	d831      	bhi.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008ebe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ec2:	d034      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008ec4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ec8:	d82b      	bhi.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008eca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ece:	d01d      	beq.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008ed0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ed4:	d825      	bhi.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d006      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008eda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ede:	d00a      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008ee0:	e01f      	b.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008ee2:	bf00      	nop
 8008ee4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ee8:	4ba2      	ldr	r3, [pc, #648]	; (8009174 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eec:	4aa1      	ldr	r2, [pc, #644]	; (8009174 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ef2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ef4:	e01c      	b.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008efa:	3308      	adds	r3, #8
 8008efc:	2100      	movs	r1, #0
 8008efe:	4618      	mov	r0, r3
 8008f00:	f001 fb1c 	bl	800a53c <RCCEx_PLL2_Config>
 8008f04:	4603      	mov	r3, r0
 8008f06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008f0a:	e011      	b.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f10:	3328      	adds	r3, #40	; 0x28
 8008f12:	2100      	movs	r1, #0
 8008f14:	4618      	mov	r0, r3
 8008f16:	f001 fbc3 	bl	800a6a0 <RCCEx_PLL3_Config>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f20:	e006      	b.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f28:	e002      	b.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008f2a:	bf00      	nop
 8008f2c:	e000      	b.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008f2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10b      	bne.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008f38:	4b8e      	ldr	r3, [pc, #568]	; (8009174 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f3c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008f48:	4a8a      	ldr	r2, [pc, #552]	; (8009174 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f4a:	430b      	orrs	r3, r1
 8008f4c:	6593      	str	r3, [r2, #88]	; 0x58
 8008f4e:	e003      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f60:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008f64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f68:	2300      	movs	r3, #0
 8008f6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008f6e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008f72:	460b      	mov	r3, r1
 8008f74:	4313      	orrs	r3, r2
 8008f76:	d03a      	beq.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f7e:	2b30      	cmp	r3, #48	; 0x30
 8008f80:	d01f      	beq.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008f82:	2b30      	cmp	r3, #48	; 0x30
 8008f84:	d819      	bhi.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008f86:	2b20      	cmp	r3, #32
 8008f88:	d00c      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008f8a:	2b20      	cmp	r3, #32
 8008f8c:	d815      	bhi.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d019      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008f92:	2b10      	cmp	r3, #16
 8008f94:	d111      	bne.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f96:	4b77      	ldr	r3, [pc, #476]	; (8009174 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9a:	4a76      	ldr	r2, [pc, #472]	; (8009174 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fa0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008fa2:	e011      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fa8:	3308      	adds	r3, #8
 8008faa:	2102      	movs	r1, #2
 8008fac:	4618      	mov	r0, r3
 8008fae:	f001 fac5 	bl	800a53c <RCCEx_PLL2_Config>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008fb8:	e006      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008fc0:	e002      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008fc2:	bf00      	nop
 8008fc4:	e000      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008fc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d10a      	bne.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008fd0:	4b68      	ldr	r3, [pc, #416]	; (8009174 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fd4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fde:	4a65      	ldr	r2, [pc, #404]	; (8009174 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fe0:	430b      	orrs	r3, r1
 8008fe2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008fe4:	e003      	b.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008ffa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008ffe:	2300      	movs	r3, #0
 8009000:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009004:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009008:	460b      	mov	r3, r1
 800900a:	4313      	orrs	r3, r2
 800900c:	d051      	beq.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800900e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009014:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009018:	d035      	beq.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800901a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800901e:	d82e      	bhi.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009020:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009024:	d031      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009026:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800902a:	d828      	bhi.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800902c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009030:	d01a      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009036:	d822      	bhi.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009038:	2b00      	cmp	r3, #0
 800903a:	d003      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800903c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009040:	d007      	beq.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009042:	e01c      	b.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009044:	4b4b      	ldr	r3, [pc, #300]	; (8009174 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009048:	4a4a      	ldr	r2, [pc, #296]	; (8009174 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800904a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800904e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009050:	e01c      	b.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009056:	3308      	adds	r3, #8
 8009058:	2100      	movs	r1, #0
 800905a:	4618      	mov	r0, r3
 800905c:	f001 fa6e 	bl	800a53c <RCCEx_PLL2_Config>
 8009060:	4603      	mov	r3, r0
 8009062:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009066:	e011      	b.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800906c:	3328      	adds	r3, #40	; 0x28
 800906e:	2100      	movs	r1, #0
 8009070:	4618      	mov	r0, r3
 8009072:	f001 fb15 	bl	800a6a0 <RCCEx_PLL3_Config>
 8009076:	4603      	mov	r3, r0
 8009078:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800907c:	e006      	b.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009084:	e002      	b.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009086:	bf00      	nop
 8009088:	e000      	b.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800908a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800908c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009090:	2b00      	cmp	r3, #0
 8009092:	d10a      	bne.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009094:	4b37      	ldr	r3, [pc, #220]	; (8009174 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009098:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800909c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090a2:	4a34      	ldr	r2, [pc, #208]	; (8009174 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090a4:	430b      	orrs	r3, r1
 80090a6:	6513      	str	r3, [r2, #80]	; 0x50
 80090a8:	e003      	b.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80090b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ba:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80090be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80090c2:	2300      	movs	r3, #0
 80090c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80090c8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80090cc:	460b      	mov	r3, r1
 80090ce:	4313      	orrs	r3, r2
 80090d0:	d056      	beq.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80090d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80090dc:	d033      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80090de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80090e2:	d82c      	bhi.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80090e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80090e8:	d02f      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80090ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80090ee:	d826      	bhi.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80090f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80090f4:	d02b      	beq.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80090f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80090fa:	d820      	bhi.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80090fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009100:	d012      	beq.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009106:	d81a      	bhi.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009108:	2b00      	cmp	r3, #0
 800910a:	d022      	beq.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800910c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009110:	d115      	bne.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009116:	3308      	adds	r3, #8
 8009118:	2101      	movs	r1, #1
 800911a:	4618      	mov	r0, r3
 800911c:	f001 fa0e 	bl	800a53c <RCCEx_PLL2_Config>
 8009120:	4603      	mov	r3, r0
 8009122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009126:	e015      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800912c:	3328      	adds	r3, #40	; 0x28
 800912e:	2101      	movs	r1, #1
 8009130:	4618      	mov	r0, r3
 8009132:	f001 fab5 	bl	800a6a0 <RCCEx_PLL3_Config>
 8009136:	4603      	mov	r3, r0
 8009138:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800913c:	e00a      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009144:	e006      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009146:	bf00      	nop
 8009148:	e004      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800914a:	bf00      	nop
 800914c:	e002      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800914e:	bf00      	nop
 8009150:	e000      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009152:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009154:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009158:	2b00      	cmp	r3, #0
 800915a:	d10d      	bne.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800915c:	4b05      	ldr	r3, [pc, #20]	; (8009174 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800915e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009160:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009168:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800916a:	4a02      	ldr	r2, [pc, #8]	; (8009174 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800916c:	430b      	orrs	r3, r1
 800916e:	6513      	str	r3, [r2, #80]	; 0x50
 8009170:	e006      	b.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009172:	bf00      	nop
 8009174:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009178:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800917c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009188:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800918c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009190:	2300      	movs	r3, #0
 8009192:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009196:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800919a:	460b      	mov	r3, r1
 800919c:	4313      	orrs	r3, r2
 800919e:	d055      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80091a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80091a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091ac:	d033      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80091ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091b2:	d82c      	bhi.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80091b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091b8:	d02f      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80091ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091be:	d826      	bhi.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80091c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80091c4:	d02b      	beq.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80091c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80091ca:	d820      	bhi.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80091cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091d0:	d012      	beq.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80091d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091d6:	d81a      	bhi.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d022      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80091dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091e0:	d115      	bne.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091e6:	3308      	adds	r3, #8
 80091e8:	2101      	movs	r1, #1
 80091ea:	4618      	mov	r0, r3
 80091ec:	f001 f9a6 	bl	800a53c <RCCEx_PLL2_Config>
 80091f0:	4603      	mov	r3, r0
 80091f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80091f6:	e015      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80091f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091fc:	3328      	adds	r3, #40	; 0x28
 80091fe:	2101      	movs	r1, #1
 8009200:	4618      	mov	r0, r3
 8009202:	f001 fa4d 	bl	800a6a0 <RCCEx_PLL3_Config>
 8009206:	4603      	mov	r3, r0
 8009208:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800920c:	e00a      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009214:	e006      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009216:	bf00      	nop
 8009218:	e004      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800921a:	bf00      	nop
 800921c:	e002      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800921e:	bf00      	nop
 8009220:	e000      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009222:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009224:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009228:	2b00      	cmp	r3, #0
 800922a:	d10b      	bne.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800922c:	4ba3      	ldr	r3, [pc, #652]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800922e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009230:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009238:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800923c:	4a9f      	ldr	r2, [pc, #636]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800923e:	430b      	orrs	r3, r1
 8009240:	6593      	str	r3, [r2, #88]	; 0x58
 8009242:	e003      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009244:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009248:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800924c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009254:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009258:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800925c:	2300      	movs	r3, #0
 800925e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009262:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009266:	460b      	mov	r3, r1
 8009268:	4313      	orrs	r3, r2
 800926a:	d037      	beq.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800926c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009272:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009276:	d00e      	beq.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800927c:	d816      	bhi.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x700>
 800927e:	2b00      	cmp	r3, #0
 8009280:	d018      	beq.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009282:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009286:	d111      	bne.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009288:	4b8c      	ldr	r3, [pc, #560]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800928a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928c:	4a8b      	ldr	r2, [pc, #556]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800928e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009292:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009294:	e00f      	b.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800929a:	3308      	adds	r3, #8
 800929c:	2101      	movs	r1, #1
 800929e:	4618      	mov	r0, r3
 80092a0:	f001 f94c 	bl	800a53c <RCCEx_PLL2_Config>
 80092a4:	4603      	mov	r3, r0
 80092a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80092aa:	e004      	b.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80092b2:	e000      	b.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80092b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d10a      	bne.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80092be:	4b7f      	ldr	r3, [pc, #508]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092c2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80092c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092cc:	4a7b      	ldr	r2, [pc, #492]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092ce:	430b      	orrs	r3, r1
 80092d0:	6513      	str	r3, [r2, #80]	; 0x50
 80092d2:	e003      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80092dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80092e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092ec:	2300      	movs	r3, #0
 80092ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80092f2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80092f6:	460b      	mov	r3, r1
 80092f8:	4313      	orrs	r3, r2
 80092fa:	d039      	beq.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80092fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009302:	2b03      	cmp	r3, #3
 8009304:	d81c      	bhi.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009306:	a201      	add	r2, pc, #4	; (adr r2, 800930c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930c:	08009349 	.word	0x08009349
 8009310:	0800931d 	.word	0x0800931d
 8009314:	0800932b 	.word	0x0800932b
 8009318:	08009349 	.word	0x08009349
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800931c:	4b67      	ldr	r3, [pc, #412]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800931e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009320:	4a66      	ldr	r2, [pc, #408]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009326:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009328:	e00f      	b.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800932a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800932e:	3308      	adds	r3, #8
 8009330:	2102      	movs	r1, #2
 8009332:	4618      	mov	r0, r3
 8009334:	f001 f902 	bl	800a53c <RCCEx_PLL2_Config>
 8009338:	4603      	mov	r3, r0
 800933a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800933e:	e004      	b.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009346:	e000      	b.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800934a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800934e:	2b00      	cmp	r3, #0
 8009350:	d10a      	bne.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009352:	4b5a      	ldr	r3, [pc, #360]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009356:	f023 0103 	bic.w	r1, r3, #3
 800935a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800935e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009360:	4a56      	ldr	r2, [pc, #344]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009362:	430b      	orrs	r3, r1
 8009364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009366:	e003      	b.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009368:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800936c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009378:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800937c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009380:	2300      	movs	r3, #0
 8009382:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009386:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800938a:	460b      	mov	r3, r1
 800938c:	4313      	orrs	r3, r2
 800938e:	f000 809f 	beq.w	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009392:	4b4b      	ldr	r3, [pc, #300]	; (80094c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a4a      	ldr	r2, [pc, #296]	; (80094c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800939c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800939e:	f7fa fd7d 	bl	8003e9c <HAL_GetTick>
 80093a2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093a6:	e00b      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093a8:	f7fa fd78 	bl	8003e9c <HAL_GetTick>
 80093ac:	4602      	mov	r2, r0
 80093ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80093b2:	1ad3      	subs	r3, r2, r3
 80093b4:	2b64      	cmp	r3, #100	; 0x64
 80093b6:	d903      	bls.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80093b8:	2303      	movs	r3, #3
 80093ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80093be:	e005      	b.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093c0:	4b3f      	ldr	r3, [pc, #252]	; (80094c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d0ed      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80093cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d179      	bne.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80093d4:	4b39      	ldr	r3, [pc, #228]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80093d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80093e0:	4053      	eors	r3, r2
 80093e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d015      	beq.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80093ea:	4b34      	ldr	r3, [pc, #208]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80093f6:	4b31      	ldr	r3, [pc, #196]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093fa:	4a30      	ldr	r2, [pc, #192]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009400:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009402:	4b2e      	ldr	r3, [pc, #184]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009406:	4a2d      	ldr	r2, [pc, #180]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800940c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800940e:	4a2b      	ldr	r2, [pc, #172]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009410:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009414:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800941a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800941e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009422:	d118      	bne.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009424:	f7fa fd3a 	bl	8003e9c <HAL_GetTick>
 8009428:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800942c:	e00d      	b.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800942e:	f7fa fd35 	bl	8003e9c <HAL_GetTick>
 8009432:	4602      	mov	r2, r0
 8009434:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009438:	1ad2      	subs	r2, r2, r3
 800943a:	f241 3388 	movw	r3, #5000	; 0x1388
 800943e:	429a      	cmp	r2, r3
 8009440:	d903      	bls.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009442:	2303      	movs	r3, #3
 8009444:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009448:	e005      	b.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800944a:	4b1c      	ldr	r3, [pc, #112]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800944c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800944e:	f003 0302 	and.w	r3, r3, #2
 8009452:	2b00      	cmp	r3, #0
 8009454:	d0eb      	beq.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009456:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800945a:	2b00      	cmp	r3, #0
 800945c:	d129      	bne.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800945e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009462:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800946a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800946e:	d10e      	bne.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009470:	4b12      	ldr	r3, [pc, #72]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009472:	691b      	ldr	r3, [r3, #16]
 8009474:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800947c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009480:	091a      	lsrs	r2, r3, #4
 8009482:	4b10      	ldr	r3, [pc, #64]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009484:	4013      	ands	r3, r2
 8009486:	4a0d      	ldr	r2, [pc, #52]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009488:	430b      	orrs	r3, r1
 800948a:	6113      	str	r3, [r2, #16]
 800948c:	e005      	b.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800948e:	4b0b      	ldr	r3, [pc, #44]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	4a0a      	ldr	r2, [pc, #40]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009494:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009498:	6113      	str	r3, [r2, #16]
 800949a:	4b08      	ldr	r3, [pc, #32]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800949c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800949e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80094a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094aa:	4a04      	ldr	r2, [pc, #16]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094ac:	430b      	orrs	r3, r1
 80094ae:	6713      	str	r3, [r2, #112]	; 0x70
 80094b0:	e00e      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80094b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80094ba:	e009      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80094bc:	58024400 	.word	0x58024400
 80094c0:	58024800 	.word	0x58024800
 80094c4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80094d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d8:	f002 0301 	and.w	r3, r2, #1
 80094dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80094e0:	2300      	movs	r3, #0
 80094e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80094e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80094ea:	460b      	mov	r3, r1
 80094ec:	4313      	orrs	r3, r2
 80094ee:	f000 8089 	beq.w	8009604 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80094f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094f8:	2b28      	cmp	r3, #40	; 0x28
 80094fa:	d86b      	bhi.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80094fc:	a201      	add	r2, pc, #4	; (adr r2, 8009504 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80094fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009502:	bf00      	nop
 8009504:	080095dd 	.word	0x080095dd
 8009508:	080095d5 	.word	0x080095d5
 800950c:	080095d5 	.word	0x080095d5
 8009510:	080095d5 	.word	0x080095d5
 8009514:	080095d5 	.word	0x080095d5
 8009518:	080095d5 	.word	0x080095d5
 800951c:	080095d5 	.word	0x080095d5
 8009520:	080095d5 	.word	0x080095d5
 8009524:	080095a9 	.word	0x080095a9
 8009528:	080095d5 	.word	0x080095d5
 800952c:	080095d5 	.word	0x080095d5
 8009530:	080095d5 	.word	0x080095d5
 8009534:	080095d5 	.word	0x080095d5
 8009538:	080095d5 	.word	0x080095d5
 800953c:	080095d5 	.word	0x080095d5
 8009540:	080095d5 	.word	0x080095d5
 8009544:	080095bf 	.word	0x080095bf
 8009548:	080095d5 	.word	0x080095d5
 800954c:	080095d5 	.word	0x080095d5
 8009550:	080095d5 	.word	0x080095d5
 8009554:	080095d5 	.word	0x080095d5
 8009558:	080095d5 	.word	0x080095d5
 800955c:	080095d5 	.word	0x080095d5
 8009560:	080095d5 	.word	0x080095d5
 8009564:	080095dd 	.word	0x080095dd
 8009568:	080095d5 	.word	0x080095d5
 800956c:	080095d5 	.word	0x080095d5
 8009570:	080095d5 	.word	0x080095d5
 8009574:	080095d5 	.word	0x080095d5
 8009578:	080095d5 	.word	0x080095d5
 800957c:	080095d5 	.word	0x080095d5
 8009580:	080095d5 	.word	0x080095d5
 8009584:	080095dd 	.word	0x080095dd
 8009588:	080095d5 	.word	0x080095d5
 800958c:	080095d5 	.word	0x080095d5
 8009590:	080095d5 	.word	0x080095d5
 8009594:	080095d5 	.word	0x080095d5
 8009598:	080095d5 	.word	0x080095d5
 800959c:	080095d5 	.word	0x080095d5
 80095a0:	080095d5 	.word	0x080095d5
 80095a4:	080095dd 	.word	0x080095dd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ac:	3308      	adds	r3, #8
 80095ae:	2101      	movs	r1, #1
 80095b0:	4618      	mov	r0, r3
 80095b2:	f000 ffc3 	bl	800a53c <RCCEx_PLL2_Config>
 80095b6:	4603      	mov	r3, r0
 80095b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80095bc:	e00f      	b.n	80095de <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80095be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095c2:	3328      	adds	r3, #40	; 0x28
 80095c4:	2101      	movs	r1, #1
 80095c6:	4618      	mov	r0, r3
 80095c8:	f001 f86a 	bl	800a6a0 <RCCEx_PLL3_Config>
 80095cc:	4603      	mov	r3, r0
 80095ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80095d2:	e004      	b.n	80095de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80095da:	e000      	b.n	80095de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80095dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d10a      	bne.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80095e6:	4bbf      	ldr	r3, [pc, #764]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80095e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ea:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80095ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095f4:	4abb      	ldr	r2, [pc, #748]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80095f6:	430b      	orrs	r3, r1
 80095f8:	6553      	str	r3, [r2, #84]	; 0x54
 80095fa:	e003      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009600:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960c:	f002 0302 	and.w	r3, r2, #2
 8009610:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009614:	2300      	movs	r3, #0
 8009616:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800961a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800961e:	460b      	mov	r3, r1
 8009620:	4313      	orrs	r3, r2
 8009622:	d041      	beq.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800962a:	2b05      	cmp	r3, #5
 800962c:	d824      	bhi.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800962e:	a201      	add	r2, pc, #4	; (adr r2, 8009634 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009634:	08009681 	.word	0x08009681
 8009638:	0800964d 	.word	0x0800964d
 800963c:	08009663 	.word	0x08009663
 8009640:	08009681 	.word	0x08009681
 8009644:	08009681 	.word	0x08009681
 8009648:	08009681 	.word	0x08009681
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800964c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009650:	3308      	adds	r3, #8
 8009652:	2101      	movs	r1, #1
 8009654:	4618      	mov	r0, r3
 8009656:	f000 ff71 	bl	800a53c <RCCEx_PLL2_Config>
 800965a:	4603      	mov	r3, r0
 800965c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009660:	e00f      	b.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009666:	3328      	adds	r3, #40	; 0x28
 8009668:	2101      	movs	r1, #1
 800966a:	4618      	mov	r0, r3
 800966c:	f001 f818 	bl	800a6a0 <RCCEx_PLL3_Config>
 8009670:	4603      	mov	r3, r0
 8009672:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009676:	e004      	b.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800967e:	e000      	b.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009682:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009686:	2b00      	cmp	r3, #0
 8009688:	d10a      	bne.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800968a:	4b96      	ldr	r3, [pc, #600]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800968c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800968e:	f023 0107 	bic.w	r1, r3, #7
 8009692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009696:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009698:	4a92      	ldr	r2, [pc, #584]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800969a:	430b      	orrs	r3, r1
 800969c:	6553      	str	r3, [r2, #84]	; 0x54
 800969e:	e003      	b.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80096a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b0:	f002 0304 	and.w	r3, r2, #4
 80096b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80096b8:	2300      	movs	r3, #0
 80096ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80096be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80096c2:	460b      	mov	r3, r1
 80096c4:	4313      	orrs	r3, r2
 80096c6:	d044      	beq.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80096c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096d0:	2b05      	cmp	r3, #5
 80096d2:	d825      	bhi.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80096d4:	a201      	add	r2, pc, #4	; (adr r2, 80096dc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80096d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096da:	bf00      	nop
 80096dc:	08009729 	.word	0x08009729
 80096e0:	080096f5 	.word	0x080096f5
 80096e4:	0800970b 	.word	0x0800970b
 80096e8:	08009729 	.word	0x08009729
 80096ec:	08009729 	.word	0x08009729
 80096f0:	08009729 	.word	0x08009729
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80096f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096f8:	3308      	adds	r3, #8
 80096fa:	2101      	movs	r1, #1
 80096fc:	4618      	mov	r0, r3
 80096fe:	f000 ff1d 	bl	800a53c <RCCEx_PLL2_Config>
 8009702:	4603      	mov	r3, r0
 8009704:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009708:	e00f      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800970a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800970e:	3328      	adds	r3, #40	; 0x28
 8009710:	2101      	movs	r1, #1
 8009712:	4618      	mov	r0, r3
 8009714:	f000 ffc4 	bl	800a6a0 <RCCEx_PLL3_Config>
 8009718:	4603      	mov	r3, r0
 800971a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800971e:	e004      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009726:	e000      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800972a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800972e:	2b00      	cmp	r3, #0
 8009730:	d10b      	bne.n	800974a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009732:	4b6c      	ldr	r3, [pc, #432]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009736:	f023 0107 	bic.w	r1, r3, #7
 800973a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800973e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009742:	4a68      	ldr	r2, [pc, #416]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009744:	430b      	orrs	r3, r1
 8009746:	6593      	str	r3, [r2, #88]	; 0x58
 8009748:	e003      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800974a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800974e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975a:	f002 0320 	and.w	r3, r2, #32
 800975e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009762:	2300      	movs	r3, #0
 8009764:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009768:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800976c:	460b      	mov	r3, r1
 800976e:	4313      	orrs	r3, r2
 8009770:	d055      	beq.n	800981e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800977a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800977e:	d033      	beq.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009780:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009784:	d82c      	bhi.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800978a:	d02f      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800978c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009790:	d826      	bhi.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009792:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009796:	d02b      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009798:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800979c:	d820      	bhi.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800979e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097a2:	d012      	beq.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80097a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097a8:	d81a      	bhi.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d022      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80097ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097b2:	d115      	bne.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097b8:	3308      	adds	r3, #8
 80097ba:	2100      	movs	r1, #0
 80097bc:	4618      	mov	r0, r3
 80097be:	f000 febd 	bl	800a53c <RCCEx_PLL2_Config>
 80097c2:	4603      	mov	r3, r0
 80097c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80097c8:	e015      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80097ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097ce:	3328      	adds	r3, #40	; 0x28
 80097d0:	2102      	movs	r1, #2
 80097d2:	4618      	mov	r0, r3
 80097d4:	f000 ff64 	bl	800a6a0 <RCCEx_PLL3_Config>
 80097d8:	4603      	mov	r3, r0
 80097da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80097de:	e00a      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80097e6:	e006      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80097e8:	bf00      	nop
 80097ea:	e004      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80097ec:	bf00      	nop
 80097ee:	e002      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80097f0:	bf00      	nop
 80097f2:	e000      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80097f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d10b      	bne.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80097fe:	4b39      	ldr	r3, [pc, #228]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009802:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800980a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800980e:	4a35      	ldr	r2, [pc, #212]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009810:	430b      	orrs	r3, r1
 8009812:	6553      	str	r3, [r2, #84]	; 0x54
 8009814:	e003      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009816:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800981a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800981e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009826:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800982a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800982e:	2300      	movs	r3, #0
 8009830:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009834:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009838:	460b      	mov	r3, r1
 800983a:	4313      	orrs	r3, r2
 800983c:	d058      	beq.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800983e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009842:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009846:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800984a:	d033      	beq.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800984c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009850:	d82c      	bhi.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009856:	d02f      	beq.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800985c:	d826      	bhi.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800985e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009862:	d02b      	beq.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009864:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009868:	d820      	bhi.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800986a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800986e:	d012      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009874:	d81a      	bhi.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009876:	2b00      	cmp	r3, #0
 8009878:	d022      	beq.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800987a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800987e:	d115      	bne.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009884:	3308      	adds	r3, #8
 8009886:	2100      	movs	r1, #0
 8009888:	4618      	mov	r0, r3
 800988a:	f000 fe57 	bl	800a53c <RCCEx_PLL2_Config>
 800988e:	4603      	mov	r3, r0
 8009890:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009894:	e015      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800989a:	3328      	adds	r3, #40	; 0x28
 800989c:	2102      	movs	r1, #2
 800989e:	4618      	mov	r0, r3
 80098a0:	f000 fefe 	bl	800a6a0 <RCCEx_PLL3_Config>
 80098a4:	4603      	mov	r3, r0
 80098a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80098aa:	e00a      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098ac:	2301      	movs	r3, #1
 80098ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80098b2:	e006      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80098b4:	bf00      	nop
 80098b6:	e004      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80098b8:	bf00      	nop
 80098ba:	e002      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80098bc:	bf00      	nop
 80098be:	e000      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80098c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d10e      	bne.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80098ca:	4b06      	ldr	r3, [pc, #24]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ce:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80098d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80098da:	4a02      	ldr	r2, [pc, #8]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098dc:	430b      	orrs	r3, r1
 80098de:	6593      	str	r3, [r2, #88]	; 0x58
 80098e0:	e006      	b.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80098e2:	bf00      	nop
 80098e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80098f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80098fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009900:	2300      	movs	r3, #0
 8009902:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009906:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800990a:	460b      	mov	r3, r1
 800990c:	4313      	orrs	r3, r2
 800990e:	d055      	beq.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009914:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009918:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800991c:	d033      	beq.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800991e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009922:	d82c      	bhi.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009928:	d02f      	beq.n	800998a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800992a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800992e:	d826      	bhi.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009930:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009934:	d02b      	beq.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009936:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800993a:	d820      	bhi.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800993c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009940:	d012      	beq.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009942:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009946:	d81a      	bhi.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009948:	2b00      	cmp	r3, #0
 800994a:	d022      	beq.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800994c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009950:	d115      	bne.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009956:	3308      	adds	r3, #8
 8009958:	2100      	movs	r1, #0
 800995a:	4618      	mov	r0, r3
 800995c:	f000 fdee 	bl	800a53c <RCCEx_PLL2_Config>
 8009960:	4603      	mov	r3, r0
 8009962:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009966:	e015      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800996c:	3328      	adds	r3, #40	; 0x28
 800996e:	2102      	movs	r1, #2
 8009970:	4618      	mov	r0, r3
 8009972:	f000 fe95 	bl	800a6a0 <RCCEx_PLL3_Config>
 8009976:	4603      	mov	r3, r0
 8009978:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800997c:	e00a      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009984:	e006      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009986:	bf00      	nop
 8009988:	e004      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800998a:	bf00      	nop
 800998c:	e002      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800998e:	bf00      	nop
 8009990:	e000      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009992:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009994:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10b      	bne.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800999c:	4ba1      	ldr	r3, [pc, #644]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800999e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099a0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80099a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80099ac:	4a9d      	ldr	r2, [pc, #628]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099ae:	430b      	orrs	r3, r1
 80099b0:	6593      	str	r3, [r2, #88]	; 0x58
 80099b2:	e003      	b.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80099bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c4:	f002 0308 	and.w	r3, r2, #8
 80099c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80099cc:	2300      	movs	r3, #0
 80099ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80099d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80099d6:	460b      	mov	r3, r1
 80099d8:	4313      	orrs	r3, r2
 80099da:	d01e      	beq.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80099dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099e8:	d10c      	bne.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80099ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ee:	3328      	adds	r3, #40	; 0x28
 80099f0:	2102      	movs	r1, #2
 80099f2:	4618      	mov	r0, r3
 80099f4:	f000 fe54 	bl	800a6a0 <RCCEx_PLL3_Config>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d002      	beq.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009a04:	4b87      	ldr	r3, [pc, #540]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a14:	4a83      	ldr	r2, [pc, #524]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a16:	430b      	orrs	r3, r1
 8009a18:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a22:	f002 0310 	and.w	r3, r2, #16
 8009a26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009a30:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009a34:	460b      	mov	r3, r1
 8009a36:	4313      	orrs	r3, r2
 8009a38:	d01e      	beq.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a46:	d10c      	bne.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a4c:	3328      	adds	r3, #40	; 0x28
 8009a4e:	2102      	movs	r1, #2
 8009a50:	4618      	mov	r0, r3
 8009a52:	f000 fe25 	bl	800a6a0 <RCCEx_PLL3_Config>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d002      	beq.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009a62:	4b70      	ldr	r3, [pc, #448]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a72:	4a6c      	ldr	r2, [pc, #432]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a74:	430b      	orrs	r3, r1
 8009a76:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a80:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009a84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009a88:	2300      	movs	r3, #0
 8009a8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009a8e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009a92:	460b      	mov	r3, r1
 8009a94:	4313      	orrs	r3, r2
 8009a96:	d03e      	beq.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009aa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009aa4:	d022      	beq.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009aa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009aaa:	d81b      	bhi.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d003      	beq.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ab4:	d00b      	beq.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009ab6:	e015      	b.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009abc:	3308      	adds	r3, #8
 8009abe:	2100      	movs	r1, #0
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f000 fd3b 	bl	800a53c <RCCEx_PLL2_Config>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009acc:	e00f      	b.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ad2:	3328      	adds	r3, #40	; 0x28
 8009ad4:	2102      	movs	r1, #2
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f000 fde2 	bl	800a6a0 <RCCEx_PLL3_Config>
 8009adc:	4603      	mov	r3, r0
 8009ade:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009ae2:	e004      	b.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009aea:	e000      	b.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d10b      	bne.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009af6:	4b4b      	ldr	r3, [pc, #300]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009afa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009b06:	4a47      	ldr	r2, [pc, #284]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b08:	430b      	orrs	r3, r1
 8009b0a:	6593      	str	r3, [r2, #88]	; 0x58
 8009b0c:	e003      	b.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009b22:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b24:	2300      	movs	r3, #0
 8009b26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009b28:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	d03b      	beq.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b3e:	d01f      	beq.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009b40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b44:	d818      	bhi.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009b46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b4a:	d003      	beq.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009b4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b50:	d007      	beq.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009b52:	e011      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b54:	4b33      	ldr	r3, [pc, #204]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b58:	4a32      	ldr	r2, [pc, #200]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009b60:	e00f      	b.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b66:	3328      	adds	r3, #40	; 0x28
 8009b68:	2101      	movs	r1, #1
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f000 fd98 	bl	800a6a0 <RCCEx_PLL3_Config>
 8009b70:	4603      	mov	r3, r0
 8009b72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009b76:	e004      	b.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b7e:	e000      	b.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d10b      	bne.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009b8a:	4b26      	ldr	r3, [pc, #152]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b8e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b9a:	4a22      	ldr	r2, [pc, #136]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b9c:	430b      	orrs	r3, r1
 8009b9e:	6553      	str	r3, [r2, #84]	; 0x54
 8009ba0:	e003      	b.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ba6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009bb6:	673b      	str	r3, [r7, #112]	; 0x70
 8009bb8:	2300      	movs	r3, #0
 8009bba:	677b      	str	r3, [r7, #116]	; 0x74
 8009bbc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	d034      	beq.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d003      	beq.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bd4:	d007      	beq.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009bd6:	e011      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bd8:	4b12      	ldr	r3, [pc, #72]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bdc:	4a11      	ldr	r2, [pc, #68]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009be2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009be4:	e00e      	b.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bea:	3308      	adds	r3, #8
 8009bec:	2102      	movs	r1, #2
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f000 fca4 	bl	800a53c <RCCEx_PLL2_Config>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009bfa:	e003      	b.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d10d      	bne.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009c0c:	4b05      	ldr	r3, [pc, #20]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c1a:	4a02      	ldr	r2, [pc, #8]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c1c:	430b      	orrs	r3, r1
 8009c1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c20:	e006      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009c22:	bf00      	nop
 8009c24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c38:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009c3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c3e:	2300      	movs	r3, #0
 8009c40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c42:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009c46:	460b      	mov	r3, r1
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	d00c      	beq.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c50:	3328      	adds	r3, #40	; 0x28
 8009c52:	2102      	movs	r1, #2
 8009c54:	4618      	mov	r0, r3
 8009c56:	f000 fd23 	bl	800a6a0 <RCCEx_PLL3_Config>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d002      	beq.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009c60:	2301      	movs	r3, #1
 8009c62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009c72:	663b      	str	r3, [r7, #96]	; 0x60
 8009c74:	2300      	movs	r3, #0
 8009c76:	667b      	str	r3, [r7, #100]	; 0x64
 8009c78:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	d038      	beq.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c8e:	d018      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009c90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c94:	d811      	bhi.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009c96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c9a:	d014      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ca0:	d80b      	bhi.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d011      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009caa:	d106      	bne.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cac:	4bc3      	ldr	r3, [pc, #780]	; (8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb0:	4ac2      	ldr	r2, [pc, #776]	; (8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009cb8:	e008      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009cc0:	e004      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009cc2:	bf00      	nop
 8009cc4:	e002      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009cc6:	bf00      	nop
 8009cc8:	e000      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009cca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d10b      	bne.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009cd4:	4bb9      	ldr	r3, [pc, #740]	; (8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cd8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ce4:	4ab5      	ldr	r2, [pc, #724]	; (8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ce6:	430b      	orrs	r3, r1
 8009ce8:	6553      	str	r3, [r2, #84]	; 0x54
 8009cea:	e003      	b.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cf0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009d00:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d02:	2300      	movs	r3, #0
 8009d04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d06:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	d009      	beq.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009d10:	4baa      	ldr	r3, [pc, #680]	; (8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d1e:	4aa7      	ldr	r2, [pc, #668]	; (8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d20:	430b      	orrs	r3, r1
 8009d22:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009d30:	653b      	str	r3, [r7, #80]	; 0x50
 8009d32:	2300      	movs	r3, #0
 8009d34:	657b      	str	r3, [r7, #84]	; 0x54
 8009d36:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	d00a      	beq.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009d40:	4b9e      	ldr	r3, [pc, #632]	; (8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d4c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009d50:	4a9a      	ldr	r2, [pc, #616]	; (8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d52:	430b      	orrs	r3, r1
 8009d54:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009d62:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d64:	2300      	movs	r3, #0
 8009d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d68:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	d009      	beq.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009d72:	4b92      	ldr	r3, [pc, #584]	; (8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d76:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d80:	4a8e      	ldr	r2, [pc, #568]	; (8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d82:	430b      	orrs	r3, r1
 8009d84:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009d92:	643b      	str	r3, [r7, #64]	; 0x40
 8009d94:	2300      	movs	r3, #0
 8009d96:	647b      	str	r3, [r7, #68]	; 0x44
 8009d98:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	d00e      	beq.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009da2:	4b86      	ldr	r3, [pc, #536]	; (8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	4a85      	ldr	r2, [pc, #532]	; (8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009da8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009dac:	6113      	str	r3, [r2, #16]
 8009dae:	4b83      	ldr	r3, [pc, #524]	; (8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009db0:	6919      	ldr	r1, [r3, #16]
 8009db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009db6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009dba:	4a80      	ldr	r2, [pc, #512]	; (8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009dbc:	430b      	orrs	r3, r1
 8009dbe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009dcc:	63bb      	str	r3, [r7, #56]	; 0x38
 8009dce:	2300      	movs	r3, #0
 8009dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009dd2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	d009      	beq.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009ddc:	4b77      	ldr	r3, [pc, #476]	; (8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009de0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dea:	4a74      	ldr	r2, [pc, #464]	; (8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009dec:	430b      	orrs	r3, r1
 8009dee:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009dfc:	633b      	str	r3, [r7, #48]	; 0x30
 8009dfe:	2300      	movs	r3, #0
 8009e00:	637b      	str	r3, [r7, #52]	; 0x34
 8009e02:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009e06:	460b      	mov	r3, r1
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	d00a      	beq.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009e0c:	4b6b      	ldr	r3, [pc, #428]	; (8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e10:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e1c:	4a67      	ldr	r2, [pc, #412]	; (8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e1e:	430b      	orrs	r3, r1
 8009e20:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	62b9      	str	r1, [r7, #40]	; 0x28
 8009e2e:	f003 0301 	and.w	r3, r3, #1
 8009e32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e34:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009e38:	460b      	mov	r3, r1
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	d011      	beq.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e42:	3308      	adds	r3, #8
 8009e44:	2100      	movs	r1, #0
 8009e46:	4618      	mov	r0, r3
 8009e48:	f000 fb78 	bl	800a53c <RCCEx_PLL2_Config>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009e52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d003      	beq.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6a:	2100      	movs	r1, #0
 8009e6c:	6239      	str	r1, [r7, #32]
 8009e6e:	f003 0302 	and.w	r3, r3, #2
 8009e72:	627b      	str	r3, [r7, #36]	; 0x24
 8009e74:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009e78:	460b      	mov	r3, r1
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	d011      	beq.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e82:	3308      	adds	r3, #8
 8009e84:	2101      	movs	r1, #1
 8009e86:	4618      	mov	r0, r3
 8009e88:	f000 fb58 	bl	800a53c <RCCEx_PLL2_Config>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009e92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d003      	beq.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eaa:	2100      	movs	r1, #0
 8009eac:	61b9      	str	r1, [r7, #24]
 8009eae:	f003 0304 	and.w	r3, r3, #4
 8009eb2:	61fb      	str	r3, [r7, #28]
 8009eb4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009eb8:	460b      	mov	r3, r1
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	d011      	beq.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ec2:	3308      	adds	r3, #8
 8009ec4:	2102      	movs	r1, #2
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f000 fb38 	bl	800a53c <RCCEx_PLL2_Config>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d003      	beq.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ede:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eea:	2100      	movs	r1, #0
 8009eec:	6139      	str	r1, [r7, #16]
 8009eee:	f003 0308 	and.w	r3, r3, #8
 8009ef2:	617b      	str	r3, [r7, #20]
 8009ef4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009ef8:	460b      	mov	r3, r1
 8009efa:	4313      	orrs	r3, r2
 8009efc:	d011      	beq.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f02:	3328      	adds	r3, #40	; 0x28
 8009f04:	2100      	movs	r1, #0
 8009f06:	4618      	mov	r0, r3
 8009f08:	f000 fbca 	bl	800a6a0 <RCCEx_PLL3_Config>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8009f12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d003      	beq.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2a:	2100      	movs	r1, #0
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	f003 0310 	and.w	r3, r3, #16
 8009f32:	60fb      	str	r3, [r7, #12]
 8009f34:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009f38:	460b      	mov	r3, r1
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	d011      	beq.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f42:	3328      	adds	r3, #40	; 0x28
 8009f44:	2101      	movs	r1, #1
 8009f46:	4618      	mov	r0, r3
 8009f48:	f000 fbaa 	bl	800a6a0 <RCCEx_PLL3_Config>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009f52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d003      	beq.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	6039      	str	r1, [r7, #0]
 8009f6e:	f003 0320 	and.w	r3, r3, #32
 8009f72:	607b      	str	r3, [r7, #4]
 8009f74:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009f78:	460b      	mov	r3, r1
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	d011      	beq.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f82:	3328      	adds	r3, #40	; 0x28
 8009f84:	2102      	movs	r1, #2
 8009f86:	4618      	mov	r0, r3
 8009f88:	f000 fb8a 	bl	800a6a0 <RCCEx_PLL3_Config>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009f92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d003      	beq.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8009fa2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d101      	bne.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009faa:	2300      	movs	r3, #0
 8009fac:	e000      	b.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fbc:	58024400 	.word	0x58024400

08009fc0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009fc4:	f7fe fd96 	bl	8008af4 <HAL_RCC_GetHCLKFreq>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	4b06      	ldr	r3, [pc, #24]	; (8009fe4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009fcc:	6a1b      	ldr	r3, [r3, #32]
 8009fce:	091b      	lsrs	r3, r3, #4
 8009fd0:	f003 0307 	and.w	r3, r3, #7
 8009fd4:	4904      	ldr	r1, [pc, #16]	; (8009fe8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009fd6:	5ccb      	ldrb	r3, [r1, r3]
 8009fd8:	f003 031f 	and.w	r3, r3, #31
 8009fdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	58024400 	.word	0x58024400
 8009fe8:	08010350 	.word	0x08010350

08009fec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b089      	sub	sp, #36	; 0x24
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ff4:	4ba1      	ldr	r3, [pc, #644]	; (800a27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ff8:	f003 0303 	and.w	r3, r3, #3
 8009ffc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009ffe:	4b9f      	ldr	r3, [pc, #636]	; (800a27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a002:	0b1b      	lsrs	r3, r3, #12
 800a004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a008:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a00a:	4b9c      	ldr	r3, [pc, #624]	; (800a27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a00e:	091b      	lsrs	r3, r3, #4
 800a010:	f003 0301 	and.w	r3, r3, #1
 800a014:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a016:	4b99      	ldr	r3, [pc, #612]	; (800a27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a01a:	08db      	lsrs	r3, r3, #3
 800a01c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a020:	693a      	ldr	r2, [r7, #16]
 800a022:	fb02 f303 	mul.w	r3, r2, r3
 800a026:	ee07 3a90 	vmov	s15, r3
 800a02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a02e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	2b00      	cmp	r3, #0
 800a036:	f000 8111 	beq.w	800a25c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	2b02      	cmp	r3, #2
 800a03e:	f000 8083 	beq.w	800a148 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	2b02      	cmp	r3, #2
 800a046:	f200 80a1 	bhi.w	800a18c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d003      	beq.n	800a058 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a050:	69bb      	ldr	r3, [r7, #24]
 800a052:	2b01      	cmp	r3, #1
 800a054:	d056      	beq.n	800a104 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a056:	e099      	b.n	800a18c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a058:	4b88      	ldr	r3, [pc, #544]	; (800a27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f003 0320 	and.w	r3, r3, #32
 800a060:	2b00      	cmp	r3, #0
 800a062:	d02d      	beq.n	800a0c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a064:	4b85      	ldr	r3, [pc, #532]	; (800a27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	08db      	lsrs	r3, r3, #3
 800a06a:	f003 0303 	and.w	r3, r3, #3
 800a06e:	4a84      	ldr	r2, [pc, #528]	; (800a280 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a070:	fa22 f303 	lsr.w	r3, r2, r3
 800a074:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	ee07 3a90 	vmov	s15, r3
 800a07c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	ee07 3a90 	vmov	s15, r3
 800a086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a08a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a08e:	4b7b      	ldr	r3, [pc, #492]	; (800a27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a096:	ee07 3a90 	vmov	s15, r3
 800a09a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a09e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a0a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a0be:	e087      	b.n	800a1d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	ee07 3a90 	vmov	s15, r3
 800a0c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a288 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a0ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0d2:	4b6a      	ldr	r3, [pc, #424]	; (800a27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0da:	ee07 3a90 	vmov	s15, r3
 800a0de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a0ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a102:	e065      	b.n	800a1d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	ee07 3a90 	vmov	s15, r3
 800a10a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a10e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a28c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a116:	4b59      	ldr	r3, [pc, #356]	; (800a27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a11a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a11e:	ee07 3a90 	vmov	s15, r3
 800a122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a126:	ed97 6a03 	vldr	s12, [r7, #12]
 800a12a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a12e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a13a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a13e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a142:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a146:	e043      	b.n	800a1d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	ee07 3a90 	vmov	s15, r3
 800a14e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a152:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a290 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a15a:	4b48      	ldr	r3, [pc, #288]	; (800a27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a15c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a15e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a162:	ee07 3a90 	vmov	s15, r3
 800a166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a16a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a16e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a17a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a17e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a182:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a186:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a18a:	e021      	b.n	800a1d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	ee07 3a90 	vmov	s15, r3
 800a192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a196:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a28c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a19a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a19e:	4b37      	ldr	r3, [pc, #220]	; (800a27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1a6:	ee07 3a90 	vmov	s15, r3
 800a1aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a1d0:	4b2a      	ldr	r3, [pc, #168]	; (800a27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d4:	0a5b      	lsrs	r3, r3, #9
 800a1d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1da:	ee07 3a90 	vmov	s15, r3
 800a1de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1f6:	ee17 2a90 	vmov	r2, s15
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a1fe:	4b1f      	ldr	r3, [pc, #124]	; (800a27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a202:	0c1b      	lsrs	r3, r3, #16
 800a204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a208:	ee07 3a90 	vmov	s15, r3
 800a20c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a210:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a214:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a218:	edd7 6a07 	vldr	s13, [r7, #28]
 800a21c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a224:	ee17 2a90 	vmov	r2, s15
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a22c:	4b13      	ldr	r3, [pc, #76]	; (800a27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a230:	0e1b      	lsrs	r3, r3, #24
 800a232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a236:	ee07 3a90 	vmov	s15, r3
 800a23a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a23e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a242:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a246:	edd7 6a07 	vldr	s13, [r7, #28]
 800a24a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a24e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a252:	ee17 2a90 	vmov	r2, s15
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a25a:	e008      	b.n	800a26e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	609a      	str	r2, [r3, #8]
}
 800a26e:	bf00      	nop
 800a270:	3724      	adds	r7, #36	; 0x24
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop
 800a27c:	58024400 	.word	0x58024400
 800a280:	03d09000 	.word	0x03d09000
 800a284:	46000000 	.word	0x46000000
 800a288:	4c742400 	.word	0x4c742400
 800a28c:	4a742400 	.word	0x4a742400
 800a290:	4bbebc20 	.word	0x4bbebc20

0800a294 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a294:	b480      	push	{r7}
 800a296:	b089      	sub	sp, #36	; 0x24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a29c:	4ba1      	ldr	r3, [pc, #644]	; (800a524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a0:	f003 0303 	and.w	r3, r3, #3
 800a2a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a2a6:	4b9f      	ldr	r3, [pc, #636]	; (800a524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2aa:	0d1b      	lsrs	r3, r3, #20
 800a2ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a2b2:	4b9c      	ldr	r3, [pc, #624]	; (800a524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b6:	0a1b      	lsrs	r3, r3, #8
 800a2b8:	f003 0301 	and.w	r3, r3, #1
 800a2bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a2be:	4b99      	ldr	r3, [pc, #612]	; (800a524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2c2:	08db      	lsrs	r3, r3, #3
 800a2c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a2c8:	693a      	ldr	r2, [r7, #16]
 800a2ca:	fb02 f303 	mul.w	r3, r2, r3
 800a2ce:	ee07 3a90 	vmov	s15, r3
 800a2d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f000 8111 	beq.w	800a504 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	2b02      	cmp	r3, #2
 800a2e6:	f000 8083 	beq.w	800a3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	2b02      	cmp	r3, #2
 800a2ee:	f200 80a1 	bhi.w	800a434 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d003      	beq.n	800a300 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d056      	beq.n	800a3ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a2fe:	e099      	b.n	800a434 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a300:	4b88      	ldr	r3, [pc, #544]	; (800a524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f003 0320 	and.w	r3, r3, #32
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d02d      	beq.n	800a368 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a30c:	4b85      	ldr	r3, [pc, #532]	; (800a524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	08db      	lsrs	r3, r3, #3
 800a312:	f003 0303 	and.w	r3, r3, #3
 800a316:	4a84      	ldr	r2, [pc, #528]	; (800a528 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a318:	fa22 f303 	lsr.w	r3, r2, r3
 800a31c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	ee07 3a90 	vmov	s15, r3
 800a324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	ee07 3a90 	vmov	s15, r3
 800a32e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a336:	4b7b      	ldr	r3, [pc, #492]	; (800a524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a33a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a33e:	ee07 3a90 	vmov	s15, r3
 800a342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a346:	ed97 6a03 	vldr	s12, [r7, #12]
 800a34a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a52c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a34e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a35a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a35e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a362:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a366:	e087      	b.n	800a478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	ee07 3a90 	vmov	s15, r3
 800a36e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a372:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a530 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a37a:	4b6a      	ldr	r3, [pc, #424]	; (800a524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a382:	ee07 3a90 	vmov	s15, r3
 800a386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a38a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a38e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a52c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a39a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a39e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3aa:	e065      	b.n	800a478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	ee07 3a90 	vmov	s15, r3
 800a3b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a534 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a3ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3be:	4b59      	ldr	r3, [pc, #356]	; (800a524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3c6:	ee07 3a90 	vmov	s15, r3
 800a3ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a52c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a3d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3ee:	e043      	b.n	800a478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	ee07 3a90 	vmov	s15, r3
 800a3f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a538 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a3fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a402:	4b48      	ldr	r3, [pc, #288]	; (800a524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a40a:	ee07 3a90 	vmov	s15, r3
 800a40e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a412:	ed97 6a03 	vldr	s12, [r7, #12]
 800a416:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a52c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a41a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a41e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a42a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a42e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a432:	e021      	b.n	800a478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	ee07 3a90 	vmov	s15, r3
 800a43a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a43e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a534 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a446:	4b37      	ldr	r3, [pc, #220]	; (800a524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a44e:	ee07 3a90 	vmov	s15, r3
 800a452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a456:	ed97 6a03 	vldr	s12, [r7, #12]
 800a45a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a52c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a45e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a46a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a46e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a472:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a476:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a478:	4b2a      	ldr	r3, [pc, #168]	; (800a524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a47a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a47c:	0a5b      	lsrs	r3, r3, #9
 800a47e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a482:	ee07 3a90 	vmov	s15, r3
 800a486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a48a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a48e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a492:	edd7 6a07 	vldr	s13, [r7, #28]
 800a496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a49a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a49e:	ee17 2a90 	vmov	r2, s15
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a4a6:	4b1f      	ldr	r3, [pc, #124]	; (800a524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4aa:	0c1b      	lsrs	r3, r3, #16
 800a4ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4b0:	ee07 3a90 	vmov	s15, r3
 800a4b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4cc:	ee17 2a90 	vmov	r2, s15
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a4d4:	4b13      	ldr	r3, [pc, #76]	; (800a524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d8:	0e1b      	lsrs	r3, r3, #24
 800a4da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4de:	ee07 3a90 	vmov	s15, r3
 800a4e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4fa:	ee17 2a90 	vmov	r2, s15
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a502:	e008      	b.n	800a516 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	609a      	str	r2, [r3, #8]
}
 800a516:	bf00      	nop
 800a518:	3724      	adds	r7, #36	; 0x24
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr
 800a522:	bf00      	nop
 800a524:	58024400 	.word	0x58024400
 800a528:	03d09000 	.word	0x03d09000
 800a52c:	46000000 	.word	0x46000000
 800a530:	4c742400 	.word	0x4c742400
 800a534:	4a742400 	.word	0x4a742400
 800a538:	4bbebc20 	.word	0x4bbebc20

0800a53c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a546:	2300      	movs	r3, #0
 800a548:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a54a:	4b53      	ldr	r3, [pc, #332]	; (800a698 <RCCEx_PLL2_Config+0x15c>)
 800a54c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a54e:	f003 0303 	and.w	r3, r3, #3
 800a552:	2b03      	cmp	r3, #3
 800a554:	d101      	bne.n	800a55a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a556:	2301      	movs	r3, #1
 800a558:	e099      	b.n	800a68e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a55a:	4b4f      	ldr	r3, [pc, #316]	; (800a698 <RCCEx_PLL2_Config+0x15c>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a4e      	ldr	r2, [pc, #312]	; (800a698 <RCCEx_PLL2_Config+0x15c>)
 800a560:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a566:	f7f9 fc99 	bl	8003e9c <HAL_GetTick>
 800a56a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a56c:	e008      	b.n	800a580 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a56e:	f7f9 fc95 	bl	8003e9c <HAL_GetTick>
 800a572:	4602      	mov	r2, r0
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	1ad3      	subs	r3, r2, r3
 800a578:	2b02      	cmp	r3, #2
 800a57a:	d901      	bls.n	800a580 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a57c:	2303      	movs	r3, #3
 800a57e:	e086      	b.n	800a68e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a580:	4b45      	ldr	r3, [pc, #276]	; (800a698 <RCCEx_PLL2_Config+0x15c>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d1f0      	bne.n	800a56e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a58c:	4b42      	ldr	r3, [pc, #264]	; (800a698 <RCCEx_PLL2_Config+0x15c>)
 800a58e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a590:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	031b      	lsls	r3, r3, #12
 800a59a:	493f      	ldr	r1, [pc, #252]	; (800a698 <RCCEx_PLL2_Config+0x15c>)
 800a59c:	4313      	orrs	r3, r2
 800a59e:	628b      	str	r3, [r1, #40]	; 0x28
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	3b01      	subs	r3, #1
 800a5a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	3b01      	subs	r3, #1
 800a5b0:	025b      	lsls	r3, r3, #9
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	431a      	orrs	r2, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	68db      	ldr	r3, [r3, #12]
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	041b      	lsls	r3, r3, #16
 800a5be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a5c2:	431a      	orrs	r2, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	691b      	ldr	r3, [r3, #16]
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	061b      	lsls	r3, r3, #24
 800a5cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a5d0:	4931      	ldr	r1, [pc, #196]	; (800a698 <RCCEx_PLL2_Config+0x15c>)
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a5d6:	4b30      	ldr	r3, [pc, #192]	; (800a698 <RCCEx_PLL2_Config+0x15c>)
 800a5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	695b      	ldr	r3, [r3, #20]
 800a5e2:	492d      	ldr	r1, [pc, #180]	; (800a698 <RCCEx_PLL2_Config+0x15c>)
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a5e8:	4b2b      	ldr	r3, [pc, #172]	; (800a698 <RCCEx_PLL2_Config+0x15c>)
 800a5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ec:	f023 0220 	bic.w	r2, r3, #32
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	699b      	ldr	r3, [r3, #24]
 800a5f4:	4928      	ldr	r1, [pc, #160]	; (800a698 <RCCEx_PLL2_Config+0x15c>)
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a5fa:	4b27      	ldr	r3, [pc, #156]	; (800a698 <RCCEx_PLL2_Config+0x15c>)
 800a5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5fe:	4a26      	ldr	r2, [pc, #152]	; (800a698 <RCCEx_PLL2_Config+0x15c>)
 800a600:	f023 0310 	bic.w	r3, r3, #16
 800a604:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a606:	4b24      	ldr	r3, [pc, #144]	; (800a698 <RCCEx_PLL2_Config+0x15c>)
 800a608:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a60a:	4b24      	ldr	r3, [pc, #144]	; (800a69c <RCCEx_PLL2_Config+0x160>)
 800a60c:	4013      	ands	r3, r2
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	69d2      	ldr	r2, [r2, #28]
 800a612:	00d2      	lsls	r2, r2, #3
 800a614:	4920      	ldr	r1, [pc, #128]	; (800a698 <RCCEx_PLL2_Config+0x15c>)
 800a616:	4313      	orrs	r3, r2
 800a618:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a61a:	4b1f      	ldr	r3, [pc, #124]	; (800a698 <RCCEx_PLL2_Config+0x15c>)
 800a61c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a61e:	4a1e      	ldr	r2, [pc, #120]	; (800a698 <RCCEx_PLL2_Config+0x15c>)
 800a620:	f043 0310 	orr.w	r3, r3, #16
 800a624:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d106      	bne.n	800a63a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a62c:	4b1a      	ldr	r3, [pc, #104]	; (800a698 <RCCEx_PLL2_Config+0x15c>)
 800a62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a630:	4a19      	ldr	r2, [pc, #100]	; (800a698 <RCCEx_PLL2_Config+0x15c>)
 800a632:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a636:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a638:	e00f      	b.n	800a65a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d106      	bne.n	800a64e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a640:	4b15      	ldr	r3, [pc, #84]	; (800a698 <RCCEx_PLL2_Config+0x15c>)
 800a642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a644:	4a14      	ldr	r2, [pc, #80]	; (800a698 <RCCEx_PLL2_Config+0x15c>)
 800a646:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a64a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a64c:	e005      	b.n	800a65a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a64e:	4b12      	ldr	r3, [pc, #72]	; (800a698 <RCCEx_PLL2_Config+0x15c>)
 800a650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a652:	4a11      	ldr	r2, [pc, #68]	; (800a698 <RCCEx_PLL2_Config+0x15c>)
 800a654:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a658:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a65a:	4b0f      	ldr	r3, [pc, #60]	; (800a698 <RCCEx_PLL2_Config+0x15c>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4a0e      	ldr	r2, [pc, #56]	; (800a698 <RCCEx_PLL2_Config+0x15c>)
 800a660:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a664:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a666:	f7f9 fc19 	bl	8003e9c <HAL_GetTick>
 800a66a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a66c:	e008      	b.n	800a680 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a66e:	f7f9 fc15 	bl	8003e9c <HAL_GetTick>
 800a672:	4602      	mov	r2, r0
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	1ad3      	subs	r3, r2, r3
 800a678:	2b02      	cmp	r3, #2
 800a67a:	d901      	bls.n	800a680 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a67c:	2303      	movs	r3, #3
 800a67e:	e006      	b.n	800a68e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a680:	4b05      	ldr	r3, [pc, #20]	; (800a698 <RCCEx_PLL2_Config+0x15c>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d0f0      	beq.n	800a66e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3710      	adds	r7, #16
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	58024400 	.word	0x58024400
 800a69c:	ffff0007 	.word	0xffff0007

0800a6a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a6ae:	4b53      	ldr	r3, [pc, #332]	; (800a7fc <RCCEx_PLL3_Config+0x15c>)
 800a6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6b2:	f003 0303 	and.w	r3, r3, #3
 800a6b6:	2b03      	cmp	r3, #3
 800a6b8:	d101      	bne.n	800a6be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e099      	b.n	800a7f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a6be:	4b4f      	ldr	r3, [pc, #316]	; (800a7fc <RCCEx_PLL3_Config+0x15c>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a4e      	ldr	r2, [pc, #312]	; (800a7fc <RCCEx_PLL3_Config+0x15c>)
 800a6c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a6c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6ca:	f7f9 fbe7 	bl	8003e9c <HAL_GetTick>
 800a6ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a6d0:	e008      	b.n	800a6e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a6d2:	f7f9 fbe3 	bl	8003e9c <HAL_GetTick>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	1ad3      	subs	r3, r2, r3
 800a6dc:	2b02      	cmp	r3, #2
 800a6de:	d901      	bls.n	800a6e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a6e0:	2303      	movs	r3, #3
 800a6e2:	e086      	b.n	800a7f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a6e4:	4b45      	ldr	r3, [pc, #276]	; (800a7fc <RCCEx_PLL3_Config+0x15c>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d1f0      	bne.n	800a6d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a6f0:	4b42      	ldr	r3, [pc, #264]	; (800a7fc <RCCEx_PLL3_Config+0x15c>)
 800a6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	051b      	lsls	r3, r3, #20
 800a6fe:	493f      	ldr	r1, [pc, #252]	; (800a7fc <RCCEx_PLL3_Config+0x15c>)
 800a700:	4313      	orrs	r3, r2
 800a702:	628b      	str	r3, [r1, #40]	; 0x28
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	3b01      	subs	r3, #1
 800a70a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	689b      	ldr	r3, [r3, #8]
 800a712:	3b01      	subs	r3, #1
 800a714:	025b      	lsls	r3, r3, #9
 800a716:	b29b      	uxth	r3, r3
 800a718:	431a      	orrs	r2, r3
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	3b01      	subs	r3, #1
 800a720:	041b      	lsls	r3, r3, #16
 800a722:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a726:	431a      	orrs	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	3b01      	subs	r3, #1
 800a72e:	061b      	lsls	r3, r3, #24
 800a730:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a734:	4931      	ldr	r1, [pc, #196]	; (800a7fc <RCCEx_PLL3_Config+0x15c>)
 800a736:	4313      	orrs	r3, r2
 800a738:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a73a:	4b30      	ldr	r3, [pc, #192]	; (800a7fc <RCCEx_PLL3_Config+0x15c>)
 800a73c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	695b      	ldr	r3, [r3, #20]
 800a746:	492d      	ldr	r1, [pc, #180]	; (800a7fc <RCCEx_PLL3_Config+0x15c>)
 800a748:	4313      	orrs	r3, r2
 800a74a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a74c:	4b2b      	ldr	r3, [pc, #172]	; (800a7fc <RCCEx_PLL3_Config+0x15c>)
 800a74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a750:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	699b      	ldr	r3, [r3, #24]
 800a758:	4928      	ldr	r1, [pc, #160]	; (800a7fc <RCCEx_PLL3_Config+0x15c>)
 800a75a:	4313      	orrs	r3, r2
 800a75c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a75e:	4b27      	ldr	r3, [pc, #156]	; (800a7fc <RCCEx_PLL3_Config+0x15c>)
 800a760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a762:	4a26      	ldr	r2, [pc, #152]	; (800a7fc <RCCEx_PLL3_Config+0x15c>)
 800a764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a768:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a76a:	4b24      	ldr	r3, [pc, #144]	; (800a7fc <RCCEx_PLL3_Config+0x15c>)
 800a76c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a76e:	4b24      	ldr	r3, [pc, #144]	; (800a800 <RCCEx_PLL3_Config+0x160>)
 800a770:	4013      	ands	r3, r2
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	69d2      	ldr	r2, [r2, #28]
 800a776:	00d2      	lsls	r2, r2, #3
 800a778:	4920      	ldr	r1, [pc, #128]	; (800a7fc <RCCEx_PLL3_Config+0x15c>)
 800a77a:	4313      	orrs	r3, r2
 800a77c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a77e:	4b1f      	ldr	r3, [pc, #124]	; (800a7fc <RCCEx_PLL3_Config+0x15c>)
 800a780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a782:	4a1e      	ldr	r2, [pc, #120]	; (800a7fc <RCCEx_PLL3_Config+0x15c>)
 800a784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a788:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d106      	bne.n	800a79e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a790:	4b1a      	ldr	r3, [pc, #104]	; (800a7fc <RCCEx_PLL3_Config+0x15c>)
 800a792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a794:	4a19      	ldr	r2, [pc, #100]	; (800a7fc <RCCEx_PLL3_Config+0x15c>)
 800a796:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a79a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a79c:	e00f      	b.n	800a7be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d106      	bne.n	800a7b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a7a4:	4b15      	ldr	r3, [pc, #84]	; (800a7fc <RCCEx_PLL3_Config+0x15c>)
 800a7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a8:	4a14      	ldr	r2, [pc, #80]	; (800a7fc <RCCEx_PLL3_Config+0x15c>)
 800a7aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a7ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7b0:	e005      	b.n	800a7be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a7b2:	4b12      	ldr	r3, [pc, #72]	; (800a7fc <RCCEx_PLL3_Config+0x15c>)
 800a7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b6:	4a11      	ldr	r2, [pc, #68]	; (800a7fc <RCCEx_PLL3_Config+0x15c>)
 800a7b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a7be:	4b0f      	ldr	r3, [pc, #60]	; (800a7fc <RCCEx_PLL3_Config+0x15c>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a0e      	ldr	r2, [pc, #56]	; (800a7fc <RCCEx_PLL3_Config+0x15c>)
 800a7c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7ca:	f7f9 fb67 	bl	8003e9c <HAL_GetTick>
 800a7ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a7d0:	e008      	b.n	800a7e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a7d2:	f7f9 fb63 	bl	8003e9c <HAL_GetTick>
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	1ad3      	subs	r3, r2, r3
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	d901      	bls.n	800a7e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a7e0:	2303      	movs	r3, #3
 800a7e2:	e006      	b.n	800a7f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a7e4:	4b05      	ldr	r3, [pc, #20]	; (800a7fc <RCCEx_PLL3_Config+0x15c>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d0f0      	beq.n	800a7d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3710      	adds	r7, #16
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	58024400 	.word	0x58024400
 800a800:	ffff0007 	.word	0xffff0007

0800a804 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d101      	bne.n	800a818 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a814:	2301      	movs	r3, #1
 800a816:	e02b      	b.n	800a870 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	2b00      	cmp	r3, #0
 800a822:	d106      	bne.n	800a832 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 f825 	bl	800a87c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2202      	movs	r2, #2
 800a836:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	3304      	adds	r3, #4
 800a842:	4619      	mov	r1, r3
 800a844:	4610      	mov	r0, r2
 800a846:	f002 fa2f 	bl	800cca8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6818      	ldr	r0, [r3, #0]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	461a      	mov	r2, r3
 800a854:	6839      	ldr	r1, [r7, #0]
 800a856:	f002 fa83 	bl	800cd60 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a85a:	4b07      	ldr	r3, [pc, #28]	; (800a878 <HAL_SDRAM_Init+0x74>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a06      	ldr	r2, [pc, #24]	; (800a878 <HAL_SDRAM_Init+0x74>)
 800a860:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a864:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2201      	movs	r2, #1
 800a86a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a86e:	2300      	movs	r3, #0
}
 800a870:	4618      	mov	r0, r3
 800a872:	3708      	adds	r7, #8
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}
 800a878:	52004000 	.word	0x52004000

0800a87c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800a884:	bf00      	nop
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <HAL_SDRAM_DMA_XferErrorCallback>:
  * @brief  DMA transfer complete error callback.
  * @param  hmdma DMA handle
  * @retval None
  */
__weak void HAL_SDRAM_DMA_XferErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  UNUSED(hmdma);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_DMA_XferErrorCallback could be implemented in the user file
   */
}
 800a898:	bf00      	nop
 800a89a:	370c      	adds	r7, #12
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <HAL_SDRAM_Read_DMA>:
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Read_DMA(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pDstBuffer,
                                     uint32_t BufferSize)
{
 800a8a4:	b590      	push	{r4, r7, lr}
 800a8a6:	b089      	sub	sp, #36	; 0x24
 800a8a8:	af02      	add	r7, sp, #8
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	607a      	str	r2, [r7, #4]
 800a8b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a8b8:	75bb      	strb	r3, [r7, #22]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a8ba:	7dbb      	ldrb	r3, [r7, #22]
 800a8bc:	2b02      	cmp	r3, #2
 800a8be:	d102      	bne.n	800a8c6 <HAL_SDRAM_Read_DMA+0x22>
  {
    status = HAL_BUSY;
 800a8c0:	2302      	movs	r3, #2
 800a8c2:	75fb      	strb	r3, [r7, #23]
 800a8c4:	e037      	b.n	800a936 <HAL_SDRAM_Read_DMA+0x92>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_WRITE_PROTECTED))
 800a8c6:	7dbb      	ldrb	r3, [r7, #22]
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d002      	beq.n	800a8d2 <HAL_SDRAM_Read_DMA+0x2e>
 800a8cc:	7dbb      	ldrb	r3, [r7, #22]
 800a8ce:	2b04      	cmp	r3, #4
 800a8d0:	d12f      	bne.n	800a932 <HAL_SDRAM_Read_DMA+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hsdram);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d101      	bne.n	800a8e0 <HAL_SDRAM_Read_DMA+0x3c>
 800a8dc:	2302      	movs	r3, #2
 800a8de:	e02b      	b.n	800a938 <HAL_SDRAM_Read_DMA+0x94>
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Update the SDRAM controller state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2202      	movs	r2, #2
 800a8ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Configure DMA user callbacks */
    if (state == HAL_SDRAM_STATE_READY)
 800a8f0:	7dbb      	ldrb	r3, [r7, #22]
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d104      	bne.n	800a900 <HAL_SDRAM_Read_DMA+0x5c>
    {
      hsdram->hmdma->XferCpltCallback = SDRAM_DMACplt;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8fa:	4a11      	ldr	r2, [pc, #68]	; (800a940 <HAL_SDRAM_Read_DMA+0x9c>)
 800a8fc:	645a      	str	r2, [r3, #68]	; 0x44
 800a8fe:	e003      	b.n	800a908 <HAL_SDRAM_Read_DMA+0x64>
    }
    else
    {
      hsdram->hmdma->XferCpltCallback = SDRAM_DMACpltProt;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a904:	4a0f      	ldr	r2, [pc, #60]	; (800a944 <HAL_SDRAM_Read_DMA+0xa0>)
 800a906:	645a      	str	r2, [r3, #68]	; 0x44
    }
    hsdram->hmdma->XferErrorCallback = SDRAM_DMAError;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a90c:	4a0e      	ldr	r2, [pc, #56]	; (800a948 <HAL_SDRAM_Read_DMA+0xa4>)
 800a90e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Enable the DMA Stream */
    status = HAL_MDMA_Start_IT(hsdram->hmdma, (uint32_t)pAddress, (uint32_t)pDstBuffer, (uint32_t)(BufferSize * 4U), 1);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a914:	68b9      	ldr	r1, [r7, #8]
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	2401      	movs	r4, #1
 800a91e:	9400      	str	r4, [sp, #0]
 800a920:	f7fc fe46 	bl	80075b0 <HAL_MDMA_Start_IT>
 800a924:	4603      	mov	r3, r0
 800a926:	75fb      	strb	r3, [r7, #23]

    /* Process Unlocked */
    __HAL_UNLOCK(hsdram);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800a930:	e001      	b.n	800a936 <HAL_SDRAM_Read_DMA+0x92>
  }
  else
  {
    status = HAL_ERROR;
 800a932:	2301      	movs	r3, #1
 800a934:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a936:	7dfb      	ldrb	r3, [r7, #23]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	371c      	adds	r7, #28
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd90      	pop	{r4, r7, pc}
 800a940:	0800aa07 	.word	0x0800aa07
 800a944:	0800aa3b 	.word	0x0800aa3b
 800a948:	0800aa6f 	.word	0x0800aa6f

0800a94c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b086      	sub	sp, #24
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a95e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a960:	7dfb      	ldrb	r3, [r7, #23]
 800a962:	2b02      	cmp	r3, #2
 800a964:	d101      	bne.n	800a96a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a966:	2302      	movs	r3, #2
 800a968:	e021      	b.n	800a9ae <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a96a:	7dfb      	ldrb	r3, [r7, #23]
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d002      	beq.n	800a976 <HAL_SDRAM_SendCommand+0x2a>
 800a970:	7dfb      	ldrb	r3, [r7, #23]
 800a972:	2b05      	cmp	r3, #5
 800a974:	d118      	bne.n	800a9a8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2202      	movs	r2, #2
 800a97a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	68b9      	ldr	r1, [r7, #8]
 800a986:	4618      	mov	r0, r3
 800a988:	f002 fa54 	bl	800ce34 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2b02      	cmp	r3, #2
 800a992:	d104      	bne.n	800a99e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2205      	movs	r2, #5
 800a998:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a99c:	e006      	b.n	800a9ac <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a9a6:	e001      	b.n	800a9ac <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	e000      	b.n	800a9ae <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3718      	adds	r7, #24
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a9b6:	b580      	push	{r7, lr}
 800a9b8:	b082      	sub	sp, #8
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
 800a9be:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	d101      	bne.n	800a9d0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a9cc:	2302      	movs	r3, #2
 800a9ce:	e016      	b.n	800a9fe <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d10f      	bne.n	800a9fc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2202      	movs	r2, #2
 800a9e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	6839      	ldr	r1, [r7, #0]
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f002 fa46 	bl	800ce7c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	e000      	b.n	800a9fe <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a9fc:	2301      	movs	r3, #1
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3708      	adds	r7, #8
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <SDRAM_DMACplt>:
  * @brief  MDMA SDRAM process complete callback.
  * @param  hmdma : MDMA handle
  * @retval None
  */
static void SDRAM_DMACplt(MDMA_HandleTypeDef *hmdma)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b084      	sub	sp, #16
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
  SDRAM_HandleTypeDef *hsdram = (SDRAM_HandleTypeDef *)(hmdma->Parent);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa12:	60fb      	str	r3, [r7, #12]

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	68da      	ldr	r2, [r3, #12]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f022 0201 	bic.w	r2, r2, #1
 800aa22:	60da      	str	r2, [r3, #12]

  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2201      	movs	r2, #1
 800aa28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
  hsdram->DmaXferCpltCallback(hmdma);
#else
  HAL_SDRAM_DMA_XferCpltCallback(hmdma);
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f7f5 fe93 	bl	8000758 <HAL_SDRAM_DMA_XferCpltCallback>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
}
 800aa32:	bf00      	nop
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <SDRAM_DMACpltProt>:
  * @brief  MDMA SRAM process complete callback.
  * @param  hmdma : MDMA handle
  * @retval None
  */
static void SDRAM_DMACpltProt(MDMA_HandleTypeDef *hmdma)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b084      	sub	sp, #16
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
  SDRAM_HandleTypeDef *hsdram = (SDRAM_HandleTypeDef *)(hmdma->Parent);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa46:	60fb      	str	r3, [r7, #12]

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68da      	ldr	r2, [r3, #12]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f022 0201 	bic.w	r2, r2, #1
 800aa56:	60da      	str	r2, [r3, #12]

  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_WRITE_PROTECTED;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2204      	movs	r2, #4
 800aa5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
  hsdram->DmaXferCpltCallback(hmdma);
#else
  HAL_SDRAM_DMA_XferCpltCallback(hmdma);
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f7f5 fe79 	bl	8000758 <HAL_SDRAM_DMA_XferCpltCallback>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
}
 800aa66:	bf00      	nop
 800aa68:	3710      	adds	r7, #16
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}

0800aa6e <SDRAM_DMAError>:
  * @brief  MDMA SDRAM error callback.
  * @param  hmdma : MDMA handle
  * @retval None
  */
static void SDRAM_DMAError(MDMA_HandleTypeDef *hmdma)
{
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b084      	sub	sp, #16
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
  SDRAM_HandleTypeDef *hsdram = (SDRAM_HandleTypeDef *)(hmdma->Parent);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa7a:	60fb      	str	r3, [r7, #12]

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	68da      	ldr	r2, [r3, #12]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f022 0201 	bic.w	r2, r2, #1
 800aa8a:	60da      	str	r2, [r3, #12]

  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_ERROR;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2203      	movs	r2, #3
 800aa90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
  hsdram->DmaXferErrorCallback(hmdma);
#else
  HAL_SDRAM_DMA_XferErrorCallback(hmdma);
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f7ff fefb 	bl	800a890 <HAL_SDRAM_DMA_XferErrorCallback>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
}
 800aa9a:	bf00      	nop
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b082      	sub	sp, #8
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d101      	bne.n	800aab4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aab0:	2301      	movs	r3, #1
 800aab2:	e049      	b.n	800ab48 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d106      	bne.n	800aace <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 f841 	bl	800ab50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2202      	movs	r2, #2
 800aad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	3304      	adds	r3, #4
 800aade:	4619      	mov	r1, r3
 800aae0:	4610      	mov	r0, r2
 800aae2:	f000 fac7 	bl	800b074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2201      	movs	r2, #1
 800aaea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2201      	movs	r2, #1
 800aafa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2201      	movs	r2, #1
 800ab02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2201      	movs	r2, #1
 800ab0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2201      	movs	r2, #1
 800ab12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2201      	movs	r2, #1
 800ab1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2201      	movs	r2, #1
 800ab22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2201      	movs	r2, #1
 800ab2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2201      	movs	r2, #1
 800ab32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2201      	movs	r2, #1
 800ab42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab46:	2300      	movs	r3, #0
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3708      	adds	r7, #8
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ab58:	bf00      	nop
 800ab5a:	370c      	adds	r7, #12
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr

0800ab64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d001      	beq.n	800ab7c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	e04c      	b.n	800ac16 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2202      	movs	r2, #2
 800ab80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4a26      	ldr	r2, [pc, #152]	; (800ac24 <HAL_TIM_Base_Start+0xc0>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d022      	beq.n	800abd4 <HAL_TIM_Base_Start+0x70>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab96:	d01d      	beq.n	800abd4 <HAL_TIM_Base_Start+0x70>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4a22      	ldr	r2, [pc, #136]	; (800ac28 <HAL_TIM_Base_Start+0xc4>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d018      	beq.n	800abd4 <HAL_TIM_Base_Start+0x70>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4a21      	ldr	r2, [pc, #132]	; (800ac2c <HAL_TIM_Base_Start+0xc8>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d013      	beq.n	800abd4 <HAL_TIM_Base_Start+0x70>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a1f      	ldr	r2, [pc, #124]	; (800ac30 <HAL_TIM_Base_Start+0xcc>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d00e      	beq.n	800abd4 <HAL_TIM_Base_Start+0x70>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a1e      	ldr	r2, [pc, #120]	; (800ac34 <HAL_TIM_Base_Start+0xd0>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d009      	beq.n	800abd4 <HAL_TIM_Base_Start+0x70>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a1c      	ldr	r2, [pc, #112]	; (800ac38 <HAL_TIM_Base_Start+0xd4>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d004      	beq.n	800abd4 <HAL_TIM_Base_Start+0x70>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a1b      	ldr	r2, [pc, #108]	; (800ac3c <HAL_TIM_Base_Start+0xd8>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d115      	bne.n	800ac00 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	689a      	ldr	r2, [r3, #8]
 800abda:	4b19      	ldr	r3, [pc, #100]	; (800ac40 <HAL_TIM_Base_Start+0xdc>)
 800abdc:	4013      	ands	r3, r2
 800abde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2b06      	cmp	r3, #6
 800abe4:	d015      	beq.n	800ac12 <HAL_TIM_Base_Start+0xae>
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abec:	d011      	beq.n	800ac12 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f042 0201 	orr.w	r2, r2, #1
 800abfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abfe:	e008      	b.n	800ac12 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f042 0201 	orr.w	r2, r2, #1
 800ac0e:	601a      	str	r2, [r3, #0]
 800ac10:	e000      	b.n	800ac14 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3714      	adds	r7, #20
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	40010000 	.word	0x40010000
 800ac28:	40000400 	.word	0x40000400
 800ac2c:	40000800 	.word	0x40000800
 800ac30:	40000c00 	.word	0x40000c00
 800ac34:	40010400 	.word	0x40010400
 800ac38:	40001800 	.word	0x40001800
 800ac3c:	40014000 	.word	0x40014000
 800ac40:	00010007 	.word	0x00010007

0800ac44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b082      	sub	sp, #8
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d101      	bne.n	800ac56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ac52:	2301      	movs	r3, #1
 800ac54:	e049      	b.n	800acea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac5c:	b2db      	uxtb	r3, r3
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d106      	bne.n	800ac70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 f89d 	bl	800adaa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2202      	movs	r2, #2
 800ac74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	3304      	adds	r3, #4
 800ac80:	4619      	mov	r1, r3
 800ac82:	4610      	mov	r0, r2
 800ac84:	f000 f9f6 	bl	800b074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2201      	movs	r2, #1
 800acb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2201      	movs	r2, #1
 800acbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2201      	movs	r2, #1
 800acc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2201      	movs	r2, #1
 800accc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2201      	movs	r2, #1
 800acd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2201      	movs	r2, #1
 800acdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2201      	movs	r2, #1
 800ace4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3708      	adds	r7, #8
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b082      	sub	sp, #8
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2202      	movs	r2, #2
 800acfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	6a1a      	ldr	r2, [r3, #32]
 800ad08:	f241 1311 	movw	r3, #4369	; 0x1111
 800ad0c:	4013      	ands	r3, r2
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d10f      	bne.n	800ad32 <HAL_TIM_PWM_DeInit+0x40>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	6a1a      	ldr	r2, [r3, #32]
 800ad18:	f240 4344 	movw	r3, #1092	; 0x444
 800ad1c:	4013      	ands	r3, r2
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d107      	bne.n	800ad32 <HAL_TIM_PWM_DeInit+0x40>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f022 0201 	bic.w	r2, r2, #1
 800ad30:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 f843 	bl	800adbe <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ada0:	2300      	movs	r3, #0
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3708      	adds	r7, #8
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}

0800adaa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800adaa:	b480      	push	{r7}
 800adac:	b083      	sub	sp, #12
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800adb2:	bf00      	nop
 800adb4:	370c      	adds	r7, #12
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr

0800adbe <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 800adbe:	b480      	push	{r7}
 800adc0:	b083      	sub	sp, #12
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 800adc6:	bf00      	nop
 800adc8:	370c      	adds	r7, #12
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr

0800add2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800add2:	b580      	push	{r7, lr}
 800add4:	b082      	sub	sp, #8
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	691b      	ldr	r3, [r3, #16]
 800ade0:	f003 0302 	and.w	r3, r3, #2
 800ade4:	2b02      	cmp	r3, #2
 800ade6:	d122      	bne.n	800ae2e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	f003 0302 	and.w	r3, r3, #2
 800adf2:	2b02      	cmp	r3, #2
 800adf4:	d11b      	bne.n	800ae2e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f06f 0202 	mvn.w	r2, #2
 800adfe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2201      	movs	r2, #1
 800ae04:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	699b      	ldr	r3, [r3, #24]
 800ae0c:	f003 0303 	and.w	r3, r3, #3
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d003      	beq.n	800ae1c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 f90f 	bl	800b038 <HAL_TIM_IC_CaptureCallback>
 800ae1a:	e005      	b.n	800ae28 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 f901 	bl	800b024 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 f912 	bl	800b04c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	691b      	ldr	r3, [r3, #16]
 800ae34:	f003 0304 	and.w	r3, r3, #4
 800ae38:	2b04      	cmp	r3, #4
 800ae3a:	d122      	bne.n	800ae82 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	68db      	ldr	r3, [r3, #12]
 800ae42:	f003 0304 	and.w	r3, r3, #4
 800ae46:	2b04      	cmp	r3, #4
 800ae48:	d11b      	bne.n	800ae82 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f06f 0204 	mvn.w	r2, #4
 800ae52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2202      	movs	r2, #2
 800ae58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	699b      	ldr	r3, [r3, #24]
 800ae60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d003      	beq.n	800ae70 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 f8e5 	bl	800b038 <HAL_TIM_IC_CaptureCallback>
 800ae6e:	e005      	b.n	800ae7c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 f8d7 	bl	800b024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 f8e8 	bl	800b04c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	691b      	ldr	r3, [r3, #16]
 800ae88:	f003 0308 	and.w	r3, r3, #8
 800ae8c:	2b08      	cmp	r3, #8
 800ae8e:	d122      	bne.n	800aed6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	f003 0308 	and.w	r3, r3, #8
 800ae9a:	2b08      	cmp	r3, #8
 800ae9c:	d11b      	bne.n	800aed6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f06f 0208 	mvn.w	r2, #8
 800aea6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2204      	movs	r2, #4
 800aeac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	69db      	ldr	r3, [r3, #28]
 800aeb4:	f003 0303 	and.w	r3, r3, #3
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d003      	beq.n	800aec4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 f8bb 	bl	800b038 <HAL_TIM_IC_CaptureCallback>
 800aec2:	e005      	b.n	800aed0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 f8ad 	bl	800b024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 f8be 	bl	800b04c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	691b      	ldr	r3, [r3, #16]
 800aedc:	f003 0310 	and.w	r3, r3, #16
 800aee0:	2b10      	cmp	r3, #16
 800aee2:	d122      	bne.n	800af2a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	f003 0310 	and.w	r3, r3, #16
 800aeee:	2b10      	cmp	r3, #16
 800aef0:	d11b      	bne.n	800af2a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f06f 0210 	mvn.w	r2, #16
 800aefa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2208      	movs	r2, #8
 800af00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	69db      	ldr	r3, [r3, #28]
 800af08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d003      	beq.n	800af18 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 f891 	bl	800b038 <HAL_TIM_IC_CaptureCallback>
 800af16:	e005      	b.n	800af24 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 f883 	bl	800b024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 f894 	bl	800b04c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	691b      	ldr	r3, [r3, #16]
 800af30:	f003 0301 	and.w	r3, r3, #1
 800af34:	2b01      	cmp	r3, #1
 800af36:	d10e      	bne.n	800af56 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	68db      	ldr	r3, [r3, #12]
 800af3e:	f003 0301 	and.w	r3, r3, #1
 800af42:	2b01      	cmp	r3, #1
 800af44:	d107      	bne.n	800af56 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f06f 0201 	mvn.w	r2, #1
 800af4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 f85d 	bl	800b010 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	691b      	ldr	r3, [r3, #16]
 800af5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af60:	2b80      	cmp	r3, #128	; 0x80
 800af62:	d10e      	bne.n	800af82 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af6e:	2b80      	cmp	r3, #128	; 0x80
 800af70:	d107      	bne.n	800af82 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800af7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 f91d 	bl	800b1bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	691b      	ldr	r3, [r3, #16]
 800af88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af90:	d10e      	bne.n	800afb0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	68db      	ldr	r3, [r3, #12]
 800af98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af9c:	2b80      	cmp	r3, #128	; 0x80
 800af9e:	d107      	bne.n	800afb0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800afa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 f910 	bl	800b1d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	691b      	ldr	r3, [r3, #16]
 800afb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afba:	2b40      	cmp	r3, #64	; 0x40
 800afbc:	d10e      	bne.n	800afdc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afc8:	2b40      	cmp	r3, #64	; 0x40
 800afca:	d107      	bne.n	800afdc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800afd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 f842 	bl	800b060 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	691b      	ldr	r3, [r3, #16]
 800afe2:	f003 0320 	and.w	r3, r3, #32
 800afe6:	2b20      	cmp	r3, #32
 800afe8:	d10e      	bne.n	800b008 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	f003 0320 	and.w	r3, r3, #32
 800aff4:	2b20      	cmp	r3, #32
 800aff6:	d107      	bne.n	800b008 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f06f 0220 	mvn.w	r2, #32
 800b000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 f8d0 	bl	800b1a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b008:	bf00      	nop
 800b00a:	3708      	adds	r7, #8
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b010:	b480      	push	{r7}
 800b012:	b083      	sub	sp, #12
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b018:	bf00      	nop
 800b01a:	370c      	adds	r7, #12
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr

0800b024 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b024:	b480      	push	{r7}
 800b026:	b083      	sub	sp, #12
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b02c:	bf00      	nop
 800b02e:	370c      	adds	r7, #12
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr

0800b038 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b038:	b480      	push	{r7}
 800b03a:	b083      	sub	sp, #12
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b040:	bf00      	nop
 800b042:	370c      	adds	r7, #12
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b054:	bf00      	nop
 800b056:	370c      	adds	r7, #12
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr

0800b060 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b060:	b480      	push	{r7}
 800b062:	b083      	sub	sp, #12
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b068:	bf00      	nop
 800b06a:	370c      	adds	r7, #12
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr

0800b074 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b074:	b480      	push	{r7}
 800b076:	b085      	sub	sp, #20
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	4a40      	ldr	r2, [pc, #256]	; (800b188 <TIM_Base_SetConfig+0x114>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d013      	beq.n	800b0b4 <TIM_Base_SetConfig+0x40>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b092:	d00f      	beq.n	800b0b4 <TIM_Base_SetConfig+0x40>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	4a3d      	ldr	r2, [pc, #244]	; (800b18c <TIM_Base_SetConfig+0x118>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d00b      	beq.n	800b0b4 <TIM_Base_SetConfig+0x40>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	4a3c      	ldr	r2, [pc, #240]	; (800b190 <TIM_Base_SetConfig+0x11c>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d007      	beq.n	800b0b4 <TIM_Base_SetConfig+0x40>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	4a3b      	ldr	r2, [pc, #236]	; (800b194 <TIM_Base_SetConfig+0x120>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d003      	beq.n	800b0b4 <TIM_Base_SetConfig+0x40>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	4a3a      	ldr	r2, [pc, #232]	; (800b198 <TIM_Base_SetConfig+0x124>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d108      	bne.n	800b0c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	68fa      	ldr	r2, [r7, #12]
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	4a2f      	ldr	r2, [pc, #188]	; (800b188 <TIM_Base_SetConfig+0x114>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d01f      	beq.n	800b10e <TIM_Base_SetConfig+0x9a>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0d4:	d01b      	beq.n	800b10e <TIM_Base_SetConfig+0x9a>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4a2c      	ldr	r2, [pc, #176]	; (800b18c <TIM_Base_SetConfig+0x118>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d017      	beq.n	800b10e <TIM_Base_SetConfig+0x9a>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	4a2b      	ldr	r2, [pc, #172]	; (800b190 <TIM_Base_SetConfig+0x11c>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d013      	beq.n	800b10e <TIM_Base_SetConfig+0x9a>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	4a2a      	ldr	r2, [pc, #168]	; (800b194 <TIM_Base_SetConfig+0x120>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d00f      	beq.n	800b10e <TIM_Base_SetConfig+0x9a>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	4a29      	ldr	r2, [pc, #164]	; (800b198 <TIM_Base_SetConfig+0x124>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d00b      	beq.n	800b10e <TIM_Base_SetConfig+0x9a>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	4a28      	ldr	r2, [pc, #160]	; (800b19c <TIM_Base_SetConfig+0x128>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d007      	beq.n	800b10e <TIM_Base_SetConfig+0x9a>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	4a27      	ldr	r2, [pc, #156]	; (800b1a0 <TIM_Base_SetConfig+0x12c>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d003      	beq.n	800b10e <TIM_Base_SetConfig+0x9a>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	4a26      	ldr	r2, [pc, #152]	; (800b1a4 <TIM_Base_SetConfig+0x130>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d108      	bne.n	800b120 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	68db      	ldr	r3, [r3, #12]
 800b11a:	68fa      	ldr	r2, [r7, #12]
 800b11c:	4313      	orrs	r3, r2
 800b11e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	695b      	ldr	r3, [r3, #20]
 800b12a:	4313      	orrs	r3, r2
 800b12c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	68fa      	ldr	r2, [r7, #12]
 800b132:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	689a      	ldr	r2, [r3, #8]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	681a      	ldr	r2, [r3, #0]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	4a10      	ldr	r2, [pc, #64]	; (800b188 <TIM_Base_SetConfig+0x114>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d00f      	beq.n	800b16c <TIM_Base_SetConfig+0xf8>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	4a12      	ldr	r2, [pc, #72]	; (800b198 <TIM_Base_SetConfig+0x124>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d00b      	beq.n	800b16c <TIM_Base_SetConfig+0xf8>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	4a11      	ldr	r2, [pc, #68]	; (800b19c <TIM_Base_SetConfig+0x128>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d007      	beq.n	800b16c <TIM_Base_SetConfig+0xf8>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	4a10      	ldr	r2, [pc, #64]	; (800b1a0 <TIM_Base_SetConfig+0x12c>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d003      	beq.n	800b16c <TIM_Base_SetConfig+0xf8>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	4a0f      	ldr	r2, [pc, #60]	; (800b1a4 <TIM_Base_SetConfig+0x130>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d103      	bne.n	800b174 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	691a      	ldr	r2, [r3, #16]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	615a      	str	r2, [r3, #20]
}
 800b17a:	bf00      	nop
 800b17c:	3714      	adds	r7, #20
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr
 800b186:	bf00      	nop
 800b188:	40010000 	.word	0x40010000
 800b18c:	40000400 	.word	0x40000400
 800b190:	40000800 	.word	0x40000800
 800b194:	40000c00 	.word	0x40000c00
 800b198:	40010400 	.word	0x40010400
 800b19c:	40014000 	.word	0x40014000
 800b1a0:	40014400 	.word	0x40014400
 800b1a4:	40014800 	.word	0x40014800

0800b1a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b1b0:	bf00      	nop
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b1c4:	bf00      	nop
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b1d8:	bf00      	nop
 800b1da:	370c      	adds	r7, #12
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b082      	sub	sp, #8
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d101      	bne.n	800b1f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	e042      	b.n	800b27c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d106      	bne.n	800b20e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2200      	movs	r2, #0
 800b204:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f7f6 fc65 	bl	8001ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2224      	movs	r2, #36	; 0x24
 800b212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f022 0201 	bic.w	r2, r2, #1
 800b224:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 fd5c 	bl	800bce4 <UART_SetConfig>
 800b22c:	4603      	mov	r3, r0
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d101      	bne.n	800b236 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b232:	2301      	movs	r3, #1
 800b234:	e022      	b.n	800b27c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d002      	beq.n	800b244 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f001 fab8 	bl	800c7b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	685a      	ldr	r2, [r3, #4]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b252:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	689a      	ldr	r2, [r3, #8]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b262:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f042 0201 	orr.w	r2, r2, #1
 800b272:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f001 fb3f 	bl	800c8f8 <UART_CheckIdleState>
 800b27a:	4603      	mov	r3, r0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3708      	adds	r7, #8
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b08a      	sub	sp, #40	; 0x28
 800b288:	af02      	add	r7, sp, #8
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	603b      	str	r3, [r7, #0]
 800b290:	4613      	mov	r3, r2
 800b292:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b29a:	2b20      	cmp	r3, #32
 800b29c:	d17b      	bne.n	800b396 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d002      	beq.n	800b2aa <HAL_UART_Transmit+0x26>
 800b2a4:	88fb      	ldrh	r3, [r7, #6]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d101      	bne.n	800b2ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e074      	b.n	800b398 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2221      	movs	r2, #33	; 0x21
 800b2ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b2be:	f7f8 fded 	bl	8003e9c <HAL_GetTick>
 800b2c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	88fa      	ldrh	r2, [r7, #6]
 800b2c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	88fa      	ldrh	r2, [r7, #6]
 800b2d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2dc:	d108      	bne.n	800b2f0 <HAL_UART_Transmit+0x6c>
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	691b      	ldr	r3, [r3, #16]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d104      	bne.n	800b2f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	61bb      	str	r3, [r7, #24]
 800b2ee:	e003      	b.n	800b2f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b2f8:	e030      	b.n	800b35c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	9300      	str	r3, [sp, #0]
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	2200      	movs	r2, #0
 800b302:	2180      	movs	r1, #128	; 0x80
 800b304:	68f8      	ldr	r0, [r7, #12]
 800b306:	f001 fba1 	bl	800ca4c <UART_WaitOnFlagUntilTimeout>
 800b30a:	4603      	mov	r3, r0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d005      	beq.n	800b31c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2220      	movs	r2, #32
 800b314:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b318:	2303      	movs	r3, #3
 800b31a:	e03d      	b.n	800b398 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b31c:	69fb      	ldr	r3, [r7, #28]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d10b      	bne.n	800b33a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b322:	69bb      	ldr	r3, [r7, #24]
 800b324:	881b      	ldrh	r3, [r3, #0]
 800b326:	461a      	mov	r2, r3
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b330:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b332:	69bb      	ldr	r3, [r7, #24]
 800b334:	3302      	adds	r3, #2
 800b336:	61bb      	str	r3, [r7, #24]
 800b338:	e007      	b.n	800b34a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b33a:	69fb      	ldr	r3, [r7, #28]
 800b33c:	781a      	ldrb	r2, [r3, #0]
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	3301      	adds	r3, #1
 800b348:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b350:	b29b      	uxth	r3, r3
 800b352:	3b01      	subs	r3, #1
 800b354:	b29a      	uxth	r2, r3
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b362:	b29b      	uxth	r3, r3
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1c8      	bne.n	800b2fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	9300      	str	r3, [sp, #0]
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	2200      	movs	r2, #0
 800b370:	2140      	movs	r1, #64	; 0x40
 800b372:	68f8      	ldr	r0, [r7, #12]
 800b374:	f001 fb6a 	bl	800ca4c <UART_WaitOnFlagUntilTimeout>
 800b378:	4603      	mov	r3, r0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d005      	beq.n	800b38a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2220      	movs	r2, #32
 800b382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800b386:	2303      	movs	r3, #3
 800b388:	e006      	b.n	800b398 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2220      	movs	r2, #32
 800b38e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b392:	2300      	movs	r3, #0
 800b394:	e000      	b.n	800b398 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b396:	2302      	movs	r3, #2
  }
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3720      	adds	r7, #32
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b08a      	sub	sp, #40	; 0x28
 800b3a4:	af02      	add	r7, sp, #8
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	603b      	str	r3, [r7, #0]
 800b3ac:	4613      	mov	r3, r2
 800b3ae:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3b6:	2b20      	cmp	r3, #32
 800b3b8:	f040 80b5 	bne.w	800b526 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d002      	beq.n	800b3c8 <HAL_UART_Receive+0x28>
 800b3c2:	88fb      	ldrh	r3, [r7, #6]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d101      	bne.n	800b3cc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e0ad      	b.n	800b528 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2222      	movs	r2, #34	; 0x22
 800b3d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b3e2:	f7f8 fd5b 	bl	8003e9c <HAL_GetTick>
 800b3e6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	88fa      	ldrh	r2, [r7, #6]
 800b3ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	88fa      	ldrh	r2, [r7, #6]
 800b3f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b400:	d10e      	bne.n	800b420 <HAL_UART_Receive+0x80>
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	691b      	ldr	r3, [r3, #16]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d105      	bne.n	800b416 <HAL_UART_Receive+0x76>
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b410:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b414:	e02d      	b.n	800b472 <HAL_UART_Receive+0xd2>
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	22ff      	movs	r2, #255	; 0xff
 800b41a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b41e:	e028      	b.n	800b472 <HAL_UART_Receive+0xd2>
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d10d      	bne.n	800b444 <HAL_UART_Receive+0xa4>
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	691b      	ldr	r3, [r3, #16]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d104      	bne.n	800b43a <HAL_UART_Receive+0x9a>
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	22ff      	movs	r2, #255	; 0xff
 800b434:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b438:	e01b      	b.n	800b472 <HAL_UART_Receive+0xd2>
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	227f      	movs	r2, #127	; 0x7f
 800b43e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b442:	e016      	b.n	800b472 <HAL_UART_Receive+0xd2>
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b44c:	d10d      	bne.n	800b46a <HAL_UART_Receive+0xca>
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	691b      	ldr	r3, [r3, #16]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d104      	bne.n	800b460 <HAL_UART_Receive+0xc0>
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	227f      	movs	r2, #127	; 0x7f
 800b45a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b45e:	e008      	b.n	800b472 <HAL_UART_Receive+0xd2>
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	223f      	movs	r2, #63	; 0x3f
 800b464:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b468:	e003      	b.n	800b472 <HAL_UART_Receive+0xd2>
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	2200      	movs	r2, #0
 800b46e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b478:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b482:	d108      	bne.n	800b496 <HAL_UART_Receive+0xf6>
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	691b      	ldr	r3, [r3, #16]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d104      	bne.n	800b496 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800b48c:	2300      	movs	r3, #0
 800b48e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	61bb      	str	r3, [r7, #24]
 800b494:	e003      	b.n	800b49e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b49a:	2300      	movs	r3, #0
 800b49c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b49e:	e036      	b.n	800b50e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	9300      	str	r3, [sp, #0]
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	2120      	movs	r1, #32
 800b4aa:	68f8      	ldr	r0, [r7, #12]
 800b4ac:	f001 face 	bl	800ca4c <UART_WaitOnFlagUntilTimeout>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d005      	beq.n	800b4c2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2220      	movs	r2, #32
 800b4ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800b4be:	2303      	movs	r3, #3
 800b4c0:	e032      	b.n	800b528 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800b4c2:	69fb      	ldr	r3, [r7, #28]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d10c      	bne.n	800b4e2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	8a7b      	ldrh	r3, [r7, #18]
 800b4d2:	4013      	ands	r3, r2
 800b4d4:	b29a      	uxth	r2, r3
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b4da:	69bb      	ldr	r3, [r7, #24]
 800b4dc:	3302      	adds	r3, #2
 800b4de:	61bb      	str	r3, [r7, #24]
 800b4e0:	e00c      	b.n	800b4fc <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e8:	b2da      	uxtb	r2, r3
 800b4ea:	8a7b      	ldrh	r3, [r7, #18]
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	4013      	ands	r3, r2
 800b4f0:	b2da      	uxtb	r2, r3
 800b4f2:	69fb      	ldr	r3, [r7, #28]
 800b4f4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b4f6:	69fb      	ldr	r3, [r7, #28]
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b502:	b29b      	uxth	r3, r3
 800b504:	3b01      	subs	r3, #1
 800b506:	b29a      	uxth	r2, r3
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b514:	b29b      	uxth	r3, r3
 800b516:	2b00      	cmp	r3, #0
 800b518:	d1c2      	bne.n	800b4a0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2220      	movs	r2, #32
 800b51e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800b522:	2300      	movs	r3, #0
 800b524:	e000      	b.n	800b528 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800b526:	2302      	movs	r3, #2
  }
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3720      	adds	r7, #32
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b0ba      	sub	sp, #232	; 0xe8
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	69db      	ldr	r3, [r3, #28]
 800b53e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	689b      	ldr	r3, [r3, #8]
 800b552:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b556:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b55a:	f640 030f 	movw	r3, #2063	; 0x80f
 800b55e:	4013      	ands	r3, r2
 800b560:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b564:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d11b      	bne.n	800b5a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b56c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b570:	f003 0320 	and.w	r3, r3, #32
 800b574:	2b00      	cmp	r3, #0
 800b576:	d015      	beq.n	800b5a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b57c:	f003 0320 	and.w	r3, r3, #32
 800b580:	2b00      	cmp	r3, #0
 800b582:	d105      	bne.n	800b590 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d009      	beq.n	800b5a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b594:	2b00      	cmp	r3, #0
 800b596:	f000 8377 	beq.w	800bc88 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	4798      	blx	r3
      }
      return;
 800b5a2:	e371      	b.n	800bc88 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b5a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	f000 8123 	beq.w	800b7f4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b5ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b5b2:	4b8d      	ldr	r3, [pc, #564]	; (800b7e8 <HAL_UART_IRQHandler+0x2b8>)
 800b5b4:	4013      	ands	r3, r2
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d106      	bne.n	800b5c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b5ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b5be:	4b8b      	ldr	r3, [pc, #556]	; (800b7ec <HAL_UART_IRQHandler+0x2bc>)
 800b5c0:	4013      	ands	r3, r2
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	f000 8116 	beq.w	800b7f4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b5c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5cc:	f003 0301 	and.w	r3, r3, #1
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d011      	beq.n	800b5f8 <HAL_UART_IRQHandler+0xc8>
 800b5d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00b      	beq.n	800b5f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5ee:	f043 0201 	orr.w	r2, r3, #1
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b5f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5fc:	f003 0302 	and.w	r3, r3, #2
 800b600:	2b00      	cmp	r3, #0
 800b602:	d011      	beq.n	800b628 <HAL_UART_IRQHandler+0xf8>
 800b604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b608:	f003 0301 	and.w	r3, r3, #1
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d00b      	beq.n	800b628 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2202      	movs	r2, #2
 800b616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b61e:	f043 0204 	orr.w	r2, r3, #4
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b62c:	f003 0304 	and.w	r3, r3, #4
 800b630:	2b00      	cmp	r3, #0
 800b632:	d011      	beq.n	800b658 <HAL_UART_IRQHandler+0x128>
 800b634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b638:	f003 0301 	and.w	r3, r3, #1
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d00b      	beq.n	800b658 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	2204      	movs	r2, #4
 800b646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b64e:	f043 0202 	orr.w	r2, r3, #2
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b65c:	f003 0308 	and.w	r3, r3, #8
 800b660:	2b00      	cmp	r3, #0
 800b662:	d017      	beq.n	800b694 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b668:	f003 0320 	and.w	r3, r3, #32
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d105      	bne.n	800b67c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b670:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b674:	4b5c      	ldr	r3, [pc, #368]	; (800b7e8 <HAL_UART_IRQHandler+0x2b8>)
 800b676:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d00b      	beq.n	800b694 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	2208      	movs	r2, #8
 800b682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b68a:	f043 0208 	orr.w	r2, r3, #8
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d012      	beq.n	800b6c6 <HAL_UART_IRQHandler+0x196>
 800b6a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d00c      	beq.n	800b6c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b6b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6bc:	f043 0220 	orr.w	r2, r3, #32
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	f000 82dd 	beq.w	800bc8c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b6d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6d6:	f003 0320 	and.w	r3, r3, #32
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d013      	beq.n	800b706 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b6de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6e2:	f003 0320 	and.w	r3, r3, #32
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d105      	bne.n	800b6f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b6ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d007      	beq.n	800b706 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d003      	beq.n	800b706 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b70c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	689b      	ldr	r3, [r3, #8]
 800b716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b71a:	2b40      	cmp	r3, #64	; 0x40
 800b71c:	d005      	beq.n	800b72a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b71e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b722:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b726:	2b00      	cmp	r3, #0
 800b728:	d054      	beq.n	800b7d4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f001 f9f6 	bl	800cb1c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	689b      	ldr	r3, [r3, #8]
 800b736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b73a:	2b40      	cmp	r3, #64	; 0x40
 800b73c:	d146      	bne.n	800b7cc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	3308      	adds	r3, #8
 800b744:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b748:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b74c:	e853 3f00 	ldrex	r3, [r3]
 800b750:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b754:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b75c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	3308      	adds	r3, #8
 800b766:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b76a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b76e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b772:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b776:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b77a:	e841 2300 	strex	r3, r2, [r1]
 800b77e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b782:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b786:	2b00      	cmp	r3, #0
 800b788:	d1d9      	bne.n	800b73e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b790:	2b00      	cmp	r3, #0
 800b792:	d017      	beq.n	800b7c4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b79a:	4a15      	ldr	r2, [pc, #84]	; (800b7f0 <HAL_UART_IRQHandler+0x2c0>)
 800b79c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7f9 f86f 	bl	8004888 <HAL_DMA_Abort_IT>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d019      	beq.n	800b7e4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b7be:	4610      	mov	r0, r2
 800b7c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7c2:	e00f      	b.n	800b7e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 fa77 	bl	800bcb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7ca:	e00b      	b.n	800b7e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f000 fa73 	bl	800bcb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7d2:	e007      	b.n	800b7e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 fa6f 	bl	800bcb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b7e2:	e253      	b.n	800bc8c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7e4:	bf00      	nop
    return;
 800b7e6:	e251      	b.n	800bc8c <HAL_UART_IRQHandler+0x75c>
 800b7e8:	10000001 	.word	0x10000001
 800b7ec:	04000120 	.word	0x04000120
 800b7f0:	0800cbe9 	.word	0x0800cbe9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	f040 81e7 	bne.w	800bbcc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b7fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b802:	f003 0310 	and.w	r3, r3, #16
 800b806:	2b00      	cmp	r3, #0
 800b808:	f000 81e0 	beq.w	800bbcc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b80c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b810:	f003 0310 	and.w	r3, r3, #16
 800b814:	2b00      	cmp	r3, #0
 800b816:	f000 81d9 	beq.w	800bbcc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2210      	movs	r2, #16
 800b820:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	689b      	ldr	r3, [r3, #8]
 800b828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b82c:	2b40      	cmp	r3, #64	; 0x40
 800b82e:	f040 8151 	bne.w	800bad4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4a96      	ldr	r2, [pc, #600]	; (800ba94 <HAL_UART_IRQHandler+0x564>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d068      	beq.n	800b912 <HAL_UART_IRQHandler+0x3e2>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4a93      	ldr	r2, [pc, #588]	; (800ba98 <HAL_UART_IRQHandler+0x568>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d061      	beq.n	800b912 <HAL_UART_IRQHandler+0x3e2>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4a91      	ldr	r2, [pc, #580]	; (800ba9c <HAL_UART_IRQHandler+0x56c>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d05a      	beq.n	800b912 <HAL_UART_IRQHandler+0x3e2>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a8e      	ldr	r2, [pc, #568]	; (800baa0 <HAL_UART_IRQHandler+0x570>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d053      	beq.n	800b912 <HAL_UART_IRQHandler+0x3e2>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a8c      	ldr	r2, [pc, #560]	; (800baa4 <HAL_UART_IRQHandler+0x574>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d04c      	beq.n	800b912 <HAL_UART_IRQHandler+0x3e2>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a89      	ldr	r2, [pc, #548]	; (800baa8 <HAL_UART_IRQHandler+0x578>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d045      	beq.n	800b912 <HAL_UART_IRQHandler+0x3e2>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4a87      	ldr	r2, [pc, #540]	; (800baac <HAL_UART_IRQHandler+0x57c>)
 800b890:	4293      	cmp	r3, r2
 800b892:	d03e      	beq.n	800b912 <HAL_UART_IRQHandler+0x3e2>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4a84      	ldr	r2, [pc, #528]	; (800bab0 <HAL_UART_IRQHandler+0x580>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d037      	beq.n	800b912 <HAL_UART_IRQHandler+0x3e2>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a82      	ldr	r2, [pc, #520]	; (800bab4 <HAL_UART_IRQHandler+0x584>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d030      	beq.n	800b912 <HAL_UART_IRQHandler+0x3e2>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a7f      	ldr	r2, [pc, #508]	; (800bab8 <HAL_UART_IRQHandler+0x588>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d029      	beq.n	800b912 <HAL_UART_IRQHandler+0x3e2>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4a7d      	ldr	r2, [pc, #500]	; (800babc <HAL_UART_IRQHandler+0x58c>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d022      	beq.n	800b912 <HAL_UART_IRQHandler+0x3e2>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a7a      	ldr	r2, [pc, #488]	; (800bac0 <HAL_UART_IRQHandler+0x590>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d01b      	beq.n	800b912 <HAL_UART_IRQHandler+0x3e2>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4a78      	ldr	r2, [pc, #480]	; (800bac4 <HAL_UART_IRQHandler+0x594>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d014      	beq.n	800b912 <HAL_UART_IRQHandler+0x3e2>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a75      	ldr	r2, [pc, #468]	; (800bac8 <HAL_UART_IRQHandler+0x598>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d00d      	beq.n	800b912 <HAL_UART_IRQHandler+0x3e2>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	4a73      	ldr	r2, [pc, #460]	; (800bacc <HAL_UART_IRQHandler+0x59c>)
 800b900:	4293      	cmp	r3, r2
 800b902:	d006      	beq.n	800b912 <HAL_UART_IRQHandler+0x3e2>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a70      	ldr	r2, [pc, #448]	; (800bad0 <HAL_UART_IRQHandler+0x5a0>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d106      	bne.n	800b920 <HAL_UART_IRQHandler+0x3f0>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	e005      	b.n	800b92c <HAL_UART_IRQHandler+0x3fc>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b930:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b934:	2b00      	cmp	r3, #0
 800b936:	f000 81ab 	beq.w	800bc90 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b940:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b944:	429a      	cmp	r2, r3
 800b946:	f080 81a3 	bcs.w	800bc90 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b950:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b95a:	69db      	ldr	r3, [r3, #28]
 800b95c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b960:	f000 8087 	beq.w	800ba72 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b96c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b970:	e853 3f00 	ldrex	r3, [r3]
 800b974:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b978:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b97c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b980:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	461a      	mov	r2, r3
 800b98a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b98e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b992:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b996:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b99a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b99e:	e841 2300 	strex	r3, r2, [r1]
 800b9a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b9a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d1da      	bne.n	800b964 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	3308      	adds	r3, #8
 800b9b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9b8:	e853 3f00 	ldrex	r3, [r3]
 800b9bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b9be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9c0:	f023 0301 	bic.w	r3, r3, #1
 800b9c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	3308      	adds	r3, #8
 800b9ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b9d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b9d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b9da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b9de:	e841 2300 	strex	r3, r2, [r1]
 800b9e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b9e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d1e1      	bne.n	800b9ae <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	3308      	adds	r3, #8
 800b9f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9f4:	e853 3f00 	ldrex	r3, [r3]
 800b9f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b9fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	3308      	adds	r3, #8
 800ba0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ba0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ba10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ba14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ba16:	e841 2300 	strex	r3, r2, [r1]
 800ba1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ba1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d1e3      	bne.n	800b9ea <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2220      	movs	r2, #32
 800ba26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba38:	e853 3f00 	ldrex	r3, [r3]
 800ba3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ba3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba40:	f023 0310 	bic.w	r3, r3, #16
 800ba44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ba52:	65bb      	str	r3, [r7, #88]	; 0x58
 800ba54:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba5a:	e841 2300 	strex	r3, r2, [r1]
 800ba5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ba60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d1e4      	bne.n	800ba30 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7f8 fbed 	bl	800424c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2202      	movs	r2, #2
 800ba76:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	1ad3      	subs	r3, r2, r3
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 f91d 	bl	800bccc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ba92:	e0fd      	b.n	800bc90 <HAL_UART_IRQHandler+0x760>
 800ba94:	40020010 	.word	0x40020010
 800ba98:	40020028 	.word	0x40020028
 800ba9c:	40020040 	.word	0x40020040
 800baa0:	40020058 	.word	0x40020058
 800baa4:	40020070 	.word	0x40020070
 800baa8:	40020088 	.word	0x40020088
 800baac:	400200a0 	.word	0x400200a0
 800bab0:	400200b8 	.word	0x400200b8
 800bab4:	40020410 	.word	0x40020410
 800bab8:	40020428 	.word	0x40020428
 800babc:	40020440 	.word	0x40020440
 800bac0:	40020458 	.word	0x40020458
 800bac4:	40020470 	.word	0x40020470
 800bac8:	40020488 	.word	0x40020488
 800bacc:	400204a0 	.word	0x400204a0
 800bad0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	1ad3      	subs	r3, r2, r3
 800bae4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800baee:	b29b      	uxth	r3, r3
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	f000 80cf 	beq.w	800bc94 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800baf6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	f000 80ca 	beq.w	800bc94 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb08:	e853 3f00 	ldrex	r3, [r3]
 800bb0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bb0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bb22:	647b      	str	r3, [r7, #68]	; 0x44
 800bb24:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb2a:	e841 2300 	strex	r3, r2, [r1]
 800bb2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bb30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d1e4      	bne.n	800bb00 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	3308      	adds	r3, #8
 800bb3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb40:	e853 3f00 	ldrex	r3, [r3]
 800bb44:	623b      	str	r3, [r7, #32]
   return(result);
 800bb46:	6a3a      	ldr	r2, [r7, #32]
 800bb48:	4b55      	ldr	r3, [pc, #340]	; (800bca0 <HAL_UART_IRQHandler+0x770>)
 800bb4a:	4013      	ands	r3, r2
 800bb4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	3308      	adds	r3, #8
 800bb56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bb5a:	633a      	str	r2, [r7, #48]	; 0x30
 800bb5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb62:	e841 2300 	strex	r3, r2, [r1]
 800bb66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d1e3      	bne.n	800bb36 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2220      	movs	r2, #32
 800bb72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	e853 3f00 	ldrex	r3, [r3]
 800bb8e:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f023 0310 	bic.w	r3, r3, #16
 800bb96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	461a      	mov	r2, r3
 800bba0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bba4:	61fb      	str	r3, [r7, #28]
 800bba6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bba8:	69b9      	ldr	r1, [r7, #24]
 800bbaa:	69fa      	ldr	r2, [r7, #28]
 800bbac:	e841 2300 	strex	r3, r2, [r1]
 800bbb0:	617b      	str	r3, [r7, #20]
   return(result);
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d1e4      	bne.n	800bb82 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2202      	movs	r2, #2
 800bbbc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bbbe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 f881 	bl	800bccc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bbca:	e063      	b.n	800bc94 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bbcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d00e      	beq.n	800bbf6 <HAL_UART_IRQHandler+0x6c6>
 800bbd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d008      	beq.n	800bbf6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bbec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f001 f83b 	bl	800cc6a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bbf4:	e051      	b.n	800bc9a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bbf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d014      	beq.n	800bc2c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bc02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d105      	bne.n	800bc1a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bc0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d008      	beq.n	800bc2c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d03a      	beq.n	800bc98 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	4798      	blx	r3
    }
    return;
 800bc2a:	e035      	b.n	800bc98 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bc2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d009      	beq.n	800bc4c <HAL_UART_IRQHandler+0x71c>
 800bc38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d003      	beq.n	800bc4c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f000 ffe5 	bl	800cc14 <UART_EndTransmit_IT>
    return;
 800bc4a:	e026      	b.n	800bc9a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bc4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d009      	beq.n	800bc6c <HAL_UART_IRQHandler+0x73c>
 800bc58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d003      	beq.n	800bc6c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f001 f814 	bl	800cc92 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bc6a:	e016      	b.n	800bc9a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bc6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d010      	beq.n	800bc9a <HAL_UART_IRQHandler+0x76a>
 800bc78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	da0c      	bge.n	800bc9a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 fffc 	bl	800cc7e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bc86:	e008      	b.n	800bc9a <HAL_UART_IRQHandler+0x76a>
      return;
 800bc88:	bf00      	nop
 800bc8a:	e006      	b.n	800bc9a <HAL_UART_IRQHandler+0x76a>
    return;
 800bc8c:	bf00      	nop
 800bc8e:	e004      	b.n	800bc9a <HAL_UART_IRQHandler+0x76a>
      return;
 800bc90:	bf00      	nop
 800bc92:	e002      	b.n	800bc9a <HAL_UART_IRQHandler+0x76a>
      return;
 800bc94:	bf00      	nop
 800bc96:	e000      	b.n	800bc9a <HAL_UART_IRQHandler+0x76a>
    return;
 800bc98:	bf00      	nop
  }
}
 800bc9a:	37e8      	adds	r7, #232	; 0xe8
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}
 800bca0:	effffffe 	.word	0xeffffffe

0800bca4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bcac:	bf00      	nop
 800bcae:	370c      	adds	r7, #12
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b083      	sub	sp, #12
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bcc0:	bf00      	nop
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bcd8:	bf00      	nop
 800bcda:	370c      	adds	r7, #12
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bce8:	b092      	sub	sp, #72	; 0x48
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	689a      	ldr	r2, [r3, #8]
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	691b      	ldr	r3, [r3, #16]
 800bcfc:	431a      	orrs	r2, r3
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	695b      	ldr	r3, [r3, #20]
 800bd02:	431a      	orrs	r2, r3
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	69db      	ldr	r3, [r3, #28]
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	681a      	ldr	r2, [r3, #0]
 800bd12:	4bbe      	ldr	r3, [pc, #760]	; (800c00c <UART_SetConfig+0x328>)
 800bd14:	4013      	ands	r3, r2
 800bd16:	697a      	ldr	r2, [r7, #20]
 800bd18:	6812      	ldr	r2, [r2, #0]
 800bd1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bd1c:	430b      	orrs	r3, r1
 800bd1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	68da      	ldr	r2, [r3, #12]
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	430a      	orrs	r2, r1
 800bd34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	699b      	ldr	r3, [r3, #24]
 800bd3a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4ab3      	ldr	r2, [pc, #716]	; (800c010 <UART_SetConfig+0x32c>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d004      	beq.n	800bd50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	6a1b      	ldr	r3, [r3, #32]
 800bd4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	689a      	ldr	r2, [r3, #8]
 800bd56:	4baf      	ldr	r3, [pc, #700]	; (800c014 <UART_SetConfig+0x330>)
 800bd58:	4013      	ands	r3, r2
 800bd5a:	697a      	ldr	r2, [r7, #20]
 800bd5c:	6812      	ldr	r2, [r2, #0]
 800bd5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bd60:	430b      	orrs	r3, r1
 800bd62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd6a:	f023 010f 	bic.w	r1, r3, #15
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	430a      	orrs	r2, r1
 800bd78:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4aa6      	ldr	r2, [pc, #664]	; (800c018 <UART_SetConfig+0x334>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d177      	bne.n	800be74 <UART_SetConfig+0x190>
 800bd84:	4ba5      	ldr	r3, [pc, #660]	; (800c01c <UART_SetConfig+0x338>)
 800bd86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bd8c:	2b28      	cmp	r3, #40	; 0x28
 800bd8e:	d86d      	bhi.n	800be6c <UART_SetConfig+0x188>
 800bd90:	a201      	add	r2, pc, #4	; (adr r2, 800bd98 <UART_SetConfig+0xb4>)
 800bd92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd96:	bf00      	nop
 800bd98:	0800be3d 	.word	0x0800be3d
 800bd9c:	0800be6d 	.word	0x0800be6d
 800bda0:	0800be6d 	.word	0x0800be6d
 800bda4:	0800be6d 	.word	0x0800be6d
 800bda8:	0800be6d 	.word	0x0800be6d
 800bdac:	0800be6d 	.word	0x0800be6d
 800bdb0:	0800be6d 	.word	0x0800be6d
 800bdb4:	0800be6d 	.word	0x0800be6d
 800bdb8:	0800be45 	.word	0x0800be45
 800bdbc:	0800be6d 	.word	0x0800be6d
 800bdc0:	0800be6d 	.word	0x0800be6d
 800bdc4:	0800be6d 	.word	0x0800be6d
 800bdc8:	0800be6d 	.word	0x0800be6d
 800bdcc:	0800be6d 	.word	0x0800be6d
 800bdd0:	0800be6d 	.word	0x0800be6d
 800bdd4:	0800be6d 	.word	0x0800be6d
 800bdd8:	0800be4d 	.word	0x0800be4d
 800bddc:	0800be6d 	.word	0x0800be6d
 800bde0:	0800be6d 	.word	0x0800be6d
 800bde4:	0800be6d 	.word	0x0800be6d
 800bde8:	0800be6d 	.word	0x0800be6d
 800bdec:	0800be6d 	.word	0x0800be6d
 800bdf0:	0800be6d 	.word	0x0800be6d
 800bdf4:	0800be6d 	.word	0x0800be6d
 800bdf8:	0800be55 	.word	0x0800be55
 800bdfc:	0800be6d 	.word	0x0800be6d
 800be00:	0800be6d 	.word	0x0800be6d
 800be04:	0800be6d 	.word	0x0800be6d
 800be08:	0800be6d 	.word	0x0800be6d
 800be0c:	0800be6d 	.word	0x0800be6d
 800be10:	0800be6d 	.word	0x0800be6d
 800be14:	0800be6d 	.word	0x0800be6d
 800be18:	0800be5d 	.word	0x0800be5d
 800be1c:	0800be6d 	.word	0x0800be6d
 800be20:	0800be6d 	.word	0x0800be6d
 800be24:	0800be6d 	.word	0x0800be6d
 800be28:	0800be6d 	.word	0x0800be6d
 800be2c:	0800be6d 	.word	0x0800be6d
 800be30:	0800be6d 	.word	0x0800be6d
 800be34:	0800be6d 	.word	0x0800be6d
 800be38:	0800be65 	.word	0x0800be65
 800be3c:	2301      	movs	r3, #1
 800be3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be42:	e222      	b.n	800c28a <UART_SetConfig+0x5a6>
 800be44:	2304      	movs	r3, #4
 800be46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be4a:	e21e      	b.n	800c28a <UART_SetConfig+0x5a6>
 800be4c:	2308      	movs	r3, #8
 800be4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be52:	e21a      	b.n	800c28a <UART_SetConfig+0x5a6>
 800be54:	2310      	movs	r3, #16
 800be56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be5a:	e216      	b.n	800c28a <UART_SetConfig+0x5a6>
 800be5c:	2320      	movs	r3, #32
 800be5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be62:	e212      	b.n	800c28a <UART_SetConfig+0x5a6>
 800be64:	2340      	movs	r3, #64	; 0x40
 800be66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be6a:	e20e      	b.n	800c28a <UART_SetConfig+0x5a6>
 800be6c:	2380      	movs	r3, #128	; 0x80
 800be6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be72:	e20a      	b.n	800c28a <UART_SetConfig+0x5a6>
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a69      	ldr	r2, [pc, #420]	; (800c020 <UART_SetConfig+0x33c>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d130      	bne.n	800bee0 <UART_SetConfig+0x1fc>
 800be7e:	4b67      	ldr	r3, [pc, #412]	; (800c01c <UART_SetConfig+0x338>)
 800be80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be82:	f003 0307 	and.w	r3, r3, #7
 800be86:	2b05      	cmp	r3, #5
 800be88:	d826      	bhi.n	800bed8 <UART_SetConfig+0x1f4>
 800be8a:	a201      	add	r2, pc, #4	; (adr r2, 800be90 <UART_SetConfig+0x1ac>)
 800be8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be90:	0800bea9 	.word	0x0800bea9
 800be94:	0800beb1 	.word	0x0800beb1
 800be98:	0800beb9 	.word	0x0800beb9
 800be9c:	0800bec1 	.word	0x0800bec1
 800bea0:	0800bec9 	.word	0x0800bec9
 800bea4:	0800bed1 	.word	0x0800bed1
 800bea8:	2300      	movs	r3, #0
 800beaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beae:	e1ec      	b.n	800c28a <UART_SetConfig+0x5a6>
 800beb0:	2304      	movs	r3, #4
 800beb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beb6:	e1e8      	b.n	800c28a <UART_SetConfig+0x5a6>
 800beb8:	2308      	movs	r3, #8
 800beba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bebe:	e1e4      	b.n	800c28a <UART_SetConfig+0x5a6>
 800bec0:	2310      	movs	r3, #16
 800bec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bec6:	e1e0      	b.n	800c28a <UART_SetConfig+0x5a6>
 800bec8:	2320      	movs	r3, #32
 800beca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bece:	e1dc      	b.n	800c28a <UART_SetConfig+0x5a6>
 800bed0:	2340      	movs	r3, #64	; 0x40
 800bed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bed6:	e1d8      	b.n	800c28a <UART_SetConfig+0x5a6>
 800bed8:	2380      	movs	r3, #128	; 0x80
 800beda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bede:	e1d4      	b.n	800c28a <UART_SetConfig+0x5a6>
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4a4f      	ldr	r2, [pc, #316]	; (800c024 <UART_SetConfig+0x340>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d130      	bne.n	800bf4c <UART_SetConfig+0x268>
 800beea:	4b4c      	ldr	r3, [pc, #304]	; (800c01c <UART_SetConfig+0x338>)
 800beec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beee:	f003 0307 	and.w	r3, r3, #7
 800bef2:	2b05      	cmp	r3, #5
 800bef4:	d826      	bhi.n	800bf44 <UART_SetConfig+0x260>
 800bef6:	a201      	add	r2, pc, #4	; (adr r2, 800befc <UART_SetConfig+0x218>)
 800bef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800befc:	0800bf15 	.word	0x0800bf15
 800bf00:	0800bf1d 	.word	0x0800bf1d
 800bf04:	0800bf25 	.word	0x0800bf25
 800bf08:	0800bf2d 	.word	0x0800bf2d
 800bf0c:	0800bf35 	.word	0x0800bf35
 800bf10:	0800bf3d 	.word	0x0800bf3d
 800bf14:	2300      	movs	r3, #0
 800bf16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf1a:	e1b6      	b.n	800c28a <UART_SetConfig+0x5a6>
 800bf1c:	2304      	movs	r3, #4
 800bf1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf22:	e1b2      	b.n	800c28a <UART_SetConfig+0x5a6>
 800bf24:	2308      	movs	r3, #8
 800bf26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf2a:	e1ae      	b.n	800c28a <UART_SetConfig+0x5a6>
 800bf2c:	2310      	movs	r3, #16
 800bf2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf32:	e1aa      	b.n	800c28a <UART_SetConfig+0x5a6>
 800bf34:	2320      	movs	r3, #32
 800bf36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf3a:	e1a6      	b.n	800c28a <UART_SetConfig+0x5a6>
 800bf3c:	2340      	movs	r3, #64	; 0x40
 800bf3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf42:	e1a2      	b.n	800c28a <UART_SetConfig+0x5a6>
 800bf44:	2380      	movs	r3, #128	; 0x80
 800bf46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf4a:	e19e      	b.n	800c28a <UART_SetConfig+0x5a6>
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4a35      	ldr	r2, [pc, #212]	; (800c028 <UART_SetConfig+0x344>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d130      	bne.n	800bfb8 <UART_SetConfig+0x2d4>
 800bf56:	4b31      	ldr	r3, [pc, #196]	; (800c01c <UART_SetConfig+0x338>)
 800bf58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf5a:	f003 0307 	and.w	r3, r3, #7
 800bf5e:	2b05      	cmp	r3, #5
 800bf60:	d826      	bhi.n	800bfb0 <UART_SetConfig+0x2cc>
 800bf62:	a201      	add	r2, pc, #4	; (adr r2, 800bf68 <UART_SetConfig+0x284>)
 800bf64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf68:	0800bf81 	.word	0x0800bf81
 800bf6c:	0800bf89 	.word	0x0800bf89
 800bf70:	0800bf91 	.word	0x0800bf91
 800bf74:	0800bf99 	.word	0x0800bf99
 800bf78:	0800bfa1 	.word	0x0800bfa1
 800bf7c:	0800bfa9 	.word	0x0800bfa9
 800bf80:	2300      	movs	r3, #0
 800bf82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf86:	e180      	b.n	800c28a <UART_SetConfig+0x5a6>
 800bf88:	2304      	movs	r3, #4
 800bf8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf8e:	e17c      	b.n	800c28a <UART_SetConfig+0x5a6>
 800bf90:	2308      	movs	r3, #8
 800bf92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf96:	e178      	b.n	800c28a <UART_SetConfig+0x5a6>
 800bf98:	2310      	movs	r3, #16
 800bf9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf9e:	e174      	b.n	800c28a <UART_SetConfig+0x5a6>
 800bfa0:	2320      	movs	r3, #32
 800bfa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfa6:	e170      	b.n	800c28a <UART_SetConfig+0x5a6>
 800bfa8:	2340      	movs	r3, #64	; 0x40
 800bfaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfae:	e16c      	b.n	800c28a <UART_SetConfig+0x5a6>
 800bfb0:	2380      	movs	r3, #128	; 0x80
 800bfb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfb6:	e168      	b.n	800c28a <UART_SetConfig+0x5a6>
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4a1b      	ldr	r2, [pc, #108]	; (800c02c <UART_SetConfig+0x348>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d142      	bne.n	800c048 <UART_SetConfig+0x364>
 800bfc2:	4b16      	ldr	r3, [pc, #88]	; (800c01c <UART_SetConfig+0x338>)
 800bfc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfc6:	f003 0307 	and.w	r3, r3, #7
 800bfca:	2b05      	cmp	r3, #5
 800bfcc:	d838      	bhi.n	800c040 <UART_SetConfig+0x35c>
 800bfce:	a201      	add	r2, pc, #4	; (adr r2, 800bfd4 <UART_SetConfig+0x2f0>)
 800bfd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfd4:	0800bfed 	.word	0x0800bfed
 800bfd8:	0800bff5 	.word	0x0800bff5
 800bfdc:	0800bffd 	.word	0x0800bffd
 800bfe0:	0800c005 	.word	0x0800c005
 800bfe4:	0800c031 	.word	0x0800c031
 800bfe8:	0800c039 	.word	0x0800c039
 800bfec:	2300      	movs	r3, #0
 800bfee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bff2:	e14a      	b.n	800c28a <UART_SetConfig+0x5a6>
 800bff4:	2304      	movs	r3, #4
 800bff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bffa:	e146      	b.n	800c28a <UART_SetConfig+0x5a6>
 800bffc:	2308      	movs	r3, #8
 800bffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c002:	e142      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c004:	2310      	movs	r3, #16
 800c006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c00a:	e13e      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c00c:	cfff69f3 	.word	0xcfff69f3
 800c010:	58000c00 	.word	0x58000c00
 800c014:	11fff4ff 	.word	0x11fff4ff
 800c018:	40011000 	.word	0x40011000
 800c01c:	58024400 	.word	0x58024400
 800c020:	40004400 	.word	0x40004400
 800c024:	40004800 	.word	0x40004800
 800c028:	40004c00 	.word	0x40004c00
 800c02c:	40005000 	.word	0x40005000
 800c030:	2320      	movs	r3, #32
 800c032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c036:	e128      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c038:	2340      	movs	r3, #64	; 0x40
 800c03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c03e:	e124      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c040:	2380      	movs	r3, #128	; 0x80
 800c042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c046:	e120      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4acb      	ldr	r2, [pc, #812]	; (800c37c <UART_SetConfig+0x698>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d176      	bne.n	800c140 <UART_SetConfig+0x45c>
 800c052:	4bcb      	ldr	r3, [pc, #812]	; (800c380 <UART_SetConfig+0x69c>)
 800c054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c056:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c05a:	2b28      	cmp	r3, #40	; 0x28
 800c05c:	d86c      	bhi.n	800c138 <UART_SetConfig+0x454>
 800c05e:	a201      	add	r2, pc, #4	; (adr r2, 800c064 <UART_SetConfig+0x380>)
 800c060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c064:	0800c109 	.word	0x0800c109
 800c068:	0800c139 	.word	0x0800c139
 800c06c:	0800c139 	.word	0x0800c139
 800c070:	0800c139 	.word	0x0800c139
 800c074:	0800c139 	.word	0x0800c139
 800c078:	0800c139 	.word	0x0800c139
 800c07c:	0800c139 	.word	0x0800c139
 800c080:	0800c139 	.word	0x0800c139
 800c084:	0800c111 	.word	0x0800c111
 800c088:	0800c139 	.word	0x0800c139
 800c08c:	0800c139 	.word	0x0800c139
 800c090:	0800c139 	.word	0x0800c139
 800c094:	0800c139 	.word	0x0800c139
 800c098:	0800c139 	.word	0x0800c139
 800c09c:	0800c139 	.word	0x0800c139
 800c0a0:	0800c139 	.word	0x0800c139
 800c0a4:	0800c119 	.word	0x0800c119
 800c0a8:	0800c139 	.word	0x0800c139
 800c0ac:	0800c139 	.word	0x0800c139
 800c0b0:	0800c139 	.word	0x0800c139
 800c0b4:	0800c139 	.word	0x0800c139
 800c0b8:	0800c139 	.word	0x0800c139
 800c0bc:	0800c139 	.word	0x0800c139
 800c0c0:	0800c139 	.word	0x0800c139
 800c0c4:	0800c121 	.word	0x0800c121
 800c0c8:	0800c139 	.word	0x0800c139
 800c0cc:	0800c139 	.word	0x0800c139
 800c0d0:	0800c139 	.word	0x0800c139
 800c0d4:	0800c139 	.word	0x0800c139
 800c0d8:	0800c139 	.word	0x0800c139
 800c0dc:	0800c139 	.word	0x0800c139
 800c0e0:	0800c139 	.word	0x0800c139
 800c0e4:	0800c129 	.word	0x0800c129
 800c0e8:	0800c139 	.word	0x0800c139
 800c0ec:	0800c139 	.word	0x0800c139
 800c0f0:	0800c139 	.word	0x0800c139
 800c0f4:	0800c139 	.word	0x0800c139
 800c0f8:	0800c139 	.word	0x0800c139
 800c0fc:	0800c139 	.word	0x0800c139
 800c100:	0800c139 	.word	0x0800c139
 800c104:	0800c131 	.word	0x0800c131
 800c108:	2301      	movs	r3, #1
 800c10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c10e:	e0bc      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c110:	2304      	movs	r3, #4
 800c112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c116:	e0b8      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c118:	2308      	movs	r3, #8
 800c11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c11e:	e0b4      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c120:	2310      	movs	r3, #16
 800c122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c126:	e0b0      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c128:	2320      	movs	r3, #32
 800c12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c12e:	e0ac      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c130:	2340      	movs	r3, #64	; 0x40
 800c132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c136:	e0a8      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c138:	2380      	movs	r3, #128	; 0x80
 800c13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c13e:	e0a4      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a8f      	ldr	r2, [pc, #572]	; (800c384 <UART_SetConfig+0x6a0>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d130      	bne.n	800c1ac <UART_SetConfig+0x4c8>
 800c14a:	4b8d      	ldr	r3, [pc, #564]	; (800c380 <UART_SetConfig+0x69c>)
 800c14c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c14e:	f003 0307 	and.w	r3, r3, #7
 800c152:	2b05      	cmp	r3, #5
 800c154:	d826      	bhi.n	800c1a4 <UART_SetConfig+0x4c0>
 800c156:	a201      	add	r2, pc, #4	; (adr r2, 800c15c <UART_SetConfig+0x478>)
 800c158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c15c:	0800c175 	.word	0x0800c175
 800c160:	0800c17d 	.word	0x0800c17d
 800c164:	0800c185 	.word	0x0800c185
 800c168:	0800c18d 	.word	0x0800c18d
 800c16c:	0800c195 	.word	0x0800c195
 800c170:	0800c19d 	.word	0x0800c19d
 800c174:	2300      	movs	r3, #0
 800c176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c17a:	e086      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c17c:	2304      	movs	r3, #4
 800c17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c182:	e082      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c184:	2308      	movs	r3, #8
 800c186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c18a:	e07e      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c18c:	2310      	movs	r3, #16
 800c18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c192:	e07a      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c194:	2320      	movs	r3, #32
 800c196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c19a:	e076      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c19c:	2340      	movs	r3, #64	; 0x40
 800c19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1a2:	e072      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c1a4:	2380      	movs	r3, #128	; 0x80
 800c1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1aa:	e06e      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a75      	ldr	r2, [pc, #468]	; (800c388 <UART_SetConfig+0x6a4>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d130      	bne.n	800c218 <UART_SetConfig+0x534>
 800c1b6:	4b72      	ldr	r3, [pc, #456]	; (800c380 <UART_SetConfig+0x69c>)
 800c1b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1ba:	f003 0307 	and.w	r3, r3, #7
 800c1be:	2b05      	cmp	r3, #5
 800c1c0:	d826      	bhi.n	800c210 <UART_SetConfig+0x52c>
 800c1c2:	a201      	add	r2, pc, #4	; (adr r2, 800c1c8 <UART_SetConfig+0x4e4>)
 800c1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c8:	0800c1e1 	.word	0x0800c1e1
 800c1cc:	0800c1e9 	.word	0x0800c1e9
 800c1d0:	0800c1f1 	.word	0x0800c1f1
 800c1d4:	0800c1f9 	.word	0x0800c1f9
 800c1d8:	0800c201 	.word	0x0800c201
 800c1dc:	0800c209 	.word	0x0800c209
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1e6:	e050      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c1e8:	2304      	movs	r3, #4
 800c1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ee:	e04c      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c1f0:	2308      	movs	r3, #8
 800c1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1f6:	e048      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c1f8:	2310      	movs	r3, #16
 800c1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1fe:	e044      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c200:	2320      	movs	r3, #32
 800c202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c206:	e040      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c208:	2340      	movs	r3, #64	; 0x40
 800c20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c20e:	e03c      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c210:	2380      	movs	r3, #128	; 0x80
 800c212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c216:	e038      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4a5b      	ldr	r2, [pc, #364]	; (800c38c <UART_SetConfig+0x6a8>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d130      	bne.n	800c284 <UART_SetConfig+0x5a0>
 800c222:	4b57      	ldr	r3, [pc, #348]	; (800c380 <UART_SetConfig+0x69c>)
 800c224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c226:	f003 0307 	and.w	r3, r3, #7
 800c22a:	2b05      	cmp	r3, #5
 800c22c:	d826      	bhi.n	800c27c <UART_SetConfig+0x598>
 800c22e:	a201      	add	r2, pc, #4	; (adr r2, 800c234 <UART_SetConfig+0x550>)
 800c230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c234:	0800c24d 	.word	0x0800c24d
 800c238:	0800c255 	.word	0x0800c255
 800c23c:	0800c25d 	.word	0x0800c25d
 800c240:	0800c265 	.word	0x0800c265
 800c244:	0800c26d 	.word	0x0800c26d
 800c248:	0800c275 	.word	0x0800c275
 800c24c:	2302      	movs	r3, #2
 800c24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c252:	e01a      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c254:	2304      	movs	r3, #4
 800c256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c25a:	e016      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c25c:	2308      	movs	r3, #8
 800c25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c262:	e012      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c264:	2310      	movs	r3, #16
 800c266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c26a:	e00e      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c26c:	2320      	movs	r3, #32
 800c26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c272:	e00a      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c274:	2340      	movs	r3, #64	; 0x40
 800c276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c27a:	e006      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c27c:	2380      	movs	r3, #128	; 0x80
 800c27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c282:	e002      	b.n	800c28a <UART_SetConfig+0x5a6>
 800c284:	2380      	movs	r3, #128	; 0x80
 800c286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	4a3f      	ldr	r2, [pc, #252]	; (800c38c <UART_SetConfig+0x6a8>)
 800c290:	4293      	cmp	r3, r2
 800c292:	f040 80f8 	bne.w	800c486 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c296:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c29a:	2b20      	cmp	r3, #32
 800c29c:	dc46      	bgt.n	800c32c <UART_SetConfig+0x648>
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	f2c0 8082 	blt.w	800c3a8 <UART_SetConfig+0x6c4>
 800c2a4:	3b02      	subs	r3, #2
 800c2a6:	2b1e      	cmp	r3, #30
 800c2a8:	d87e      	bhi.n	800c3a8 <UART_SetConfig+0x6c4>
 800c2aa:	a201      	add	r2, pc, #4	; (adr r2, 800c2b0 <UART_SetConfig+0x5cc>)
 800c2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2b0:	0800c333 	.word	0x0800c333
 800c2b4:	0800c3a9 	.word	0x0800c3a9
 800c2b8:	0800c33b 	.word	0x0800c33b
 800c2bc:	0800c3a9 	.word	0x0800c3a9
 800c2c0:	0800c3a9 	.word	0x0800c3a9
 800c2c4:	0800c3a9 	.word	0x0800c3a9
 800c2c8:	0800c34b 	.word	0x0800c34b
 800c2cc:	0800c3a9 	.word	0x0800c3a9
 800c2d0:	0800c3a9 	.word	0x0800c3a9
 800c2d4:	0800c3a9 	.word	0x0800c3a9
 800c2d8:	0800c3a9 	.word	0x0800c3a9
 800c2dc:	0800c3a9 	.word	0x0800c3a9
 800c2e0:	0800c3a9 	.word	0x0800c3a9
 800c2e4:	0800c3a9 	.word	0x0800c3a9
 800c2e8:	0800c35b 	.word	0x0800c35b
 800c2ec:	0800c3a9 	.word	0x0800c3a9
 800c2f0:	0800c3a9 	.word	0x0800c3a9
 800c2f4:	0800c3a9 	.word	0x0800c3a9
 800c2f8:	0800c3a9 	.word	0x0800c3a9
 800c2fc:	0800c3a9 	.word	0x0800c3a9
 800c300:	0800c3a9 	.word	0x0800c3a9
 800c304:	0800c3a9 	.word	0x0800c3a9
 800c308:	0800c3a9 	.word	0x0800c3a9
 800c30c:	0800c3a9 	.word	0x0800c3a9
 800c310:	0800c3a9 	.word	0x0800c3a9
 800c314:	0800c3a9 	.word	0x0800c3a9
 800c318:	0800c3a9 	.word	0x0800c3a9
 800c31c:	0800c3a9 	.word	0x0800c3a9
 800c320:	0800c3a9 	.word	0x0800c3a9
 800c324:	0800c3a9 	.word	0x0800c3a9
 800c328:	0800c39b 	.word	0x0800c39b
 800c32c:	2b40      	cmp	r3, #64	; 0x40
 800c32e:	d037      	beq.n	800c3a0 <UART_SetConfig+0x6bc>
 800c330:	e03a      	b.n	800c3a8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c332:	f7fd fe45 	bl	8009fc0 <HAL_RCCEx_GetD3PCLK1Freq>
 800c336:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c338:	e03c      	b.n	800c3b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c33a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c33e:	4618      	mov	r0, r3
 800c340:	f7fd fe54 	bl	8009fec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c346:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c348:	e034      	b.n	800c3b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c34a:	f107 0318 	add.w	r3, r7, #24
 800c34e:	4618      	mov	r0, r3
 800c350:	f7fd ffa0 	bl	800a294 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c354:	69fb      	ldr	r3, [r7, #28]
 800c356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c358:	e02c      	b.n	800c3b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c35a:	4b09      	ldr	r3, [pc, #36]	; (800c380 <UART_SetConfig+0x69c>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f003 0320 	and.w	r3, r3, #32
 800c362:	2b00      	cmp	r3, #0
 800c364:	d016      	beq.n	800c394 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c366:	4b06      	ldr	r3, [pc, #24]	; (800c380 <UART_SetConfig+0x69c>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	08db      	lsrs	r3, r3, #3
 800c36c:	f003 0303 	and.w	r3, r3, #3
 800c370:	4a07      	ldr	r2, [pc, #28]	; (800c390 <UART_SetConfig+0x6ac>)
 800c372:	fa22 f303 	lsr.w	r3, r2, r3
 800c376:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c378:	e01c      	b.n	800c3b4 <UART_SetConfig+0x6d0>
 800c37a:	bf00      	nop
 800c37c:	40011400 	.word	0x40011400
 800c380:	58024400 	.word	0x58024400
 800c384:	40007800 	.word	0x40007800
 800c388:	40007c00 	.word	0x40007c00
 800c38c:	58000c00 	.word	0x58000c00
 800c390:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c394:	4b9d      	ldr	r3, [pc, #628]	; (800c60c <UART_SetConfig+0x928>)
 800c396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c398:	e00c      	b.n	800c3b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c39a:	4b9d      	ldr	r3, [pc, #628]	; (800c610 <UART_SetConfig+0x92c>)
 800c39c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c39e:	e009      	b.n	800c3b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c3a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3a6:	e005      	b.n	800c3b4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c3b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c3b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	f000 81de 	beq.w	800c778 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c0:	4a94      	ldr	r2, [pc, #592]	; (800c614 <UART_SetConfig+0x930>)
 800c3c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3ce:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	685a      	ldr	r2, [r3, #4]
 800c3d4:	4613      	mov	r3, r2
 800c3d6:	005b      	lsls	r3, r3, #1
 800c3d8:	4413      	add	r3, r2
 800c3da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d305      	bcc.n	800c3ec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c3e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d903      	bls.n	800c3f4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c3f2:	e1c1      	b.n	800c778 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	60bb      	str	r3, [r7, #8]
 800c3fa:	60fa      	str	r2, [r7, #12]
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c400:	4a84      	ldr	r2, [pc, #528]	; (800c614 <UART_SetConfig+0x930>)
 800c402:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c406:	b29b      	uxth	r3, r3
 800c408:	2200      	movs	r2, #0
 800c40a:	603b      	str	r3, [r7, #0]
 800c40c:	607a      	str	r2, [r7, #4]
 800c40e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c412:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c416:	f7f3 ffb3 	bl	8000380 <__aeabi_uldivmod>
 800c41a:	4602      	mov	r2, r0
 800c41c:	460b      	mov	r3, r1
 800c41e:	4610      	mov	r0, r2
 800c420:	4619      	mov	r1, r3
 800c422:	f04f 0200 	mov.w	r2, #0
 800c426:	f04f 0300 	mov.w	r3, #0
 800c42a:	020b      	lsls	r3, r1, #8
 800c42c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c430:	0202      	lsls	r2, r0, #8
 800c432:	6979      	ldr	r1, [r7, #20]
 800c434:	6849      	ldr	r1, [r1, #4]
 800c436:	0849      	lsrs	r1, r1, #1
 800c438:	2000      	movs	r0, #0
 800c43a:	460c      	mov	r4, r1
 800c43c:	4605      	mov	r5, r0
 800c43e:	eb12 0804 	adds.w	r8, r2, r4
 800c442:	eb43 0905 	adc.w	r9, r3, r5
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	685b      	ldr	r3, [r3, #4]
 800c44a:	2200      	movs	r2, #0
 800c44c:	469a      	mov	sl, r3
 800c44e:	4693      	mov	fp, r2
 800c450:	4652      	mov	r2, sl
 800c452:	465b      	mov	r3, fp
 800c454:	4640      	mov	r0, r8
 800c456:	4649      	mov	r1, r9
 800c458:	f7f3 ff92 	bl	8000380 <__aeabi_uldivmod>
 800c45c:	4602      	mov	r2, r0
 800c45e:	460b      	mov	r3, r1
 800c460:	4613      	mov	r3, r2
 800c462:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c46a:	d308      	bcc.n	800c47e <UART_SetConfig+0x79a>
 800c46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c46e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c472:	d204      	bcs.n	800c47e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c47a:	60da      	str	r2, [r3, #12]
 800c47c:	e17c      	b.n	800c778 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c47e:	2301      	movs	r3, #1
 800c480:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c484:	e178      	b.n	800c778 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	69db      	ldr	r3, [r3, #28]
 800c48a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c48e:	f040 80c5 	bne.w	800c61c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c492:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c496:	2b20      	cmp	r3, #32
 800c498:	dc48      	bgt.n	800c52c <UART_SetConfig+0x848>
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	db7b      	blt.n	800c596 <UART_SetConfig+0x8b2>
 800c49e:	2b20      	cmp	r3, #32
 800c4a0:	d879      	bhi.n	800c596 <UART_SetConfig+0x8b2>
 800c4a2:	a201      	add	r2, pc, #4	; (adr r2, 800c4a8 <UART_SetConfig+0x7c4>)
 800c4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4a8:	0800c533 	.word	0x0800c533
 800c4ac:	0800c53b 	.word	0x0800c53b
 800c4b0:	0800c597 	.word	0x0800c597
 800c4b4:	0800c597 	.word	0x0800c597
 800c4b8:	0800c543 	.word	0x0800c543
 800c4bc:	0800c597 	.word	0x0800c597
 800c4c0:	0800c597 	.word	0x0800c597
 800c4c4:	0800c597 	.word	0x0800c597
 800c4c8:	0800c553 	.word	0x0800c553
 800c4cc:	0800c597 	.word	0x0800c597
 800c4d0:	0800c597 	.word	0x0800c597
 800c4d4:	0800c597 	.word	0x0800c597
 800c4d8:	0800c597 	.word	0x0800c597
 800c4dc:	0800c597 	.word	0x0800c597
 800c4e0:	0800c597 	.word	0x0800c597
 800c4e4:	0800c597 	.word	0x0800c597
 800c4e8:	0800c563 	.word	0x0800c563
 800c4ec:	0800c597 	.word	0x0800c597
 800c4f0:	0800c597 	.word	0x0800c597
 800c4f4:	0800c597 	.word	0x0800c597
 800c4f8:	0800c597 	.word	0x0800c597
 800c4fc:	0800c597 	.word	0x0800c597
 800c500:	0800c597 	.word	0x0800c597
 800c504:	0800c597 	.word	0x0800c597
 800c508:	0800c597 	.word	0x0800c597
 800c50c:	0800c597 	.word	0x0800c597
 800c510:	0800c597 	.word	0x0800c597
 800c514:	0800c597 	.word	0x0800c597
 800c518:	0800c597 	.word	0x0800c597
 800c51c:	0800c597 	.word	0x0800c597
 800c520:	0800c597 	.word	0x0800c597
 800c524:	0800c597 	.word	0x0800c597
 800c528:	0800c589 	.word	0x0800c589
 800c52c:	2b40      	cmp	r3, #64	; 0x40
 800c52e:	d02e      	beq.n	800c58e <UART_SetConfig+0x8aa>
 800c530:	e031      	b.n	800c596 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c532:	f7fc fb0f 	bl	8008b54 <HAL_RCC_GetPCLK1Freq>
 800c536:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c538:	e033      	b.n	800c5a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c53a:	f7fc fb21 	bl	8008b80 <HAL_RCC_GetPCLK2Freq>
 800c53e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c540:	e02f      	b.n	800c5a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c546:	4618      	mov	r0, r3
 800c548:	f7fd fd50 	bl	8009fec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c54e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c550:	e027      	b.n	800c5a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c552:	f107 0318 	add.w	r3, r7, #24
 800c556:	4618      	mov	r0, r3
 800c558:	f7fd fe9c 	bl	800a294 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c55c:	69fb      	ldr	r3, [r7, #28]
 800c55e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c560:	e01f      	b.n	800c5a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c562:	4b2d      	ldr	r3, [pc, #180]	; (800c618 <UART_SetConfig+0x934>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f003 0320 	and.w	r3, r3, #32
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d009      	beq.n	800c582 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c56e:	4b2a      	ldr	r3, [pc, #168]	; (800c618 <UART_SetConfig+0x934>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	08db      	lsrs	r3, r3, #3
 800c574:	f003 0303 	and.w	r3, r3, #3
 800c578:	4a24      	ldr	r2, [pc, #144]	; (800c60c <UART_SetConfig+0x928>)
 800c57a:	fa22 f303 	lsr.w	r3, r2, r3
 800c57e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c580:	e00f      	b.n	800c5a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c582:	4b22      	ldr	r3, [pc, #136]	; (800c60c <UART_SetConfig+0x928>)
 800c584:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c586:	e00c      	b.n	800c5a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c588:	4b21      	ldr	r3, [pc, #132]	; (800c610 <UART_SetConfig+0x92c>)
 800c58a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c58c:	e009      	b.n	800c5a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c58e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c594:	e005      	b.n	800c5a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c596:	2300      	movs	r3, #0
 800c598:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c59a:	2301      	movs	r3, #1
 800c59c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c5a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c5a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	f000 80e7 	beq.w	800c778 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ae:	4a19      	ldr	r2, [pc, #100]	; (800c614 <UART_SetConfig+0x930>)
 800c5b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5bc:	005a      	lsls	r2, r3, #1
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	085b      	lsrs	r3, r3, #1
 800c5c4:	441a      	add	r2, r3
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	685b      	ldr	r3, [r3, #4]
 800c5ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d2:	2b0f      	cmp	r3, #15
 800c5d4:	d916      	bls.n	800c604 <UART_SetConfig+0x920>
 800c5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5dc:	d212      	bcs.n	800c604 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e0:	b29b      	uxth	r3, r3
 800c5e2:	f023 030f 	bic.w	r3, r3, #15
 800c5e6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ea:	085b      	lsrs	r3, r3, #1
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	f003 0307 	and.w	r3, r3, #7
 800c5f2:	b29a      	uxth	r2, r3
 800c5f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c5f6:	4313      	orrs	r3, r2
 800c5f8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c600:	60da      	str	r2, [r3, #12]
 800c602:	e0b9      	b.n	800c778 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c604:	2301      	movs	r3, #1
 800c606:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c60a:	e0b5      	b.n	800c778 <UART_SetConfig+0xa94>
 800c60c:	03d09000 	.word	0x03d09000
 800c610:	003d0900 	.word	0x003d0900
 800c614:	0801041c 	.word	0x0801041c
 800c618:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c61c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c620:	2b20      	cmp	r3, #32
 800c622:	dc49      	bgt.n	800c6b8 <UART_SetConfig+0x9d4>
 800c624:	2b00      	cmp	r3, #0
 800c626:	db7c      	blt.n	800c722 <UART_SetConfig+0xa3e>
 800c628:	2b20      	cmp	r3, #32
 800c62a:	d87a      	bhi.n	800c722 <UART_SetConfig+0xa3e>
 800c62c:	a201      	add	r2, pc, #4	; (adr r2, 800c634 <UART_SetConfig+0x950>)
 800c62e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c632:	bf00      	nop
 800c634:	0800c6bf 	.word	0x0800c6bf
 800c638:	0800c6c7 	.word	0x0800c6c7
 800c63c:	0800c723 	.word	0x0800c723
 800c640:	0800c723 	.word	0x0800c723
 800c644:	0800c6cf 	.word	0x0800c6cf
 800c648:	0800c723 	.word	0x0800c723
 800c64c:	0800c723 	.word	0x0800c723
 800c650:	0800c723 	.word	0x0800c723
 800c654:	0800c6df 	.word	0x0800c6df
 800c658:	0800c723 	.word	0x0800c723
 800c65c:	0800c723 	.word	0x0800c723
 800c660:	0800c723 	.word	0x0800c723
 800c664:	0800c723 	.word	0x0800c723
 800c668:	0800c723 	.word	0x0800c723
 800c66c:	0800c723 	.word	0x0800c723
 800c670:	0800c723 	.word	0x0800c723
 800c674:	0800c6ef 	.word	0x0800c6ef
 800c678:	0800c723 	.word	0x0800c723
 800c67c:	0800c723 	.word	0x0800c723
 800c680:	0800c723 	.word	0x0800c723
 800c684:	0800c723 	.word	0x0800c723
 800c688:	0800c723 	.word	0x0800c723
 800c68c:	0800c723 	.word	0x0800c723
 800c690:	0800c723 	.word	0x0800c723
 800c694:	0800c723 	.word	0x0800c723
 800c698:	0800c723 	.word	0x0800c723
 800c69c:	0800c723 	.word	0x0800c723
 800c6a0:	0800c723 	.word	0x0800c723
 800c6a4:	0800c723 	.word	0x0800c723
 800c6a8:	0800c723 	.word	0x0800c723
 800c6ac:	0800c723 	.word	0x0800c723
 800c6b0:	0800c723 	.word	0x0800c723
 800c6b4:	0800c715 	.word	0x0800c715
 800c6b8:	2b40      	cmp	r3, #64	; 0x40
 800c6ba:	d02e      	beq.n	800c71a <UART_SetConfig+0xa36>
 800c6bc:	e031      	b.n	800c722 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c6be:	f7fc fa49 	bl	8008b54 <HAL_RCC_GetPCLK1Freq>
 800c6c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c6c4:	e033      	b.n	800c72e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c6c6:	f7fc fa5b 	bl	8008b80 <HAL_RCC_GetPCLK2Freq>
 800c6ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c6cc:	e02f      	b.n	800c72e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7fd fc8a 	bl	8009fec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6dc:	e027      	b.n	800c72e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6de:	f107 0318 	add.w	r3, r7, #24
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7fd fdd6 	bl	800a294 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c6e8:	69fb      	ldr	r3, [r7, #28]
 800c6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6ec:	e01f      	b.n	800c72e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6ee:	4b2d      	ldr	r3, [pc, #180]	; (800c7a4 <UART_SetConfig+0xac0>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f003 0320 	and.w	r3, r3, #32
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d009      	beq.n	800c70e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c6fa:	4b2a      	ldr	r3, [pc, #168]	; (800c7a4 <UART_SetConfig+0xac0>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	08db      	lsrs	r3, r3, #3
 800c700:	f003 0303 	and.w	r3, r3, #3
 800c704:	4a28      	ldr	r2, [pc, #160]	; (800c7a8 <UART_SetConfig+0xac4>)
 800c706:	fa22 f303 	lsr.w	r3, r2, r3
 800c70a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c70c:	e00f      	b.n	800c72e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c70e:	4b26      	ldr	r3, [pc, #152]	; (800c7a8 <UART_SetConfig+0xac4>)
 800c710:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c712:	e00c      	b.n	800c72e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c714:	4b25      	ldr	r3, [pc, #148]	; (800c7ac <UART_SetConfig+0xac8>)
 800c716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c718:	e009      	b.n	800c72e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c71a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c71e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c720:	e005      	b.n	800c72e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c722:	2300      	movs	r3, #0
 800c724:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c726:	2301      	movs	r3, #1
 800c728:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c72c:	bf00      	nop
    }

    if (pclk != 0U)
 800c72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c730:	2b00      	cmp	r3, #0
 800c732:	d021      	beq.n	800c778 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c738:	4a1d      	ldr	r2, [pc, #116]	; (800c7b0 <UART_SetConfig+0xacc>)
 800c73a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c73e:	461a      	mov	r2, r3
 800c740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c742:	fbb3 f2f2 	udiv	r2, r3, r2
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	085b      	lsrs	r3, r3, #1
 800c74c:	441a      	add	r2, r3
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	685b      	ldr	r3, [r3, #4]
 800c752:	fbb2 f3f3 	udiv	r3, r2, r3
 800c756:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c75a:	2b0f      	cmp	r3, #15
 800c75c:	d909      	bls.n	800c772 <UART_SetConfig+0xa8e>
 800c75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c764:	d205      	bcs.n	800c772 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c768:	b29a      	uxth	r2, r3
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	60da      	str	r2, [r3, #12]
 800c770:	e002      	b.n	800c778 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c772:	2301      	movs	r3, #1
 800c774:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	2201      	movs	r2, #1
 800c77c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	2201      	movs	r2, #1
 800c784:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	2200      	movs	r2, #0
 800c78c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	2200      	movs	r2, #0
 800c792:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c794:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3748      	adds	r7, #72	; 0x48
 800c79c:	46bd      	mov	sp, r7
 800c79e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c7a2:	bf00      	nop
 800c7a4:	58024400 	.word	0x58024400
 800c7a8:	03d09000 	.word	0x03d09000
 800c7ac:	003d0900 	.word	0x003d0900
 800c7b0:	0801041c 	.word	0x0801041c

0800c7b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b083      	sub	sp, #12
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7c0:	f003 0301 	and.w	r3, r3, #1
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d00a      	beq.n	800c7de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	430a      	orrs	r2, r1
 800c7dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7e2:	f003 0302 	and.w	r3, r3, #2
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d00a      	beq.n	800c800 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	430a      	orrs	r2, r1
 800c7fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c804:	f003 0304 	and.w	r3, r3, #4
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d00a      	beq.n	800c822 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	685b      	ldr	r3, [r3, #4]
 800c812:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	430a      	orrs	r2, r1
 800c820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c826:	f003 0308 	and.w	r3, r3, #8
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d00a      	beq.n	800c844 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	430a      	orrs	r2, r1
 800c842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c848:	f003 0310 	and.w	r3, r3, #16
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d00a      	beq.n	800c866 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	689b      	ldr	r3, [r3, #8]
 800c856:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	430a      	orrs	r2, r1
 800c864:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c86a:	f003 0320 	and.w	r3, r3, #32
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d00a      	beq.n	800c888 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	689b      	ldr	r3, [r3, #8]
 800c878:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	430a      	orrs	r2, r1
 800c886:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c88c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c890:	2b00      	cmp	r3, #0
 800c892:	d01a      	beq.n	800c8ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	430a      	orrs	r2, r1
 800c8a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8b2:	d10a      	bne.n	800c8ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	430a      	orrs	r2, r1
 800c8c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d00a      	beq.n	800c8ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	685b      	ldr	r3, [r3, #4]
 800c8dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	430a      	orrs	r2, r1
 800c8ea:	605a      	str	r2, [r3, #4]
  }
}
 800c8ec:	bf00      	nop
 800c8ee:	370c      	adds	r7, #12
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr

0800c8f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b098      	sub	sp, #96	; 0x60
 800c8fc:	af02      	add	r7, sp, #8
 800c8fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2200      	movs	r2, #0
 800c904:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c908:	f7f7 fac8 	bl	8003e9c <HAL_GetTick>
 800c90c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f003 0308 	and.w	r3, r3, #8
 800c918:	2b08      	cmp	r3, #8
 800c91a:	d12f      	bne.n	800c97c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c91c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c920:	9300      	str	r3, [sp, #0]
 800c922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c924:	2200      	movs	r2, #0
 800c926:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f000 f88e 	bl	800ca4c <UART_WaitOnFlagUntilTimeout>
 800c930:	4603      	mov	r3, r0
 800c932:	2b00      	cmp	r3, #0
 800c934:	d022      	beq.n	800c97c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c93e:	e853 3f00 	ldrex	r3, [r3]
 800c942:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c946:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c94a:	653b      	str	r3, [r7, #80]	; 0x50
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	461a      	mov	r2, r3
 800c952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c954:	647b      	str	r3, [r7, #68]	; 0x44
 800c956:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c958:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c95a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c95c:	e841 2300 	strex	r3, r2, [r1]
 800c960:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c964:	2b00      	cmp	r3, #0
 800c966:	d1e6      	bne.n	800c936 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2220      	movs	r2, #32
 800c96c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2200      	movs	r2, #0
 800c974:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c978:	2303      	movs	r3, #3
 800c97a:	e063      	b.n	800ca44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f003 0304 	and.w	r3, r3, #4
 800c986:	2b04      	cmp	r3, #4
 800c988:	d149      	bne.n	800ca1e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c98a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c98e:	9300      	str	r3, [sp, #0]
 800c990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c992:	2200      	movs	r2, #0
 800c994:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f000 f857 	bl	800ca4c <UART_WaitOnFlagUntilTimeout>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d03c      	beq.n	800ca1e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ac:	e853 3f00 	ldrex	r3, [r3]
 800c9b0:	623b      	str	r3, [r7, #32]
   return(result);
 800c9b2:	6a3b      	ldr	r3, [r7, #32]
 800c9b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c9b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	461a      	mov	r2, r3
 800c9c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9c2:	633b      	str	r3, [r7, #48]	; 0x30
 800c9c4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9ca:	e841 2300 	strex	r3, r2, [r1]
 800c9ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d1e6      	bne.n	800c9a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	3308      	adds	r3, #8
 800c9dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	e853 3f00 	ldrex	r3, [r3]
 800c9e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	f023 0301 	bic.w	r3, r3, #1
 800c9ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	3308      	adds	r3, #8
 800c9f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9f6:	61fa      	str	r2, [r7, #28]
 800c9f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9fa:	69b9      	ldr	r1, [r7, #24]
 800c9fc:	69fa      	ldr	r2, [r7, #28]
 800c9fe:	e841 2300 	strex	r3, r2, [r1]
 800ca02:	617b      	str	r3, [r7, #20]
   return(result);
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d1e5      	bne.n	800c9d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2220      	movs	r2, #32
 800ca0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2200      	movs	r2, #0
 800ca16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca1a:	2303      	movs	r3, #3
 800ca1c:	e012      	b.n	800ca44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2220      	movs	r2, #32
 800ca22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2220      	movs	r2, #32
 800ca2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2200      	movs	r2, #0
 800ca32:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2200      	movs	r2, #0
 800ca38:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ca42:	2300      	movs	r3, #0
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3758      	adds	r7, #88	; 0x58
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b084      	sub	sp, #16
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	60b9      	str	r1, [r7, #8]
 800ca56:	603b      	str	r3, [r7, #0]
 800ca58:	4613      	mov	r3, r2
 800ca5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca5c:	e049      	b.n	800caf2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca5e:	69bb      	ldr	r3, [r7, #24]
 800ca60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca64:	d045      	beq.n	800caf2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca66:	f7f7 fa19 	bl	8003e9c <HAL_GetTick>
 800ca6a:	4602      	mov	r2, r0
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	1ad3      	subs	r3, r2, r3
 800ca70:	69ba      	ldr	r2, [r7, #24]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d302      	bcc.n	800ca7c <UART_WaitOnFlagUntilTimeout+0x30>
 800ca76:	69bb      	ldr	r3, [r7, #24]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d101      	bne.n	800ca80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ca7c:	2303      	movs	r3, #3
 800ca7e:	e048      	b.n	800cb12 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f003 0304 	and.w	r3, r3, #4
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d031      	beq.n	800caf2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	69db      	ldr	r3, [r3, #28]
 800ca94:	f003 0308 	and.w	r3, r3, #8
 800ca98:	2b08      	cmp	r3, #8
 800ca9a:	d110      	bne.n	800cabe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	2208      	movs	r2, #8
 800caa2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800caa4:	68f8      	ldr	r0, [r7, #12]
 800caa6:	f000 f839 	bl	800cb1c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2208      	movs	r2, #8
 800caae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2200      	movs	r2, #0
 800cab6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800caba:	2301      	movs	r3, #1
 800cabc:	e029      	b.n	800cb12 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	69db      	ldr	r3, [r3, #28]
 800cac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cacc:	d111      	bne.n	800caf2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cad6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cad8:	68f8      	ldr	r0, [r7, #12]
 800cada:	f000 f81f 	bl	800cb1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	2220      	movs	r2, #32
 800cae2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	2200      	movs	r2, #0
 800caea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800caee:	2303      	movs	r3, #3
 800caf0:	e00f      	b.n	800cb12 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	69da      	ldr	r2, [r3, #28]
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	4013      	ands	r3, r2
 800cafc:	68ba      	ldr	r2, [r7, #8]
 800cafe:	429a      	cmp	r2, r3
 800cb00:	bf0c      	ite	eq
 800cb02:	2301      	moveq	r3, #1
 800cb04:	2300      	movne	r3, #0
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	461a      	mov	r2, r3
 800cb0a:	79fb      	ldrb	r3, [r7, #7]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d0a6      	beq.n	800ca5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cb10:	2300      	movs	r3, #0
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3710      	adds	r7, #16
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
	...

0800cb1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b095      	sub	sp, #84	; 0x54
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb2c:	e853 3f00 	ldrex	r3, [r3]
 800cb30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cb38:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	461a      	mov	r2, r3
 800cb40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb42:	643b      	str	r3, [r7, #64]	; 0x40
 800cb44:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cb48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cb4a:	e841 2300 	strex	r3, r2, [r1]
 800cb4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d1e6      	bne.n	800cb24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	3308      	adds	r3, #8
 800cb5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb5e:	6a3b      	ldr	r3, [r7, #32]
 800cb60:	e853 3f00 	ldrex	r3, [r3]
 800cb64:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb66:	69fa      	ldr	r2, [r7, #28]
 800cb68:	4b1e      	ldr	r3, [pc, #120]	; (800cbe4 <UART_EndRxTransfer+0xc8>)
 800cb6a:	4013      	ands	r3, r2
 800cb6c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	3308      	adds	r3, #8
 800cb74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb76:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cb78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb7e:	e841 2300 	strex	r3, r2, [r1]
 800cb82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d1e5      	bne.n	800cb56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb8e:	2b01      	cmp	r3, #1
 800cb90:	d118      	bne.n	800cbc4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	e853 3f00 	ldrex	r3, [r3]
 800cb9e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	f023 0310 	bic.w	r3, r3, #16
 800cba6:	647b      	str	r3, [r7, #68]	; 0x44
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	461a      	mov	r2, r3
 800cbae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbb0:	61bb      	str	r3, [r7, #24]
 800cbb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbb4:	6979      	ldr	r1, [r7, #20]
 800cbb6:	69ba      	ldr	r2, [r7, #24]
 800cbb8:	e841 2300 	strex	r3, r2, [r1]
 800cbbc:	613b      	str	r3, [r7, #16]
   return(result);
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d1e6      	bne.n	800cb92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2220      	movs	r2, #32
 800cbc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800cbd8:	bf00      	nop
 800cbda:	3754      	adds	r7, #84	; 0x54
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe2:	4770      	bx	lr
 800cbe4:	effffffe 	.word	0xeffffffe

0800cbe8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbf4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2200      	movs	r2, #0
 800cc02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cc06:	68f8      	ldr	r0, [r7, #12]
 800cc08:	f7ff f856 	bl	800bcb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc0c:	bf00      	nop
 800cc0e:	3710      	adds	r7, #16
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b088      	sub	sp, #32
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	e853 3f00 	ldrex	r3, [r3]
 800cc28:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc30:	61fb      	str	r3, [r7, #28]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	461a      	mov	r2, r3
 800cc38:	69fb      	ldr	r3, [r7, #28]
 800cc3a:	61bb      	str	r3, [r7, #24]
 800cc3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc3e:	6979      	ldr	r1, [r7, #20]
 800cc40:	69ba      	ldr	r2, [r7, #24]
 800cc42:	e841 2300 	strex	r3, r2, [r1]
 800cc46:	613b      	str	r3, [r7, #16]
   return(result);
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d1e6      	bne.n	800cc1c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2220      	movs	r2, #32
 800cc52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f7ff f821 	bl	800bca4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc62:	bf00      	nop
 800cc64:	3720      	adds	r7, #32
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}

0800cc6a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cc6a:	b480      	push	{r7}
 800cc6c:	b083      	sub	sp, #12
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cc72:	bf00      	nop
 800cc74:	370c      	adds	r7, #12
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr

0800cc7e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cc7e:	b480      	push	{r7}
 800cc80:	b083      	sub	sp, #12
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cc86:	bf00      	nop
 800cc88:	370c      	adds	r7, #12
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc90:	4770      	bx	lr

0800cc92 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cc92:	b480      	push	{r7}
 800cc94:	b083      	sub	sp, #12
 800cc96:	af00      	add	r7, sp, #0
 800cc98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cc9a:	bf00      	nop
 800cc9c:	370c      	adds	r7, #12
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca4:	4770      	bx	lr
	...

0800cca8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d121      	bne.n	800ccfe <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681a      	ldr	r2, [r3, #0]
 800ccbe:	4b27      	ldr	r3, [pc, #156]	; (800cd5c <FMC_SDRAM_Init+0xb4>)
 800ccc0:	4013      	ands	r3, r2
 800ccc2:	683a      	ldr	r2, [r7, #0]
 800ccc4:	6851      	ldr	r1, [r2, #4]
 800ccc6:	683a      	ldr	r2, [r7, #0]
 800ccc8:	6892      	ldr	r2, [r2, #8]
 800ccca:	4311      	orrs	r1, r2
 800cccc:	683a      	ldr	r2, [r7, #0]
 800ccce:	68d2      	ldr	r2, [r2, #12]
 800ccd0:	4311      	orrs	r1, r2
 800ccd2:	683a      	ldr	r2, [r7, #0]
 800ccd4:	6912      	ldr	r2, [r2, #16]
 800ccd6:	4311      	orrs	r1, r2
 800ccd8:	683a      	ldr	r2, [r7, #0]
 800ccda:	6952      	ldr	r2, [r2, #20]
 800ccdc:	4311      	orrs	r1, r2
 800ccde:	683a      	ldr	r2, [r7, #0]
 800cce0:	6992      	ldr	r2, [r2, #24]
 800cce2:	4311      	orrs	r1, r2
 800cce4:	683a      	ldr	r2, [r7, #0]
 800cce6:	69d2      	ldr	r2, [r2, #28]
 800cce8:	4311      	orrs	r1, r2
 800ccea:	683a      	ldr	r2, [r7, #0]
 800ccec:	6a12      	ldr	r2, [r2, #32]
 800ccee:	4311      	orrs	r1, r2
 800ccf0:	683a      	ldr	r2, [r7, #0]
 800ccf2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ccf4:	430a      	orrs	r2, r1
 800ccf6:	431a      	orrs	r2, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	601a      	str	r2, [r3, #0]
 800ccfc:	e026      	b.n	800cd4c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	69d9      	ldr	r1, [r3, #28]
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	6a1b      	ldr	r3, [r3, #32]
 800cd0e:	4319      	orrs	r1, r3
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd14:	430b      	orrs	r3, r1
 800cd16:	431a      	orrs	r2, r3
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	685a      	ldr	r2, [r3, #4]
 800cd20:	4b0e      	ldr	r3, [pc, #56]	; (800cd5c <FMC_SDRAM_Init+0xb4>)
 800cd22:	4013      	ands	r3, r2
 800cd24:	683a      	ldr	r2, [r7, #0]
 800cd26:	6851      	ldr	r1, [r2, #4]
 800cd28:	683a      	ldr	r2, [r7, #0]
 800cd2a:	6892      	ldr	r2, [r2, #8]
 800cd2c:	4311      	orrs	r1, r2
 800cd2e:	683a      	ldr	r2, [r7, #0]
 800cd30:	68d2      	ldr	r2, [r2, #12]
 800cd32:	4311      	orrs	r1, r2
 800cd34:	683a      	ldr	r2, [r7, #0]
 800cd36:	6912      	ldr	r2, [r2, #16]
 800cd38:	4311      	orrs	r1, r2
 800cd3a:	683a      	ldr	r2, [r7, #0]
 800cd3c:	6952      	ldr	r2, [r2, #20]
 800cd3e:	4311      	orrs	r1, r2
 800cd40:	683a      	ldr	r2, [r7, #0]
 800cd42:	6992      	ldr	r2, [r2, #24]
 800cd44:	430a      	orrs	r2, r1
 800cd46:	431a      	orrs	r2, r3
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800cd4c:	2300      	movs	r3, #0
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	370c      	adds	r7, #12
 800cd52:	46bd      	mov	sp, r7
 800cd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd58:	4770      	bx	lr
 800cd5a:	bf00      	nop
 800cd5c:	ffff8000 	.word	0xffff8000

0800cd60 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800cd60:	b480      	push	{r7}
 800cd62:	b085      	sub	sp, #20
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	60f8      	str	r0, [r7, #12]
 800cd68:	60b9      	str	r1, [r7, #8]
 800cd6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d128      	bne.n	800cdc4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	689b      	ldr	r3, [r3, #8]
 800cd76:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	1e59      	subs	r1, r3, #1
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	3b01      	subs	r3, #1
 800cd86:	011b      	lsls	r3, r3, #4
 800cd88:	4319      	orrs	r1, r3
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	689b      	ldr	r3, [r3, #8]
 800cd8e:	3b01      	subs	r3, #1
 800cd90:	021b      	lsls	r3, r3, #8
 800cd92:	4319      	orrs	r1, r3
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	68db      	ldr	r3, [r3, #12]
 800cd98:	3b01      	subs	r3, #1
 800cd9a:	031b      	lsls	r3, r3, #12
 800cd9c:	4319      	orrs	r1, r3
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	691b      	ldr	r3, [r3, #16]
 800cda2:	3b01      	subs	r3, #1
 800cda4:	041b      	lsls	r3, r3, #16
 800cda6:	4319      	orrs	r1, r3
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	695b      	ldr	r3, [r3, #20]
 800cdac:	3b01      	subs	r3, #1
 800cdae:	051b      	lsls	r3, r3, #20
 800cdb0:	4319      	orrs	r1, r3
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	699b      	ldr	r3, [r3, #24]
 800cdb6:	3b01      	subs	r3, #1
 800cdb8:	061b      	lsls	r3, r3, #24
 800cdba:	430b      	orrs	r3, r1
 800cdbc:	431a      	orrs	r2, r3
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	609a      	str	r2, [r3, #8]
 800cdc2:	e02d      	b.n	800ce20 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	689a      	ldr	r2, [r3, #8]
 800cdc8:	4b19      	ldr	r3, [pc, #100]	; (800ce30 <FMC_SDRAM_Timing_Init+0xd0>)
 800cdca:	4013      	ands	r3, r2
 800cdcc:	68ba      	ldr	r2, [r7, #8]
 800cdce:	68d2      	ldr	r2, [r2, #12]
 800cdd0:	3a01      	subs	r2, #1
 800cdd2:	0311      	lsls	r1, r2, #12
 800cdd4:	68ba      	ldr	r2, [r7, #8]
 800cdd6:	6952      	ldr	r2, [r2, #20]
 800cdd8:	3a01      	subs	r2, #1
 800cdda:	0512      	lsls	r2, r2, #20
 800cddc:	430a      	orrs	r2, r1
 800cdde:	431a      	orrs	r2, r3
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	68db      	ldr	r3, [r3, #12]
 800cde8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	1e59      	subs	r1, r3, #1
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	3b01      	subs	r3, #1
 800cdf8:	011b      	lsls	r3, r3, #4
 800cdfa:	4319      	orrs	r1, r3
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	689b      	ldr	r3, [r3, #8]
 800ce00:	3b01      	subs	r3, #1
 800ce02:	021b      	lsls	r3, r3, #8
 800ce04:	4319      	orrs	r1, r3
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	691b      	ldr	r3, [r3, #16]
 800ce0a:	3b01      	subs	r3, #1
 800ce0c:	041b      	lsls	r3, r3, #16
 800ce0e:	4319      	orrs	r1, r3
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	699b      	ldr	r3, [r3, #24]
 800ce14:	3b01      	subs	r3, #1
 800ce16:	061b      	lsls	r3, r3, #24
 800ce18:	430b      	orrs	r3, r1
 800ce1a:	431a      	orrs	r2, r3
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800ce20:	2300      	movs	r3, #0
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3714      	adds	r7, #20
 800ce26:	46bd      	mov	sp, r7
 800ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2c:	4770      	bx	lr
 800ce2e:	bf00      	nop
 800ce30:	ff0f0fff 	.word	0xff0f0fff

0800ce34 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b085      	sub	sp, #20
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	60f8      	str	r0, [r7, #12]
 800ce3c:	60b9      	str	r1, [r7, #8]
 800ce3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	691a      	ldr	r2, [r3, #16]
 800ce44:	4b0c      	ldr	r3, [pc, #48]	; (800ce78 <FMC_SDRAM_SendCommand+0x44>)
 800ce46:	4013      	ands	r3, r2
 800ce48:	68ba      	ldr	r2, [r7, #8]
 800ce4a:	6811      	ldr	r1, [r2, #0]
 800ce4c:	68ba      	ldr	r2, [r7, #8]
 800ce4e:	6852      	ldr	r2, [r2, #4]
 800ce50:	4311      	orrs	r1, r2
 800ce52:	68ba      	ldr	r2, [r7, #8]
 800ce54:	6892      	ldr	r2, [r2, #8]
 800ce56:	3a01      	subs	r2, #1
 800ce58:	0152      	lsls	r2, r2, #5
 800ce5a:	4311      	orrs	r1, r2
 800ce5c:	68ba      	ldr	r2, [r7, #8]
 800ce5e:	68d2      	ldr	r2, [r2, #12]
 800ce60:	0252      	lsls	r2, r2, #9
 800ce62:	430a      	orrs	r2, r1
 800ce64:	431a      	orrs	r2, r3
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800ce6a:	2300      	movs	r3, #0
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3714      	adds	r7, #20
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr
 800ce78:	ffc00000 	.word	0xffc00000

0800ce7c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	695a      	ldr	r2, [r3, #20]
 800ce8a:	4b07      	ldr	r3, [pc, #28]	; (800cea8 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800ce8c:	4013      	ands	r3, r2
 800ce8e:	683a      	ldr	r2, [r7, #0]
 800ce90:	0052      	lsls	r2, r2, #1
 800ce92:	431a      	orrs	r2, r3
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800ce98:	2300      	movs	r3, #0
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	370c      	adds	r7, #12
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea4:	4770      	bx	lr
 800cea6:	bf00      	nop
 800cea8:	ffffc001 	.word	0xffffc001

0800ceac <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ceac:	b480      	push	{r7}
 800ceae:	b085      	sub	sp, #20
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	685b      	ldr	r3, [r3, #4]
 800ceba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	68fa      	ldr	r2, [r7, #12]
 800cec0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	689a      	ldr	r2, [r3, #8]
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	689b      	ldr	r3, [r3, #8]
 800cece:	683a      	ldr	r2, [r7, #0]
 800ced0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	683a      	ldr	r2, [r7, #0]
 800ced6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	687a      	ldr	r2, [r7, #4]
 800cedc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	1c5a      	adds	r2, r3, #1
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	601a      	str	r2, [r3, #0]
}
 800cee8:	bf00      	nop
 800ceea:	3714      	adds	r7, #20
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr

0800cef4 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cef4:	b480      	push	{r7}
 800cef6:	b085      	sub	sp, #20
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	691b      	ldr	r3, [r3, #16]
 800cf00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	687a      	ldr	r2, [r7, #4]
 800cf08:	6892      	ldr	r2, [r2, #8]
 800cf0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	689b      	ldr	r3, [r3, #8]
 800cf10:	687a      	ldr	r2, [r7, #4]
 800cf12:	6852      	ldr	r2, [r2, #4]
 800cf14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	685b      	ldr	r3, [r3, #4]
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d103      	bne.n	800cf28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	689a      	ldr	r2, [r3, #8]
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	1e5a      	subs	r2, r3, #1
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	681b      	ldr	r3, [r3, #0]
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3714      	adds	r7, #20
 800cf40:	46bd      	mov	sp, r7
 800cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf46:	4770      	bx	lr

0800cf48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b086      	sub	sp, #24
 800cf4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf52:	4b4f      	ldr	r3, [pc, #316]	; (800d090 <xTaskIncrementTick+0x148>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	f040 808f 	bne.w	800d07a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cf5c:	4b4d      	ldr	r3, [pc, #308]	; (800d094 <xTaskIncrementTick+0x14c>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	3301      	adds	r3, #1
 800cf62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cf64:	4a4b      	ldr	r2, [pc, #300]	; (800d094 <xTaskIncrementTick+0x14c>)
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d120      	bne.n	800cfb2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cf70:	4b49      	ldr	r3, [pc, #292]	; (800d098 <xTaskIncrementTick+0x150>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d00a      	beq.n	800cf90 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cf7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7e:	f383 8811 	msr	BASEPRI, r3
 800cf82:	f3bf 8f6f 	isb	sy
 800cf86:	f3bf 8f4f 	dsb	sy
 800cf8a:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cf8c:	bf00      	nop
 800cf8e:	e7fe      	b.n	800cf8e <xTaskIncrementTick+0x46>
 800cf90:	4b41      	ldr	r3, [pc, #260]	; (800d098 <xTaskIncrementTick+0x150>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	60fb      	str	r3, [r7, #12]
 800cf96:	4b41      	ldr	r3, [pc, #260]	; (800d09c <xTaskIncrementTick+0x154>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	4a3f      	ldr	r2, [pc, #252]	; (800d098 <xTaskIncrementTick+0x150>)
 800cf9c:	6013      	str	r3, [r2, #0]
 800cf9e:	4a3f      	ldr	r2, [pc, #252]	; (800d09c <xTaskIncrementTick+0x154>)
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	6013      	str	r3, [r2, #0]
 800cfa4:	4b3e      	ldr	r3, [pc, #248]	; (800d0a0 <xTaskIncrementTick+0x158>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	4a3d      	ldr	r2, [pc, #244]	; (800d0a0 <xTaskIncrementTick+0x158>)
 800cfac:	6013      	str	r3, [r2, #0]
 800cfae:	f000 f8e3 	bl	800d178 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cfb2:	4b3c      	ldr	r3, [pc, #240]	; (800d0a4 <xTaskIncrementTick+0x15c>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	693a      	ldr	r2, [r7, #16]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d349      	bcc.n	800d050 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cfbc:	4b36      	ldr	r3, [pc, #216]	; (800d098 <xTaskIncrementTick+0x150>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d104      	bne.n	800cfd0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfc6:	4b37      	ldr	r3, [pc, #220]	; (800d0a4 <xTaskIncrementTick+0x15c>)
 800cfc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfcc:	601a      	str	r2, [r3, #0]
					break;
 800cfce:	e03f      	b.n	800d050 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfd0:	4b31      	ldr	r3, [pc, #196]	; (800d098 <xTaskIncrementTick+0x150>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	68db      	ldr	r3, [r3, #12]
 800cfd6:	68db      	ldr	r3, [r3, #12]
 800cfd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	685b      	ldr	r3, [r3, #4]
 800cfde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cfe0:	693a      	ldr	r2, [r7, #16]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d203      	bcs.n	800cff0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cfe8:	4a2e      	ldr	r2, [pc, #184]	; (800d0a4 <xTaskIncrementTick+0x15c>)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cfee:	e02f      	b.n	800d050 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	3304      	adds	r3, #4
 800cff4:	4618      	mov	r0, r3
 800cff6:	f7ff ff7d 	bl	800cef4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d004      	beq.n	800d00c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	3318      	adds	r3, #24
 800d006:	4618      	mov	r0, r3
 800d008:	f7ff ff74 	bl	800cef4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d010:	4b25      	ldr	r3, [pc, #148]	; (800d0a8 <xTaskIncrementTick+0x160>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	429a      	cmp	r2, r3
 800d016:	d903      	bls.n	800d020 <xTaskIncrementTick+0xd8>
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d01c:	4a22      	ldr	r2, [pc, #136]	; (800d0a8 <xTaskIncrementTick+0x160>)
 800d01e:	6013      	str	r3, [r2, #0]
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d024:	4613      	mov	r3, r2
 800d026:	009b      	lsls	r3, r3, #2
 800d028:	4413      	add	r3, r2
 800d02a:	009b      	lsls	r3, r3, #2
 800d02c:	4a1f      	ldr	r2, [pc, #124]	; (800d0ac <xTaskIncrementTick+0x164>)
 800d02e:	441a      	add	r2, r3
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	3304      	adds	r3, #4
 800d034:	4619      	mov	r1, r3
 800d036:	4610      	mov	r0, r2
 800d038:	f7ff ff38 	bl	800ceac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d040:	4b1b      	ldr	r3, [pc, #108]	; (800d0b0 <xTaskIncrementTick+0x168>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d046:	429a      	cmp	r2, r3
 800d048:	d3b8      	bcc.n	800cfbc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d04a:	2301      	movs	r3, #1
 800d04c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d04e:	e7b5      	b.n	800cfbc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d050:	4b17      	ldr	r3, [pc, #92]	; (800d0b0 <xTaskIncrementTick+0x168>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d056:	4915      	ldr	r1, [pc, #84]	; (800d0ac <xTaskIncrementTick+0x164>)
 800d058:	4613      	mov	r3, r2
 800d05a:	009b      	lsls	r3, r3, #2
 800d05c:	4413      	add	r3, r2
 800d05e:	009b      	lsls	r3, r3, #2
 800d060:	440b      	add	r3, r1
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	2b01      	cmp	r3, #1
 800d066:	d901      	bls.n	800d06c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d068:	2301      	movs	r3, #1
 800d06a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d06c:	4b11      	ldr	r3, [pc, #68]	; (800d0b4 <xTaskIncrementTick+0x16c>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d007      	beq.n	800d084 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d074:	2301      	movs	r3, #1
 800d076:	617b      	str	r3, [r7, #20]
 800d078:	e004      	b.n	800d084 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d07a:	4b0f      	ldr	r3, [pc, #60]	; (800d0b8 <xTaskIncrementTick+0x170>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	3301      	adds	r3, #1
 800d080:	4a0d      	ldr	r2, [pc, #52]	; (800d0b8 <xTaskIncrementTick+0x170>)
 800d082:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d084:	697b      	ldr	r3, [r7, #20]
}
 800d086:	4618      	mov	r0, r3
 800d088:	3718      	adds	r7, #24
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
 800d08e:	bf00      	nop
 800d090:	24021d2c 	.word	0x24021d2c
 800d094:	24021d10 	.word	0x24021d10
 800d098:	24021d08 	.word	0x24021d08
 800d09c:	24021d0c 	.word	0x24021d0c
 800d0a0:	24021d24 	.word	0x24021d24
 800d0a4:	24021d28 	.word	0x24021d28
 800d0a8:	24021d14 	.word	0x24021d14
 800d0ac:	240218a8 	.word	0x240218a8
 800d0b0:	240218a4 	.word	0x240218a4
 800d0b4:	24021d20 	.word	0x24021d20
 800d0b8:	24021d1c 	.word	0x24021d1c

0800d0bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b085      	sub	sp, #20
 800d0c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d0c2:	4b28      	ldr	r3, [pc, #160]	; (800d164 <vTaskSwitchContext+0xa8>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d003      	beq.n	800d0d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d0ca:	4b27      	ldr	r3, [pc, #156]	; (800d168 <vTaskSwitchContext+0xac>)
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d0d0:	e041      	b.n	800d156 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d0d2:	4b25      	ldr	r3, [pc, #148]	; (800d168 <vTaskSwitchContext+0xac>)
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0d8:	4b24      	ldr	r3, [pc, #144]	; (800d16c <vTaskSwitchContext+0xb0>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	60fb      	str	r3, [r7, #12]
 800d0de:	e010      	b.n	800d102 <vTaskSwitchContext+0x46>
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d10a      	bne.n	800d0fc <vTaskSwitchContext+0x40>
	__asm volatile
 800d0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ea:	f383 8811 	msr	BASEPRI, r3
 800d0ee:	f3bf 8f6f 	isb	sy
 800d0f2:	f3bf 8f4f 	dsb	sy
 800d0f6:	607b      	str	r3, [r7, #4]
}
 800d0f8:	bf00      	nop
 800d0fa:	e7fe      	b.n	800d0fa <vTaskSwitchContext+0x3e>
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	3b01      	subs	r3, #1
 800d100:	60fb      	str	r3, [r7, #12]
 800d102:	491b      	ldr	r1, [pc, #108]	; (800d170 <vTaskSwitchContext+0xb4>)
 800d104:	68fa      	ldr	r2, [r7, #12]
 800d106:	4613      	mov	r3, r2
 800d108:	009b      	lsls	r3, r3, #2
 800d10a:	4413      	add	r3, r2
 800d10c:	009b      	lsls	r3, r3, #2
 800d10e:	440b      	add	r3, r1
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d0e4      	beq.n	800d0e0 <vTaskSwitchContext+0x24>
 800d116:	68fa      	ldr	r2, [r7, #12]
 800d118:	4613      	mov	r3, r2
 800d11a:	009b      	lsls	r3, r3, #2
 800d11c:	4413      	add	r3, r2
 800d11e:	009b      	lsls	r3, r3, #2
 800d120:	4a13      	ldr	r2, [pc, #76]	; (800d170 <vTaskSwitchContext+0xb4>)
 800d122:	4413      	add	r3, r2
 800d124:	60bb      	str	r3, [r7, #8]
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	685b      	ldr	r3, [r3, #4]
 800d12a:	685a      	ldr	r2, [r3, #4]
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	605a      	str	r2, [r3, #4]
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	685a      	ldr	r2, [r3, #4]
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	3308      	adds	r3, #8
 800d138:	429a      	cmp	r2, r3
 800d13a:	d104      	bne.n	800d146 <vTaskSwitchContext+0x8a>
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	685a      	ldr	r2, [r3, #4]
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	605a      	str	r2, [r3, #4]
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	685b      	ldr	r3, [r3, #4]
 800d14a:	68db      	ldr	r3, [r3, #12]
 800d14c:	4a09      	ldr	r2, [pc, #36]	; (800d174 <vTaskSwitchContext+0xb8>)
 800d14e:	6013      	str	r3, [r2, #0]
 800d150:	4a06      	ldr	r2, [pc, #24]	; (800d16c <vTaskSwitchContext+0xb0>)
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	6013      	str	r3, [r2, #0]
}
 800d156:	bf00      	nop
 800d158:	3714      	adds	r7, #20
 800d15a:	46bd      	mov	sp, r7
 800d15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d160:	4770      	bx	lr
 800d162:	bf00      	nop
 800d164:	24021d2c 	.word	0x24021d2c
 800d168:	24021d20 	.word	0x24021d20
 800d16c:	24021d14 	.word	0x24021d14
 800d170:	240218a8 	.word	0x240218a8
 800d174:	240218a4 	.word	0x240218a4

0800d178 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d178:	b480      	push	{r7}
 800d17a:	b083      	sub	sp, #12
 800d17c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d17e:	4b0c      	ldr	r3, [pc, #48]	; (800d1b0 <prvResetNextTaskUnblockTime+0x38>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d104      	bne.n	800d192 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d188:	4b0a      	ldr	r3, [pc, #40]	; (800d1b4 <prvResetNextTaskUnblockTime+0x3c>)
 800d18a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d18e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d190:	e008      	b.n	800d1a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d192:	4b07      	ldr	r3, [pc, #28]	; (800d1b0 <prvResetNextTaskUnblockTime+0x38>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	68db      	ldr	r3, [r3, #12]
 800d198:	68db      	ldr	r3, [r3, #12]
 800d19a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	685b      	ldr	r3, [r3, #4]
 800d1a0:	4a04      	ldr	r2, [pc, #16]	; (800d1b4 <prvResetNextTaskUnblockTime+0x3c>)
 800d1a2:	6013      	str	r3, [r2, #0]
}
 800d1a4:	bf00      	nop
 800d1a6:	370c      	adds	r7, #12
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ae:	4770      	bx	lr
 800d1b0:	24021d08 	.word	0x24021d08
 800d1b4:	24021d28 	.word	0x24021d28

0800d1b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b083      	sub	sp, #12
 800d1bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d1be:	4b0b      	ldr	r3, [pc, #44]	; (800d1ec <xTaskGetSchedulerState+0x34>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d102      	bne.n	800d1cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	607b      	str	r3, [r7, #4]
 800d1ca:	e008      	b.n	800d1de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1cc:	4b08      	ldr	r3, [pc, #32]	; (800d1f0 <xTaskGetSchedulerState+0x38>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d102      	bne.n	800d1da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d1d4:	2302      	movs	r3, #2
 800d1d6:	607b      	str	r3, [r7, #4]
 800d1d8:	e001      	b.n	800d1de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d1de:	687b      	ldr	r3, [r7, #4]
	}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	370c      	adds	r7, #12
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ea:	4770      	bx	lr
 800d1ec:	24021d18 	.word	0x24021d18
 800d1f0:	24021d2c 	.word	0x24021d2c
	...

0800d200 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d200:	4b07      	ldr	r3, [pc, #28]	; (800d220 <pxCurrentTCBConst2>)
 800d202:	6819      	ldr	r1, [r3, #0]
 800d204:	6808      	ldr	r0, [r1, #0]
 800d206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d20a:	f380 8809 	msr	PSP, r0
 800d20e:	f3bf 8f6f 	isb	sy
 800d212:	f04f 0000 	mov.w	r0, #0
 800d216:	f380 8811 	msr	BASEPRI, r0
 800d21a:	4770      	bx	lr
 800d21c:	f3af 8000 	nop.w

0800d220 <pxCurrentTCBConst2>:
 800d220:	240218a4 	.word	0x240218a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d224:	bf00      	nop
 800d226:	bf00      	nop
	...

0800d230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d230:	f3ef 8009 	mrs	r0, PSP
 800d234:	f3bf 8f6f 	isb	sy
 800d238:	4b15      	ldr	r3, [pc, #84]	; (800d290 <pxCurrentTCBConst>)
 800d23a:	681a      	ldr	r2, [r3, #0]
 800d23c:	f01e 0f10 	tst.w	lr, #16
 800d240:	bf08      	it	eq
 800d242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d24a:	6010      	str	r0, [r2, #0]
 800d24c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d250:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d254:	f380 8811 	msr	BASEPRI, r0
 800d258:	f3bf 8f4f 	dsb	sy
 800d25c:	f3bf 8f6f 	isb	sy
 800d260:	f7ff ff2c 	bl	800d0bc <vTaskSwitchContext>
 800d264:	f04f 0000 	mov.w	r0, #0
 800d268:	f380 8811 	msr	BASEPRI, r0
 800d26c:	bc09      	pop	{r0, r3}
 800d26e:	6819      	ldr	r1, [r3, #0]
 800d270:	6808      	ldr	r0, [r1, #0]
 800d272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d276:	f01e 0f10 	tst.w	lr, #16
 800d27a:	bf08      	it	eq
 800d27c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d280:	f380 8809 	msr	PSP, r0
 800d284:	f3bf 8f6f 	isb	sy
 800d288:	4770      	bx	lr
 800d28a:	bf00      	nop
 800d28c:	f3af 8000 	nop.w

0800d290 <pxCurrentTCBConst>:
 800d290:	240218a4 	.word	0x240218a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d294:	bf00      	nop
 800d296:	bf00      	nop

0800d298 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b082      	sub	sp, #8
 800d29c:	af00      	add	r7, sp, #0
	__asm volatile
 800d29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a2:	f383 8811 	msr	BASEPRI, r3
 800d2a6:	f3bf 8f6f 	isb	sy
 800d2aa:	f3bf 8f4f 	dsb	sy
 800d2ae:	607b      	str	r3, [r7, #4]
}
 800d2b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d2b2:	f7ff fe49 	bl	800cf48 <xTaskIncrementTick>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d003      	beq.n	800d2c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d2bc:	4b06      	ldr	r3, [pc, #24]	; (800d2d8 <xPortSysTickHandler+0x40>)
 800d2be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2c2:	601a      	str	r2, [r3, #0]
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d2ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d2d0:	bf00      	nop
 800d2d2:	3708      	adds	r7, #8
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}
 800d2d8:	e000ed04 	.word	0xe000ed04

0800d2dc <__errno>:
 800d2dc:	4b01      	ldr	r3, [pc, #4]	; (800d2e4 <__errno+0x8>)
 800d2de:	6818      	ldr	r0, [r3, #0]
 800d2e0:	4770      	bx	lr
 800d2e2:	bf00      	nop
 800d2e4:	24000038 	.word	0x24000038

0800d2e8 <__libc_init_array>:
 800d2e8:	b570      	push	{r4, r5, r6, lr}
 800d2ea:	4d0d      	ldr	r5, [pc, #52]	; (800d320 <__libc_init_array+0x38>)
 800d2ec:	4c0d      	ldr	r4, [pc, #52]	; (800d324 <__libc_init_array+0x3c>)
 800d2ee:	1b64      	subs	r4, r4, r5
 800d2f0:	10a4      	asrs	r4, r4, #2
 800d2f2:	2600      	movs	r6, #0
 800d2f4:	42a6      	cmp	r6, r4
 800d2f6:	d109      	bne.n	800d30c <__libc_init_array+0x24>
 800d2f8:	4d0b      	ldr	r5, [pc, #44]	; (800d328 <__libc_init_array+0x40>)
 800d2fa:	4c0c      	ldr	r4, [pc, #48]	; (800d32c <__libc_init_array+0x44>)
 800d2fc:	f001 fa68 	bl	800e7d0 <_init>
 800d300:	1b64      	subs	r4, r4, r5
 800d302:	10a4      	asrs	r4, r4, #2
 800d304:	2600      	movs	r6, #0
 800d306:	42a6      	cmp	r6, r4
 800d308:	d105      	bne.n	800d316 <__libc_init_array+0x2e>
 800d30a:	bd70      	pop	{r4, r5, r6, pc}
 800d30c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d310:	4798      	blx	r3
 800d312:	3601      	adds	r6, #1
 800d314:	e7ee      	b.n	800d2f4 <__libc_init_array+0xc>
 800d316:	f855 3b04 	ldr.w	r3, [r5], #4
 800d31a:	4798      	blx	r3
 800d31c:	3601      	adds	r6, #1
 800d31e:	e7f2      	b.n	800d306 <__libc_init_array+0x1e>
 800d320:	080104d4 	.word	0x080104d4
 800d324:	080104d4 	.word	0x080104d4
 800d328:	080104d4 	.word	0x080104d4
 800d32c:	080104d8 	.word	0x080104d8

0800d330 <memcpy>:
 800d330:	440a      	add	r2, r1
 800d332:	4291      	cmp	r1, r2
 800d334:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d338:	d100      	bne.n	800d33c <memcpy+0xc>
 800d33a:	4770      	bx	lr
 800d33c:	b510      	push	{r4, lr}
 800d33e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d342:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d346:	4291      	cmp	r1, r2
 800d348:	d1f9      	bne.n	800d33e <memcpy+0xe>
 800d34a:	bd10      	pop	{r4, pc}

0800d34c <memset>:
 800d34c:	4402      	add	r2, r0
 800d34e:	4603      	mov	r3, r0
 800d350:	4293      	cmp	r3, r2
 800d352:	d100      	bne.n	800d356 <memset+0xa>
 800d354:	4770      	bx	lr
 800d356:	f803 1b01 	strb.w	r1, [r3], #1
 800d35a:	e7f9      	b.n	800d350 <memset+0x4>

0800d35c <iprintf>:
 800d35c:	b40f      	push	{r0, r1, r2, r3}
 800d35e:	4b0a      	ldr	r3, [pc, #40]	; (800d388 <iprintf+0x2c>)
 800d360:	b513      	push	{r0, r1, r4, lr}
 800d362:	681c      	ldr	r4, [r3, #0]
 800d364:	b124      	cbz	r4, 800d370 <iprintf+0x14>
 800d366:	69a3      	ldr	r3, [r4, #24]
 800d368:	b913      	cbnz	r3, 800d370 <iprintf+0x14>
 800d36a:	4620      	mov	r0, r4
 800d36c:	f000 fa1e 	bl	800d7ac <__sinit>
 800d370:	ab05      	add	r3, sp, #20
 800d372:	9a04      	ldr	r2, [sp, #16]
 800d374:	68a1      	ldr	r1, [r4, #8]
 800d376:	9301      	str	r3, [sp, #4]
 800d378:	4620      	mov	r0, r4
 800d37a:	f000 fd8b 	bl	800de94 <_vfiprintf_r>
 800d37e:	b002      	add	sp, #8
 800d380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d384:	b004      	add	sp, #16
 800d386:	4770      	bx	lr
 800d388:	24000038 	.word	0x24000038

0800d38c <setvbuf>:
 800d38c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d390:	461d      	mov	r5, r3
 800d392:	4b5d      	ldr	r3, [pc, #372]	; (800d508 <setvbuf+0x17c>)
 800d394:	681f      	ldr	r7, [r3, #0]
 800d396:	4604      	mov	r4, r0
 800d398:	460e      	mov	r6, r1
 800d39a:	4690      	mov	r8, r2
 800d39c:	b127      	cbz	r7, 800d3a8 <setvbuf+0x1c>
 800d39e:	69bb      	ldr	r3, [r7, #24]
 800d3a0:	b913      	cbnz	r3, 800d3a8 <setvbuf+0x1c>
 800d3a2:	4638      	mov	r0, r7
 800d3a4:	f000 fa02 	bl	800d7ac <__sinit>
 800d3a8:	4b58      	ldr	r3, [pc, #352]	; (800d50c <setvbuf+0x180>)
 800d3aa:	429c      	cmp	r4, r3
 800d3ac:	d167      	bne.n	800d47e <setvbuf+0xf2>
 800d3ae:	687c      	ldr	r4, [r7, #4]
 800d3b0:	f1b8 0f02 	cmp.w	r8, #2
 800d3b4:	d006      	beq.n	800d3c4 <setvbuf+0x38>
 800d3b6:	f1b8 0f01 	cmp.w	r8, #1
 800d3ba:	f200 809f 	bhi.w	800d4fc <setvbuf+0x170>
 800d3be:	2d00      	cmp	r5, #0
 800d3c0:	f2c0 809c 	blt.w	800d4fc <setvbuf+0x170>
 800d3c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d3c6:	07db      	lsls	r3, r3, #31
 800d3c8:	d405      	bmi.n	800d3d6 <setvbuf+0x4a>
 800d3ca:	89a3      	ldrh	r3, [r4, #12]
 800d3cc:	0598      	lsls	r0, r3, #22
 800d3ce:	d402      	bmi.n	800d3d6 <setvbuf+0x4a>
 800d3d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3d2:	f000 fa89 	bl	800d8e8 <__retarget_lock_acquire_recursive>
 800d3d6:	4621      	mov	r1, r4
 800d3d8:	4638      	mov	r0, r7
 800d3da:	f000 f953 	bl	800d684 <_fflush_r>
 800d3de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3e0:	b141      	cbz	r1, 800d3f4 <setvbuf+0x68>
 800d3e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d3e6:	4299      	cmp	r1, r3
 800d3e8:	d002      	beq.n	800d3f0 <setvbuf+0x64>
 800d3ea:	4638      	mov	r0, r7
 800d3ec:	f000 faec 	bl	800d9c8 <_free_r>
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	6363      	str	r3, [r4, #52]	; 0x34
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	61a3      	str	r3, [r4, #24]
 800d3f8:	6063      	str	r3, [r4, #4]
 800d3fa:	89a3      	ldrh	r3, [r4, #12]
 800d3fc:	0619      	lsls	r1, r3, #24
 800d3fe:	d503      	bpl.n	800d408 <setvbuf+0x7c>
 800d400:	6921      	ldr	r1, [r4, #16]
 800d402:	4638      	mov	r0, r7
 800d404:	f000 fae0 	bl	800d9c8 <_free_r>
 800d408:	89a3      	ldrh	r3, [r4, #12]
 800d40a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800d40e:	f023 0303 	bic.w	r3, r3, #3
 800d412:	f1b8 0f02 	cmp.w	r8, #2
 800d416:	81a3      	strh	r3, [r4, #12]
 800d418:	d06c      	beq.n	800d4f4 <setvbuf+0x168>
 800d41a:	ab01      	add	r3, sp, #4
 800d41c:	466a      	mov	r2, sp
 800d41e:	4621      	mov	r1, r4
 800d420:	4638      	mov	r0, r7
 800d422:	f000 fa63 	bl	800d8ec <__swhatbuf_r>
 800d426:	89a3      	ldrh	r3, [r4, #12]
 800d428:	4318      	orrs	r0, r3
 800d42a:	81a0      	strh	r0, [r4, #12]
 800d42c:	2d00      	cmp	r5, #0
 800d42e:	d130      	bne.n	800d492 <setvbuf+0x106>
 800d430:	9d00      	ldr	r5, [sp, #0]
 800d432:	4628      	mov	r0, r5
 800d434:	f000 fac0 	bl	800d9b8 <malloc>
 800d438:	4606      	mov	r6, r0
 800d43a:	2800      	cmp	r0, #0
 800d43c:	d155      	bne.n	800d4ea <setvbuf+0x15e>
 800d43e:	f8dd 9000 	ldr.w	r9, [sp]
 800d442:	45a9      	cmp	r9, r5
 800d444:	d14a      	bne.n	800d4dc <setvbuf+0x150>
 800d446:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d44a:	2200      	movs	r2, #0
 800d44c:	60a2      	str	r2, [r4, #8]
 800d44e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800d452:	6022      	str	r2, [r4, #0]
 800d454:	6122      	str	r2, [r4, #16]
 800d456:	2201      	movs	r2, #1
 800d458:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d45c:	6162      	str	r2, [r4, #20]
 800d45e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d460:	f043 0302 	orr.w	r3, r3, #2
 800d464:	07d2      	lsls	r2, r2, #31
 800d466:	81a3      	strh	r3, [r4, #12]
 800d468:	d405      	bmi.n	800d476 <setvbuf+0xea>
 800d46a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800d46e:	d102      	bne.n	800d476 <setvbuf+0xea>
 800d470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d472:	f000 fa3a 	bl	800d8ea <__retarget_lock_release_recursive>
 800d476:	4628      	mov	r0, r5
 800d478:	b003      	add	sp, #12
 800d47a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d47e:	4b24      	ldr	r3, [pc, #144]	; (800d510 <setvbuf+0x184>)
 800d480:	429c      	cmp	r4, r3
 800d482:	d101      	bne.n	800d488 <setvbuf+0xfc>
 800d484:	68bc      	ldr	r4, [r7, #8]
 800d486:	e793      	b.n	800d3b0 <setvbuf+0x24>
 800d488:	4b22      	ldr	r3, [pc, #136]	; (800d514 <setvbuf+0x188>)
 800d48a:	429c      	cmp	r4, r3
 800d48c:	bf08      	it	eq
 800d48e:	68fc      	ldreq	r4, [r7, #12]
 800d490:	e78e      	b.n	800d3b0 <setvbuf+0x24>
 800d492:	2e00      	cmp	r6, #0
 800d494:	d0cd      	beq.n	800d432 <setvbuf+0xa6>
 800d496:	69bb      	ldr	r3, [r7, #24]
 800d498:	b913      	cbnz	r3, 800d4a0 <setvbuf+0x114>
 800d49a:	4638      	mov	r0, r7
 800d49c:	f000 f986 	bl	800d7ac <__sinit>
 800d4a0:	f1b8 0f01 	cmp.w	r8, #1
 800d4a4:	bf08      	it	eq
 800d4a6:	89a3      	ldrheq	r3, [r4, #12]
 800d4a8:	6026      	str	r6, [r4, #0]
 800d4aa:	bf04      	itt	eq
 800d4ac:	f043 0301 	orreq.w	r3, r3, #1
 800d4b0:	81a3      	strheq	r3, [r4, #12]
 800d4b2:	89a2      	ldrh	r2, [r4, #12]
 800d4b4:	f012 0308 	ands.w	r3, r2, #8
 800d4b8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800d4bc:	d01c      	beq.n	800d4f8 <setvbuf+0x16c>
 800d4be:	07d3      	lsls	r3, r2, #31
 800d4c0:	bf41      	itttt	mi
 800d4c2:	2300      	movmi	r3, #0
 800d4c4:	426d      	negmi	r5, r5
 800d4c6:	60a3      	strmi	r3, [r4, #8]
 800d4c8:	61a5      	strmi	r5, [r4, #24]
 800d4ca:	bf58      	it	pl
 800d4cc:	60a5      	strpl	r5, [r4, #8]
 800d4ce:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800d4d0:	f015 0501 	ands.w	r5, r5, #1
 800d4d4:	d115      	bne.n	800d502 <setvbuf+0x176>
 800d4d6:	f412 7f00 	tst.w	r2, #512	; 0x200
 800d4da:	e7c8      	b.n	800d46e <setvbuf+0xe2>
 800d4dc:	4648      	mov	r0, r9
 800d4de:	f000 fa6b 	bl	800d9b8 <malloc>
 800d4e2:	4606      	mov	r6, r0
 800d4e4:	2800      	cmp	r0, #0
 800d4e6:	d0ae      	beq.n	800d446 <setvbuf+0xba>
 800d4e8:	464d      	mov	r5, r9
 800d4ea:	89a3      	ldrh	r3, [r4, #12]
 800d4ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4f0:	81a3      	strh	r3, [r4, #12]
 800d4f2:	e7d0      	b.n	800d496 <setvbuf+0x10a>
 800d4f4:	2500      	movs	r5, #0
 800d4f6:	e7a8      	b.n	800d44a <setvbuf+0xbe>
 800d4f8:	60a3      	str	r3, [r4, #8]
 800d4fa:	e7e8      	b.n	800d4ce <setvbuf+0x142>
 800d4fc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d500:	e7b9      	b.n	800d476 <setvbuf+0xea>
 800d502:	2500      	movs	r5, #0
 800d504:	e7b7      	b.n	800d476 <setvbuf+0xea>
 800d506:	bf00      	nop
 800d508:	24000038 	.word	0x24000038
 800d50c:	08010458 	.word	0x08010458
 800d510:	08010478 	.word	0x08010478
 800d514:	08010438 	.word	0x08010438

0800d518 <siprintf>:
 800d518:	b40e      	push	{r1, r2, r3}
 800d51a:	b500      	push	{lr}
 800d51c:	b09c      	sub	sp, #112	; 0x70
 800d51e:	ab1d      	add	r3, sp, #116	; 0x74
 800d520:	9002      	str	r0, [sp, #8]
 800d522:	9006      	str	r0, [sp, #24]
 800d524:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d528:	4809      	ldr	r0, [pc, #36]	; (800d550 <siprintf+0x38>)
 800d52a:	9107      	str	r1, [sp, #28]
 800d52c:	9104      	str	r1, [sp, #16]
 800d52e:	4909      	ldr	r1, [pc, #36]	; (800d554 <siprintf+0x3c>)
 800d530:	f853 2b04 	ldr.w	r2, [r3], #4
 800d534:	9105      	str	r1, [sp, #20]
 800d536:	6800      	ldr	r0, [r0, #0]
 800d538:	9301      	str	r3, [sp, #4]
 800d53a:	a902      	add	r1, sp, #8
 800d53c:	f000 fb80 	bl	800dc40 <_svfiprintf_r>
 800d540:	9b02      	ldr	r3, [sp, #8]
 800d542:	2200      	movs	r2, #0
 800d544:	701a      	strb	r2, [r3, #0]
 800d546:	b01c      	add	sp, #112	; 0x70
 800d548:	f85d eb04 	ldr.w	lr, [sp], #4
 800d54c:	b003      	add	sp, #12
 800d54e:	4770      	bx	lr
 800d550:	24000038 	.word	0x24000038
 800d554:	ffff0208 	.word	0xffff0208

0800d558 <strcat>:
 800d558:	b510      	push	{r4, lr}
 800d55a:	4602      	mov	r2, r0
 800d55c:	7814      	ldrb	r4, [r2, #0]
 800d55e:	4613      	mov	r3, r2
 800d560:	3201      	adds	r2, #1
 800d562:	2c00      	cmp	r4, #0
 800d564:	d1fa      	bne.n	800d55c <strcat+0x4>
 800d566:	3b01      	subs	r3, #1
 800d568:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d56c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d570:	2a00      	cmp	r2, #0
 800d572:	d1f9      	bne.n	800d568 <strcat+0x10>
 800d574:	bd10      	pop	{r4, pc}
	...

0800d578 <__sflush_r>:
 800d578:	898a      	ldrh	r2, [r1, #12]
 800d57a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d57e:	4605      	mov	r5, r0
 800d580:	0710      	lsls	r0, r2, #28
 800d582:	460c      	mov	r4, r1
 800d584:	d458      	bmi.n	800d638 <__sflush_r+0xc0>
 800d586:	684b      	ldr	r3, [r1, #4]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	dc05      	bgt.n	800d598 <__sflush_r+0x20>
 800d58c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d58e:	2b00      	cmp	r3, #0
 800d590:	dc02      	bgt.n	800d598 <__sflush_r+0x20>
 800d592:	2000      	movs	r0, #0
 800d594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d598:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d59a:	2e00      	cmp	r6, #0
 800d59c:	d0f9      	beq.n	800d592 <__sflush_r+0x1a>
 800d59e:	2300      	movs	r3, #0
 800d5a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d5a4:	682f      	ldr	r7, [r5, #0]
 800d5a6:	602b      	str	r3, [r5, #0]
 800d5a8:	d032      	beq.n	800d610 <__sflush_r+0x98>
 800d5aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d5ac:	89a3      	ldrh	r3, [r4, #12]
 800d5ae:	075a      	lsls	r2, r3, #29
 800d5b0:	d505      	bpl.n	800d5be <__sflush_r+0x46>
 800d5b2:	6863      	ldr	r3, [r4, #4]
 800d5b4:	1ac0      	subs	r0, r0, r3
 800d5b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d5b8:	b10b      	cbz	r3, 800d5be <__sflush_r+0x46>
 800d5ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d5bc:	1ac0      	subs	r0, r0, r3
 800d5be:	2300      	movs	r3, #0
 800d5c0:	4602      	mov	r2, r0
 800d5c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5c4:	6a21      	ldr	r1, [r4, #32]
 800d5c6:	4628      	mov	r0, r5
 800d5c8:	47b0      	blx	r6
 800d5ca:	1c43      	adds	r3, r0, #1
 800d5cc:	89a3      	ldrh	r3, [r4, #12]
 800d5ce:	d106      	bne.n	800d5de <__sflush_r+0x66>
 800d5d0:	6829      	ldr	r1, [r5, #0]
 800d5d2:	291d      	cmp	r1, #29
 800d5d4:	d82c      	bhi.n	800d630 <__sflush_r+0xb8>
 800d5d6:	4a2a      	ldr	r2, [pc, #168]	; (800d680 <__sflush_r+0x108>)
 800d5d8:	40ca      	lsrs	r2, r1
 800d5da:	07d6      	lsls	r6, r2, #31
 800d5dc:	d528      	bpl.n	800d630 <__sflush_r+0xb8>
 800d5de:	2200      	movs	r2, #0
 800d5e0:	6062      	str	r2, [r4, #4]
 800d5e2:	04d9      	lsls	r1, r3, #19
 800d5e4:	6922      	ldr	r2, [r4, #16]
 800d5e6:	6022      	str	r2, [r4, #0]
 800d5e8:	d504      	bpl.n	800d5f4 <__sflush_r+0x7c>
 800d5ea:	1c42      	adds	r2, r0, #1
 800d5ec:	d101      	bne.n	800d5f2 <__sflush_r+0x7a>
 800d5ee:	682b      	ldr	r3, [r5, #0]
 800d5f0:	b903      	cbnz	r3, 800d5f4 <__sflush_r+0x7c>
 800d5f2:	6560      	str	r0, [r4, #84]	; 0x54
 800d5f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5f6:	602f      	str	r7, [r5, #0]
 800d5f8:	2900      	cmp	r1, #0
 800d5fa:	d0ca      	beq.n	800d592 <__sflush_r+0x1a>
 800d5fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d600:	4299      	cmp	r1, r3
 800d602:	d002      	beq.n	800d60a <__sflush_r+0x92>
 800d604:	4628      	mov	r0, r5
 800d606:	f000 f9df 	bl	800d9c8 <_free_r>
 800d60a:	2000      	movs	r0, #0
 800d60c:	6360      	str	r0, [r4, #52]	; 0x34
 800d60e:	e7c1      	b.n	800d594 <__sflush_r+0x1c>
 800d610:	6a21      	ldr	r1, [r4, #32]
 800d612:	2301      	movs	r3, #1
 800d614:	4628      	mov	r0, r5
 800d616:	47b0      	blx	r6
 800d618:	1c41      	adds	r1, r0, #1
 800d61a:	d1c7      	bne.n	800d5ac <__sflush_r+0x34>
 800d61c:	682b      	ldr	r3, [r5, #0]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d0c4      	beq.n	800d5ac <__sflush_r+0x34>
 800d622:	2b1d      	cmp	r3, #29
 800d624:	d001      	beq.n	800d62a <__sflush_r+0xb2>
 800d626:	2b16      	cmp	r3, #22
 800d628:	d101      	bne.n	800d62e <__sflush_r+0xb6>
 800d62a:	602f      	str	r7, [r5, #0]
 800d62c:	e7b1      	b.n	800d592 <__sflush_r+0x1a>
 800d62e:	89a3      	ldrh	r3, [r4, #12]
 800d630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d634:	81a3      	strh	r3, [r4, #12]
 800d636:	e7ad      	b.n	800d594 <__sflush_r+0x1c>
 800d638:	690f      	ldr	r7, [r1, #16]
 800d63a:	2f00      	cmp	r7, #0
 800d63c:	d0a9      	beq.n	800d592 <__sflush_r+0x1a>
 800d63e:	0793      	lsls	r3, r2, #30
 800d640:	680e      	ldr	r6, [r1, #0]
 800d642:	bf08      	it	eq
 800d644:	694b      	ldreq	r3, [r1, #20]
 800d646:	600f      	str	r7, [r1, #0]
 800d648:	bf18      	it	ne
 800d64a:	2300      	movne	r3, #0
 800d64c:	eba6 0807 	sub.w	r8, r6, r7
 800d650:	608b      	str	r3, [r1, #8]
 800d652:	f1b8 0f00 	cmp.w	r8, #0
 800d656:	dd9c      	ble.n	800d592 <__sflush_r+0x1a>
 800d658:	6a21      	ldr	r1, [r4, #32]
 800d65a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d65c:	4643      	mov	r3, r8
 800d65e:	463a      	mov	r2, r7
 800d660:	4628      	mov	r0, r5
 800d662:	47b0      	blx	r6
 800d664:	2800      	cmp	r0, #0
 800d666:	dc06      	bgt.n	800d676 <__sflush_r+0xfe>
 800d668:	89a3      	ldrh	r3, [r4, #12]
 800d66a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d66e:	81a3      	strh	r3, [r4, #12]
 800d670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d674:	e78e      	b.n	800d594 <__sflush_r+0x1c>
 800d676:	4407      	add	r7, r0
 800d678:	eba8 0800 	sub.w	r8, r8, r0
 800d67c:	e7e9      	b.n	800d652 <__sflush_r+0xda>
 800d67e:	bf00      	nop
 800d680:	20400001 	.word	0x20400001

0800d684 <_fflush_r>:
 800d684:	b538      	push	{r3, r4, r5, lr}
 800d686:	690b      	ldr	r3, [r1, #16]
 800d688:	4605      	mov	r5, r0
 800d68a:	460c      	mov	r4, r1
 800d68c:	b913      	cbnz	r3, 800d694 <_fflush_r+0x10>
 800d68e:	2500      	movs	r5, #0
 800d690:	4628      	mov	r0, r5
 800d692:	bd38      	pop	{r3, r4, r5, pc}
 800d694:	b118      	cbz	r0, 800d69e <_fflush_r+0x1a>
 800d696:	6983      	ldr	r3, [r0, #24]
 800d698:	b90b      	cbnz	r3, 800d69e <_fflush_r+0x1a>
 800d69a:	f000 f887 	bl	800d7ac <__sinit>
 800d69e:	4b14      	ldr	r3, [pc, #80]	; (800d6f0 <_fflush_r+0x6c>)
 800d6a0:	429c      	cmp	r4, r3
 800d6a2:	d11b      	bne.n	800d6dc <_fflush_r+0x58>
 800d6a4:	686c      	ldr	r4, [r5, #4]
 800d6a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d0ef      	beq.n	800d68e <_fflush_r+0xa>
 800d6ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d6b0:	07d0      	lsls	r0, r2, #31
 800d6b2:	d404      	bmi.n	800d6be <_fflush_r+0x3a>
 800d6b4:	0599      	lsls	r1, r3, #22
 800d6b6:	d402      	bmi.n	800d6be <_fflush_r+0x3a>
 800d6b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6ba:	f000 f915 	bl	800d8e8 <__retarget_lock_acquire_recursive>
 800d6be:	4628      	mov	r0, r5
 800d6c0:	4621      	mov	r1, r4
 800d6c2:	f7ff ff59 	bl	800d578 <__sflush_r>
 800d6c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d6c8:	07da      	lsls	r2, r3, #31
 800d6ca:	4605      	mov	r5, r0
 800d6cc:	d4e0      	bmi.n	800d690 <_fflush_r+0xc>
 800d6ce:	89a3      	ldrh	r3, [r4, #12]
 800d6d0:	059b      	lsls	r3, r3, #22
 800d6d2:	d4dd      	bmi.n	800d690 <_fflush_r+0xc>
 800d6d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6d6:	f000 f908 	bl	800d8ea <__retarget_lock_release_recursive>
 800d6da:	e7d9      	b.n	800d690 <_fflush_r+0xc>
 800d6dc:	4b05      	ldr	r3, [pc, #20]	; (800d6f4 <_fflush_r+0x70>)
 800d6de:	429c      	cmp	r4, r3
 800d6e0:	d101      	bne.n	800d6e6 <_fflush_r+0x62>
 800d6e2:	68ac      	ldr	r4, [r5, #8]
 800d6e4:	e7df      	b.n	800d6a6 <_fflush_r+0x22>
 800d6e6:	4b04      	ldr	r3, [pc, #16]	; (800d6f8 <_fflush_r+0x74>)
 800d6e8:	429c      	cmp	r4, r3
 800d6ea:	bf08      	it	eq
 800d6ec:	68ec      	ldreq	r4, [r5, #12]
 800d6ee:	e7da      	b.n	800d6a6 <_fflush_r+0x22>
 800d6f0:	08010458 	.word	0x08010458
 800d6f4:	08010478 	.word	0x08010478
 800d6f8:	08010438 	.word	0x08010438

0800d6fc <std>:
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	b510      	push	{r4, lr}
 800d700:	4604      	mov	r4, r0
 800d702:	e9c0 3300 	strd	r3, r3, [r0]
 800d706:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d70a:	6083      	str	r3, [r0, #8]
 800d70c:	8181      	strh	r1, [r0, #12]
 800d70e:	6643      	str	r3, [r0, #100]	; 0x64
 800d710:	81c2      	strh	r2, [r0, #14]
 800d712:	6183      	str	r3, [r0, #24]
 800d714:	4619      	mov	r1, r3
 800d716:	2208      	movs	r2, #8
 800d718:	305c      	adds	r0, #92	; 0x5c
 800d71a:	f7ff fe17 	bl	800d34c <memset>
 800d71e:	4b05      	ldr	r3, [pc, #20]	; (800d734 <std+0x38>)
 800d720:	6263      	str	r3, [r4, #36]	; 0x24
 800d722:	4b05      	ldr	r3, [pc, #20]	; (800d738 <std+0x3c>)
 800d724:	62a3      	str	r3, [r4, #40]	; 0x28
 800d726:	4b05      	ldr	r3, [pc, #20]	; (800d73c <std+0x40>)
 800d728:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d72a:	4b05      	ldr	r3, [pc, #20]	; (800d740 <std+0x44>)
 800d72c:	6224      	str	r4, [r4, #32]
 800d72e:	6323      	str	r3, [r4, #48]	; 0x30
 800d730:	bd10      	pop	{r4, pc}
 800d732:	bf00      	nop
 800d734:	0800e43d 	.word	0x0800e43d
 800d738:	0800e45f 	.word	0x0800e45f
 800d73c:	0800e497 	.word	0x0800e497
 800d740:	0800e4bb 	.word	0x0800e4bb

0800d744 <_cleanup_r>:
 800d744:	4901      	ldr	r1, [pc, #4]	; (800d74c <_cleanup_r+0x8>)
 800d746:	f000 b8af 	b.w	800d8a8 <_fwalk_reent>
 800d74a:	bf00      	nop
 800d74c:	0800d685 	.word	0x0800d685

0800d750 <__sfmoreglue>:
 800d750:	b570      	push	{r4, r5, r6, lr}
 800d752:	2268      	movs	r2, #104	; 0x68
 800d754:	1e4d      	subs	r5, r1, #1
 800d756:	4355      	muls	r5, r2
 800d758:	460e      	mov	r6, r1
 800d75a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d75e:	f000 f99f 	bl	800daa0 <_malloc_r>
 800d762:	4604      	mov	r4, r0
 800d764:	b140      	cbz	r0, 800d778 <__sfmoreglue+0x28>
 800d766:	2100      	movs	r1, #0
 800d768:	e9c0 1600 	strd	r1, r6, [r0]
 800d76c:	300c      	adds	r0, #12
 800d76e:	60a0      	str	r0, [r4, #8]
 800d770:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d774:	f7ff fdea 	bl	800d34c <memset>
 800d778:	4620      	mov	r0, r4
 800d77a:	bd70      	pop	{r4, r5, r6, pc}

0800d77c <__sfp_lock_acquire>:
 800d77c:	4801      	ldr	r0, [pc, #4]	; (800d784 <__sfp_lock_acquire+0x8>)
 800d77e:	f000 b8b3 	b.w	800d8e8 <__retarget_lock_acquire_recursive>
 800d782:	bf00      	nop
 800d784:	24021d31 	.word	0x24021d31

0800d788 <__sfp_lock_release>:
 800d788:	4801      	ldr	r0, [pc, #4]	; (800d790 <__sfp_lock_release+0x8>)
 800d78a:	f000 b8ae 	b.w	800d8ea <__retarget_lock_release_recursive>
 800d78e:	bf00      	nop
 800d790:	24021d31 	.word	0x24021d31

0800d794 <__sinit_lock_acquire>:
 800d794:	4801      	ldr	r0, [pc, #4]	; (800d79c <__sinit_lock_acquire+0x8>)
 800d796:	f000 b8a7 	b.w	800d8e8 <__retarget_lock_acquire_recursive>
 800d79a:	bf00      	nop
 800d79c:	24021d32 	.word	0x24021d32

0800d7a0 <__sinit_lock_release>:
 800d7a0:	4801      	ldr	r0, [pc, #4]	; (800d7a8 <__sinit_lock_release+0x8>)
 800d7a2:	f000 b8a2 	b.w	800d8ea <__retarget_lock_release_recursive>
 800d7a6:	bf00      	nop
 800d7a8:	24021d32 	.word	0x24021d32

0800d7ac <__sinit>:
 800d7ac:	b510      	push	{r4, lr}
 800d7ae:	4604      	mov	r4, r0
 800d7b0:	f7ff fff0 	bl	800d794 <__sinit_lock_acquire>
 800d7b4:	69a3      	ldr	r3, [r4, #24]
 800d7b6:	b11b      	cbz	r3, 800d7c0 <__sinit+0x14>
 800d7b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7bc:	f7ff bff0 	b.w	800d7a0 <__sinit_lock_release>
 800d7c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d7c4:	6523      	str	r3, [r4, #80]	; 0x50
 800d7c6:	4b13      	ldr	r3, [pc, #76]	; (800d814 <__sinit+0x68>)
 800d7c8:	4a13      	ldr	r2, [pc, #76]	; (800d818 <__sinit+0x6c>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	62a2      	str	r2, [r4, #40]	; 0x28
 800d7ce:	42a3      	cmp	r3, r4
 800d7d0:	bf04      	itt	eq
 800d7d2:	2301      	moveq	r3, #1
 800d7d4:	61a3      	streq	r3, [r4, #24]
 800d7d6:	4620      	mov	r0, r4
 800d7d8:	f000 f820 	bl	800d81c <__sfp>
 800d7dc:	6060      	str	r0, [r4, #4]
 800d7de:	4620      	mov	r0, r4
 800d7e0:	f000 f81c 	bl	800d81c <__sfp>
 800d7e4:	60a0      	str	r0, [r4, #8]
 800d7e6:	4620      	mov	r0, r4
 800d7e8:	f000 f818 	bl	800d81c <__sfp>
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	60e0      	str	r0, [r4, #12]
 800d7f0:	2104      	movs	r1, #4
 800d7f2:	6860      	ldr	r0, [r4, #4]
 800d7f4:	f7ff ff82 	bl	800d6fc <std>
 800d7f8:	68a0      	ldr	r0, [r4, #8]
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	2109      	movs	r1, #9
 800d7fe:	f7ff ff7d 	bl	800d6fc <std>
 800d802:	68e0      	ldr	r0, [r4, #12]
 800d804:	2202      	movs	r2, #2
 800d806:	2112      	movs	r1, #18
 800d808:	f7ff ff78 	bl	800d6fc <std>
 800d80c:	2301      	movs	r3, #1
 800d80e:	61a3      	str	r3, [r4, #24]
 800d810:	e7d2      	b.n	800d7b8 <__sinit+0xc>
 800d812:	bf00      	nop
 800d814:	08010434 	.word	0x08010434
 800d818:	0800d745 	.word	0x0800d745

0800d81c <__sfp>:
 800d81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d81e:	4607      	mov	r7, r0
 800d820:	f7ff ffac 	bl	800d77c <__sfp_lock_acquire>
 800d824:	4b1e      	ldr	r3, [pc, #120]	; (800d8a0 <__sfp+0x84>)
 800d826:	681e      	ldr	r6, [r3, #0]
 800d828:	69b3      	ldr	r3, [r6, #24]
 800d82a:	b913      	cbnz	r3, 800d832 <__sfp+0x16>
 800d82c:	4630      	mov	r0, r6
 800d82e:	f7ff ffbd 	bl	800d7ac <__sinit>
 800d832:	3648      	adds	r6, #72	; 0x48
 800d834:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d838:	3b01      	subs	r3, #1
 800d83a:	d503      	bpl.n	800d844 <__sfp+0x28>
 800d83c:	6833      	ldr	r3, [r6, #0]
 800d83e:	b30b      	cbz	r3, 800d884 <__sfp+0x68>
 800d840:	6836      	ldr	r6, [r6, #0]
 800d842:	e7f7      	b.n	800d834 <__sfp+0x18>
 800d844:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d848:	b9d5      	cbnz	r5, 800d880 <__sfp+0x64>
 800d84a:	4b16      	ldr	r3, [pc, #88]	; (800d8a4 <__sfp+0x88>)
 800d84c:	60e3      	str	r3, [r4, #12]
 800d84e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d852:	6665      	str	r5, [r4, #100]	; 0x64
 800d854:	f000 f847 	bl	800d8e6 <__retarget_lock_init_recursive>
 800d858:	f7ff ff96 	bl	800d788 <__sfp_lock_release>
 800d85c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d860:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d864:	6025      	str	r5, [r4, #0]
 800d866:	61a5      	str	r5, [r4, #24]
 800d868:	2208      	movs	r2, #8
 800d86a:	4629      	mov	r1, r5
 800d86c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d870:	f7ff fd6c 	bl	800d34c <memset>
 800d874:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d878:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d87c:	4620      	mov	r0, r4
 800d87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d880:	3468      	adds	r4, #104	; 0x68
 800d882:	e7d9      	b.n	800d838 <__sfp+0x1c>
 800d884:	2104      	movs	r1, #4
 800d886:	4638      	mov	r0, r7
 800d888:	f7ff ff62 	bl	800d750 <__sfmoreglue>
 800d88c:	4604      	mov	r4, r0
 800d88e:	6030      	str	r0, [r6, #0]
 800d890:	2800      	cmp	r0, #0
 800d892:	d1d5      	bne.n	800d840 <__sfp+0x24>
 800d894:	f7ff ff78 	bl	800d788 <__sfp_lock_release>
 800d898:	230c      	movs	r3, #12
 800d89a:	603b      	str	r3, [r7, #0]
 800d89c:	e7ee      	b.n	800d87c <__sfp+0x60>
 800d89e:	bf00      	nop
 800d8a0:	08010434 	.word	0x08010434
 800d8a4:	ffff0001 	.word	0xffff0001

0800d8a8 <_fwalk_reent>:
 800d8a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8ac:	4606      	mov	r6, r0
 800d8ae:	4688      	mov	r8, r1
 800d8b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d8b4:	2700      	movs	r7, #0
 800d8b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d8ba:	f1b9 0901 	subs.w	r9, r9, #1
 800d8be:	d505      	bpl.n	800d8cc <_fwalk_reent+0x24>
 800d8c0:	6824      	ldr	r4, [r4, #0]
 800d8c2:	2c00      	cmp	r4, #0
 800d8c4:	d1f7      	bne.n	800d8b6 <_fwalk_reent+0xe>
 800d8c6:	4638      	mov	r0, r7
 800d8c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8cc:	89ab      	ldrh	r3, [r5, #12]
 800d8ce:	2b01      	cmp	r3, #1
 800d8d0:	d907      	bls.n	800d8e2 <_fwalk_reent+0x3a>
 800d8d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d8d6:	3301      	adds	r3, #1
 800d8d8:	d003      	beq.n	800d8e2 <_fwalk_reent+0x3a>
 800d8da:	4629      	mov	r1, r5
 800d8dc:	4630      	mov	r0, r6
 800d8de:	47c0      	blx	r8
 800d8e0:	4307      	orrs	r7, r0
 800d8e2:	3568      	adds	r5, #104	; 0x68
 800d8e4:	e7e9      	b.n	800d8ba <_fwalk_reent+0x12>

0800d8e6 <__retarget_lock_init_recursive>:
 800d8e6:	4770      	bx	lr

0800d8e8 <__retarget_lock_acquire_recursive>:
 800d8e8:	4770      	bx	lr

0800d8ea <__retarget_lock_release_recursive>:
 800d8ea:	4770      	bx	lr

0800d8ec <__swhatbuf_r>:
 800d8ec:	b570      	push	{r4, r5, r6, lr}
 800d8ee:	460e      	mov	r6, r1
 800d8f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8f4:	2900      	cmp	r1, #0
 800d8f6:	b096      	sub	sp, #88	; 0x58
 800d8f8:	4614      	mov	r4, r2
 800d8fa:	461d      	mov	r5, r3
 800d8fc:	da08      	bge.n	800d910 <__swhatbuf_r+0x24>
 800d8fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d902:	2200      	movs	r2, #0
 800d904:	602a      	str	r2, [r5, #0]
 800d906:	061a      	lsls	r2, r3, #24
 800d908:	d410      	bmi.n	800d92c <__swhatbuf_r+0x40>
 800d90a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d90e:	e00e      	b.n	800d92e <__swhatbuf_r+0x42>
 800d910:	466a      	mov	r2, sp
 800d912:	f000 feb9 	bl	800e688 <_fstat_r>
 800d916:	2800      	cmp	r0, #0
 800d918:	dbf1      	blt.n	800d8fe <__swhatbuf_r+0x12>
 800d91a:	9a01      	ldr	r2, [sp, #4]
 800d91c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d920:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d924:	425a      	negs	r2, r3
 800d926:	415a      	adcs	r2, r3
 800d928:	602a      	str	r2, [r5, #0]
 800d92a:	e7ee      	b.n	800d90a <__swhatbuf_r+0x1e>
 800d92c:	2340      	movs	r3, #64	; 0x40
 800d92e:	2000      	movs	r0, #0
 800d930:	6023      	str	r3, [r4, #0]
 800d932:	b016      	add	sp, #88	; 0x58
 800d934:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d938 <__smakebuf_r>:
 800d938:	898b      	ldrh	r3, [r1, #12]
 800d93a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d93c:	079d      	lsls	r5, r3, #30
 800d93e:	4606      	mov	r6, r0
 800d940:	460c      	mov	r4, r1
 800d942:	d507      	bpl.n	800d954 <__smakebuf_r+0x1c>
 800d944:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d948:	6023      	str	r3, [r4, #0]
 800d94a:	6123      	str	r3, [r4, #16]
 800d94c:	2301      	movs	r3, #1
 800d94e:	6163      	str	r3, [r4, #20]
 800d950:	b002      	add	sp, #8
 800d952:	bd70      	pop	{r4, r5, r6, pc}
 800d954:	ab01      	add	r3, sp, #4
 800d956:	466a      	mov	r2, sp
 800d958:	f7ff ffc8 	bl	800d8ec <__swhatbuf_r>
 800d95c:	9900      	ldr	r1, [sp, #0]
 800d95e:	4605      	mov	r5, r0
 800d960:	4630      	mov	r0, r6
 800d962:	f000 f89d 	bl	800daa0 <_malloc_r>
 800d966:	b948      	cbnz	r0, 800d97c <__smakebuf_r+0x44>
 800d968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d96c:	059a      	lsls	r2, r3, #22
 800d96e:	d4ef      	bmi.n	800d950 <__smakebuf_r+0x18>
 800d970:	f023 0303 	bic.w	r3, r3, #3
 800d974:	f043 0302 	orr.w	r3, r3, #2
 800d978:	81a3      	strh	r3, [r4, #12]
 800d97a:	e7e3      	b.n	800d944 <__smakebuf_r+0xc>
 800d97c:	4b0d      	ldr	r3, [pc, #52]	; (800d9b4 <__smakebuf_r+0x7c>)
 800d97e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d980:	89a3      	ldrh	r3, [r4, #12]
 800d982:	6020      	str	r0, [r4, #0]
 800d984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d988:	81a3      	strh	r3, [r4, #12]
 800d98a:	9b00      	ldr	r3, [sp, #0]
 800d98c:	6163      	str	r3, [r4, #20]
 800d98e:	9b01      	ldr	r3, [sp, #4]
 800d990:	6120      	str	r0, [r4, #16]
 800d992:	b15b      	cbz	r3, 800d9ac <__smakebuf_r+0x74>
 800d994:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d998:	4630      	mov	r0, r6
 800d99a:	f000 fe87 	bl	800e6ac <_isatty_r>
 800d99e:	b128      	cbz	r0, 800d9ac <__smakebuf_r+0x74>
 800d9a0:	89a3      	ldrh	r3, [r4, #12]
 800d9a2:	f023 0303 	bic.w	r3, r3, #3
 800d9a6:	f043 0301 	orr.w	r3, r3, #1
 800d9aa:	81a3      	strh	r3, [r4, #12]
 800d9ac:	89a0      	ldrh	r0, [r4, #12]
 800d9ae:	4305      	orrs	r5, r0
 800d9b0:	81a5      	strh	r5, [r4, #12]
 800d9b2:	e7cd      	b.n	800d950 <__smakebuf_r+0x18>
 800d9b4:	0800d745 	.word	0x0800d745

0800d9b8 <malloc>:
 800d9b8:	4b02      	ldr	r3, [pc, #8]	; (800d9c4 <malloc+0xc>)
 800d9ba:	4601      	mov	r1, r0
 800d9bc:	6818      	ldr	r0, [r3, #0]
 800d9be:	f000 b86f 	b.w	800daa0 <_malloc_r>
 800d9c2:	bf00      	nop
 800d9c4:	24000038 	.word	0x24000038

0800d9c8 <_free_r>:
 800d9c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9ca:	2900      	cmp	r1, #0
 800d9cc:	d044      	beq.n	800da58 <_free_r+0x90>
 800d9ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9d2:	9001      	str	r0, [sp, #4]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	f1a1 0404 	sub.w	r4, r1, #4
 800d9da:	bfb8      	it	lt
 800d9dc:	18e4      	addlt	r4, r4, r3
 800d9de:	f000 fea1 	bl	800e724 <__malloc_lock>
 800d9e2:	4a1e      	ldr	r2, [pc, #120]	; (800da5c <_free_r+0x94>)
 800d9e4:	9801      	ldr	r0, [sp, #4]
 800d9e6:	6813      	ldr	r3, [r2, #0]
 800d9e8:	b933      	cbnz	r3, 800d9f8 <_free_r+0x30>
 800d9ea:	6063      	str	r3, [r4, #4]
 800d9ec:	6014      	str	r4, [r2, #0]
 800d9ee:	b003      	add	sp, #12
 800d9f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d9f4:	f000 be9c 	b.w	800e730 <__malloc_unlock>
 800d9f8:	42a3      	cmp	r3, r4
 800d9fa:	d908      	bls.n	800da0e <_free_r+0x46>
 800d9fc:	6825      	ldr	r5, [r4, #0]
 800d9fe:	1961      	adds	r1, r4, r5
 800da00:	428b      	cmp	r3, r1
 800da02:	bf01      	itttt	eq
 800da04:	6819      	ldreq	r1, [r3, #0]
 800da06:	685b      	ldreq	r3, [r3, #4]
 800da08:	1949      	addeq	r1, r1, r5
 800da0a:	6021      	streq	r1, [r4, #0]
 800da0c:	e7ed      	b.n	800d9ea <_free_r+0x22>
 800da0e:	461a      	mov	r2, r3
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	b10b      	cbz	r3, 800da18 <_free_r+0x50>
 800da14:	42a3      	cmp	r3, r4
 800da16:	d9fa      	bls.n	800da0e <_free_r+0x46>
 800da18:	6811      	ldr	r1, [r2, #0]
 800da1a:	1855      	adds	r5, r2, r1
 800da1c:	42a5      	cmp	r5, r4
 800da1e:	d10b      	bne.n	800da38 <_free_r+0x70>
 800da20:	6824      	ldr	r4, [r4, #0]
 800da22:	4421      	add	r1, r4
 800da24:	1854      	adds	r4, r2, r1
 800da26:	42a3      	cmp	r3, r4
 800da28:	6011      	str	r1, [r2, #0]
 800da2a:	d1e0      	bne.n	800d9ee <_free_r+0x26>
 800da2c:	681c      	ldr	r4, [r3, #0]
 800da2e:	685b      	ldr	r3, [r3, #4]
 800da30:	6053      	str	r3, [r2, #4]
 800da32:	4421      	add	r1, r4
 800da34:	6011      	str	r1, [r2, #0]
 800da36:	e7da      	b.n	800d9ee <_free_r+0x26>
 800da38:	d902      	bls.n	800da40 <_free_r+0x78>
 800da3a:	230c      	movs	r3, #12
 800da3c:	6003      	str	r3, [r0, #0]
 800da3e:	e7d6      	b.n	800d9ee <_free_r+0x26>
 800da40:	6825      	ldr	r5, [r4, #0]
 800da42:	1961      	adds	r1, r4, r5
 800da44:	428b      	cmp	r3, r1
 800da46:	bf04      	itt	eq
 800da48:	6819      	ldreq	r1, [r3, #0]
 800da4a:	685b      	ldreq	r3, [r3, #4]
 800da4c:	6063      	str	r3, [r4, #4]
 800da4e:	bf04      	itt	eq
 800da50:	1949      	addeq	r1, r1, r5
 800da52:	6021      	streq	r1, [r4, #0]
 800da54:	6054      	str	r4, [r2, #4]
 800da56:	e7ca      	b.n	800d9ee <_free_r+0x26>
 800da58:	b003      	add	sp, #12
 800da5a:	bd30      	pop	{r4, r5, pc}
 800da5c:	24021d34 	.word	0x24021d34

0800da60 <sbrk_aligned>:
 800da60:	b570      	push	{r4, r5, r6, lr}
 800da62:	4e0e      	ldr	r6, [pc, #56]	; (800da9c <sbrk_aligned+0x3c>)
 800da64:	460c      	mov	r4, r1
 800da66:	6831      	ldr	r1, [r6, #0]
 800da68:	4605      	mov	r5, r0
 800da6a:	b911      	cbnz	r1, 800da72 <sbrk_aligned+0x12>
 800da6c:	f000 fcd6 	bl	800e41c <_sbrk_r>
 800da70:	6030      	str	r0, [r6, #0]
 800da72:	4621      	mov	r1, r4
 800da74:	4628      	mov	r0, r5
 800da76:	f000 fcd1 	bl	800e41c <_sbrk_r>
 800da7a:	1c43      	adds	r3, r0, #1
 800da7c:	d00a      	beq.n	800da94 <sbrk_aligned+0x34>
 800da7e:	1cc4      	adds	r4, r0, #3
 800da80:	f024 0403 	bic.w	r4, r4, #3
 800da84:	42a0      	cmp	r0, r4
 800da86:	d007      	beq.n	800da98 <sbrk_aligned+0x38>
 800da88:	1a21      	subs	r1, r4, r0
 800da8a:	4628      	mov	r0, r5
 800da8c:	f000 fcc6 	bl	800e41c <_sbrk_r>
 800da90:	3001      	adds	r0, #1
 800da92:	d101      	bne.n	800da98 <sbrk_aligned+0x38>
 800da94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800da98:	4620      	mov	r0, r4
 800da9a:	bd70      	pop	{r4, r5, r6, pc}
 800da9c:	24021d38 	.word	0x24021d38

0800daa0 <_malloc_r>:
 800daa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daa4:	1ccd      	adds	r5, r1, #3
 800daa6:	f025 0503 	bic.w	r5, r5, #3
 800daaa:	3508      	adds	r5, #8
 800daac:	2d0c      	cmp	r5, #12
 800daae:	bf38      	it	cc
 800dab0:	250c      	movcc	r5, #12
 800dab2:	2d00      	cmp	r5, #0
 800dab4:	4607      	mov	r7, r0
 800dab6:	db01      	blt.n	800dabc <_malloc_r+0x1c>
 800dab8:	42a9      	cmp	r1, r5
 800daba:	d905      	bls.n	800dac8 <_malloc_r+0x28>
 800dabc:	230c      	movs	r3, #12
 800dabe:	603b      	str	r3, [r7, #0]
 800dac0:	2600      	movs	r6, #0
 800dac2:	4630      	mov	r0, r6
 800dac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dac8:	4e2e      	ldr	r6, [pc, #184]	; (800db84 <_malloc_r+0xe4>)
 800daca:	f000 fe2b 	bl	800e724 <__malloc_lock>
 800dace:	6833      	ldr	r3, [r6, #0]
 800dad0:	461c      	mov	r4, r3
 800dad2:	bb34      	cbnz	r4, 800db22 <_malloc_r+0x82>
 800dad4:	4629      	mov	r1, r5
 800dad6:	4638      	mov	r0, r7
 800dad8:	f7ff ffc2 	bl	800da60 <sbrk_aligned>
 800dadc:	1c43      	adds	r3, r0, #1
 800dade:	4604      	mov	r4, r0
 800dae0:	d14d      	bne.n	800db7e <_malloc_r+0xde>
 800dae2:	6834      	ldr	r4, [r6, #0]
 800dae4:	4626      	mov	r6, r4
 800dae6:	2e00      	cmp	r6, #0
 800dae8:	d140      	bne.n	800db6c <_malloc_r+0xcc>
 800daea:	6823      	ldr	r3, [r4, #0]
 800daec:	4631      	mov	r1, r6
 800daee:	4638      	mov	r0, r7
 800daf0:	eb04 0803 	add.w	r8, r4, r3
 800daf4:	f000 fc92 	bl	800e41c <_sbrk_r>
 800daf8:	4580      	cmp	r8, r0
 800dafa:	d13a      	bne.n	800db72 <_malloc_r+0xd2>
 800dafc:	6821      	ldr	r1, [r4, #0]
 800dafe:	3503      	adds	r5, #3
 800db00:	1a6d      	subs	r5, r5, r1
 800db02:	f025 0503 	bic.w	r5, r5, #3
 800db06:	3508      	adds	r5, #8
 800db08:	2d0c      	cmp	r5, #12
 800db0a:	bf38      	it	cc
 800db0c:	250c      	movcc	r5, #12
 800db0e:	4629      	mov	r1, r5
 800db10:	4638      	mov	r0, r7
 800db12:	f7ff ffa5 	bl	800da60 <sbrk_aligned>
 800db16:	3001      	adds	r0, #1
 800db18:	d02b      	beq.n	800db72 <_malloc_r+0xd2>
 800db1a:	6823      	ldr	r3, [r4, #0]
 800db1c:	442b      	add	r3, r5
 800db1e:	6023      	str	r3, [r4, #0]
 800db20:	e00e      	b.n	800db40 <_malloc_r+0xa0>
 800db22:	6822      	ldr	r2, [r4, #0]
 800db24:	1b52      	subs	r2, r2, r5
 800db26:	d41e      	bmi.n	800db66 <_malloc_r+0xc6>
 800db28:	2a0b      	cmp	r2, #11
 800db2a:	d916      	bls.n	800db5a <_malloc_r+0xba>
 800db2c:	1961      	adds	r1, r4, r5
 800db2e:	42a3      	cmp	r3, r4
 800db30:	6025      	str	r5, [r4, #0]
 800db32:	bf18      	it	ne
 800db34:	6059      	strne	r1, [r3, #4]
 800db36:	6863      	ldr	r3, [r4, #4]
 800db38:	bf08      	it	eq
 800db3a:	6031      	streq	r1, [r6, #0]
 800db3c:	5162      	str	r2, [r4, r5]
 800db3e:	604b      	str	r3, [r1, #4]
 800db40:	4638      	mov	r0, r7
 800db42:	f104 060b 	add.w	r6, r4, #11
 800db46:	f000 fdf3 	bl	800e730 <__malloc_unlock>
 800db4a:	f026 0607 	bic.w	r6, r6, #7
 800db4e:	1d23      	adds	r3, r4, #4
 800db50:	1af2      	subs	r2, r6, r3
 800db52:	d0b6      	beq.n	800dac2 <_malloc_r+0x22>
 800db54:	1b9b      	subs	r3, r3, r6
 800db56:	50a3      	str	r3, [r4, r2]
 800db58:	e7b3      	b.n	800dac2 <_malloc_r+0x22>
 800db5a:	6862      	ldr	r2, [r4, #4]
 800db5c:	42a3      	cmp	r3, r4
 800db5e:	bf0c      	ite	eq
 800db60:	6032      	streq	r2, [r6, #0]
 800db62:	605a      	strne	r2, [r3, #4]
 800db64:	e7ec      	b.n	800db40 <_malloc_r+0xa0>
 800db66:	4623      	mov	r3, r4
 800db68:	6864      	ldr	r4, [r4, #4]
 800db6a:	e7b2      	b.n	800dad2 <_malloc_r+0x32>
 800db6c:	4634      	mov	r4, r6
 800db6e:	6876      	ldr	r6, [r6, #4]
 800db70:	e7b9      	b.n	800dae6 <_malloc_r+0x46>
 800db72:	230c      	movs	r3, #12
 800db74:	603b      	str	r3, [r7, #0]
 800db76:	4638      	mov	r0, r7
 800db78:	f000 fdda 	bl	800e730 <__malloc_unlock>
 800db7c:	e7a1      	b.n	800dac2 <_malloc_r+0x22>
 800db7e:	6025      	str	r5, [r4, #0]
 800db80:	e7de      	b.n	800db40 <_malloc_r+0xa0>
 800db82:	bf00      	nop
 800db84:	24021d34 	.word	0x24021d34

0800db88 <__ssputs_r>:
 800db88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db8c:	688e      	ldr	r6, [r1, #8]
 800db8e:	429e      	cmp	r6, r3
 800db90:	4682      	mov	sl, r0
 800db92:	460c      	mov	r4, r1
 800db94:	4690      	mov	r8, r2
 800db96:	461f      	mov	r7, r3
 800db98:	d838      	bhi.n	800dc0c <__ssputs_r+0x84>
 800db9a:	898a      	ldrh	r2, [r1, #12]
 800db9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dba0:	d032      	beq.n	800dc08 <__ssputs_r+0x80>
 800dba2:	6825      	ldr	r5, [r4, #0]
 800dba4:	6909      	ldr	r1, [r1, #16]
 800dba6:	eba5 0901 	sub.w	r9, r5, r1
 800dbaa:	6965      	ldr	r5, [r4, #20]
 800dbac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dbb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	444b      	add	r3, r9
 800dbb8:	106d      	asrs	r5, r5, #1
 800dbba:	429d      	cmp	r5, r3
 800dbbc:	bf38      	it	cc
 800dbbe:	461d      	movcc	r5, r3
 800dbc0:	0553      	lsls	r3, r2, #21
 800dbc2:	d531      	bpl.n	800dc28 <__ssputs_r+0xa0>
 800dbc4:	4629      	mov	r1, r5
 800dbc6:	f7ff ff6b 	bl	800daa0 <_malloc_r>
 800dbca:	4606      	mov	r6, r0
 800dbcc:	b950      	cbnz	r0, 800dbe4 <__ssputs_r+0x5c>
 800dbce:	230c      	movs	r3, #12
 800dbd0:	f8ca 3000 	str.w	r3, [sl]
 800dbd4:	89a3      	ldrh	r3, [r4, #12]
 800dbd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbda:	81a3      	strh	r3, [r4, #12]
 800dbdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dbe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbe4:	6921      	ldr	r1, [r4, #16]
 800dbe6:	464a      	mov	r2, r9
 800dbe8:	f7ff fba2 	bl	800d330 <memcpy>
 800dbec:	89a3      	ldrh	r3, [r4, #12]
 800dbee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dbf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbf6:	81a3      	strh	r3, [r4, #12]
 800dbf8:	6126      	str	r6, [r4, #16]
 800dbfa:	6165      	str	r5, [r4, #20]
 800dbfc:	444e      	add	r6, r9
 800dbfe:	eba5 0509 	sub.w	r5, r5, r9
 800dc02:	6026      	str	r6, [r4, #0]
 800dc04:	60a5      	str	r5, [r4, #8]
 800dc06:	463e      	mov	r6, r7
 800dc08:	42be      	cmp	r6, r7
 800dc0a:	d900      	bls.n	800dc0e <__ssputs_r+0x86>
 800dc0c:	463e      	mov	r6, r7
 800dc0e:	6820      	ldr	r0, [r4, #0]
 800dc10:	4632      	mov	r2, r6
 800dc12:	4641      	mov	r1, r8
 800dc14:	f000 fd6c 	bl	800e6f0 <memmove>
 800dc18:	68a3      	ldr	r3, [r4, #8]
 800dc1a:	1b9b      	subs	r3, r3, r6
 800dc1c:	60a3      	str	r3, [r4, #8]
 800dc1e:	6823      	ldr	r3, [r4, #0]
 800dc20:	4433      	add	r3, r6
 800dc22:	6023      	str	r3, [r4, #0]
 800dc24:	2000      	movs	r0, #0
 800dc26:	e7db      	b.n	800dbe0 <__ssputs_r+0x58>
 800dc28:	462a      	mov	r2, r5
 800dc2a:	f000 fd87 	bl	800e73c <_realloc_r>
 800dc2e:	4606      	mov	r6, r0
 800dc30:	2800      	cmp	r0, #0
 800dc32:	d1e1      	bne.n	800dbf8 <__ssputs_r+0x70>
 800dc34:	6921      	ldr	r1, [r4, #16]
 800dc36:	4650      	mov	r0, sl
 800dc38:	f7ff fec6 	bl	800d9c8 <_free_r>
 800dc3c:	e7c7      	b.n	800dbce <__ssputs_r+0x46>
	...

0800dc40 <_svfiprintf_r>:
 800dc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc44:	4698      	mov	r8, r3
 800dc46:	898b      	ldrh	r3, [r1, #12]
 800dc48:	061b      	lsls	r3, r3, #24
 800dc4a:	b09d      	sub	sp, #116	; 0x74
 800dc4c:	4607      	mov	r7, r0
 800dc4e:	460d      	mov	r5, r1
 800dc50:	4614      	mov	r4, r2
 800dc52:	d50e      	bpl.n	800dc72 <_svfiprintf_r+0x32>
 800dc54:	690b      	ldr	r3, [r1, #16]
 800dc56:	b963      	cbnz	r3, 800dc72 <_svfiprintf_r+0x32>
 800dc58:	2140      	movs	r1, #64	; 0x40
 800dc5a:	f7ff ff21 	bl	800daa0 <_malloc_r>
 800dc5e:	6028      	str	r0, [r5, #0]
 800dc60:	6128      	str	r0, [r5, #16]
 800dc62:	b920      	cbnz	r0, 800dc6e <_svfiprintf_r+0x2e>
 800dc64:	230c      	movs	r3, #12
 800dc66:	603b      	str	r3, [r7, #0]
 800dc68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc6c:	e0d1      	b.n	800de12 <_svfiprintf_r+0x1d2>
 800dc6e:	2340      	movs	r3, #64	; 0x40
 800dc70:	616b      	str	r3, [r5, #20]
 800dc72:	2300      	movs	r3, #0
 800dc74:	9309      	str	r3, [sp, #36]	; 0x24
 800dc76:	2320      	movs	r3, #32
 800dc78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc80:	2330      	movs	r3, #48	; 0x30
 800dc82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800de2c <_svfiprintf_r+0x1ec>
 800dc86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc8a:	f04f 0901 	mov.w	r9, #1
 800dc8e:	4623      	mov	r3, r4
 800dc90:	469a      	mov	sl, r3
 800dc92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc96:	b10a      	cbz	r2, 800dc9c <_svfiprintf_r+0x5c>
 800dc98:	2a25      	cmp	r2, #37	; 0x25
 800dc9a:	d1f9      	bne.n	800dc90 <_svfiprintf_r+0x50>
 800dc9c:	ebba 0b04 	subs.w	fp, sl, r4
 800dca0:	d00b      	beq.n	800dcba <_svfiprintf_r+0x7a>
 800dca2:	465b      	mov	r3, fp
 800dca4:	4622      	mov	r2, r4
 800dca6:	4629      	mov	r1, r5
 800dca8:	4638      	mov	r0, r7
 800dcaa:	f7ff ff6d 	bl	800db88 <__ssputs_r>
 800dcae:	3001      	adds	r0, #1
 800dcb0:	f000 80aa 	beq.w	800de08 <_svfiprintf_r+0x1c8>
 800dcb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcb6:	445a      	add	r2, fp
 800dcb8:	9209      	str	r2, [sp, #36]	; 0x24
 800dcba:	f89a 3000 	ldrb.w	r3, [sl]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	f000 80a2 	beq.w	800de08 <_svfiprintf_r+0x1c8>
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dcca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dcce:	f10a 0a01 	add.w	sl, sl, #1
 800dcd2:	9304      	str	r3, [sp, #16]
 800dcd4:	9307      	str	r3, [sp, #28]
 800dcd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dcda:	931a      	str	r3, [sp, #104]	; 0x68
 800dcdc:	4654      	mov	r4, sl
 800dcde:	2205      	movs	r2, #5
 800dce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dce4:	4851      	ldr	r0, [pc, #324]	; (800de2c <_svfiprintf_r+0x1ec>)
 800dce6:	f7f2 fafb 	bl	80002e0 <memchr>
 800dcea:	9a04      	ldr	r2, [sp, #16]
 800dcec:	b9d8      	cbnz	r0, 800dd26 <_svfiprintf_r+0xe6>
 800dcee:	06d0      	lsls	r0, r2, #27
 800dcf0:	bf44      	itt	mi
 800dcf2:	2320      	movmi	r3, #32
 800dcf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcf8:	0711      	lsls	r1, r2, #28
 800dcfa:	bf44      	itt	mi
 800dcfc:	232b      	movmi	r3, #43	; 0x2b
 800dcfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd02:	f89a 3000 	ldrb.w	r3, [sl]
 800dd06:	2b2a      	cmp	r3, #42	; 0x2a
 800dd08:	d015      	beq.n	800dd36 <_svfiprintf_r+0xf6>
 800dd0a:	9a07      	ldr	r2, [sp, #28]
 800dd0c:	4654      	mov	r4, sl
 800dd0e:	2000      	movs	r0, #0
 800dd10:	f04f 0c0a 	mov.w	ip, #10
 800dd14:	4621      	mov	r1, r4
 800dd16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd1a:	3b30      	subs	r3, #48	; 0x30
 800dd1c:	2b09      	cmp	r3, #9
 800dd1e:	d94e      	bls.n	800ddbe <_svfiprintf_r+0x17e>
 800dd20:	b1b0      	cbz	r0, 800dd50 <_svfiprintf_r+0x110>
 800dd22:	9207      	str	r2, [sp, #28]
 800dd24:	e014      	b.n	800dd50 <_svfiprintf_r+0x110>
 800dd26:	eba0 0308 	sub.w	r3, r0, r8
 800dd2a:	fa09 f303 	lsl.w	r3, r9, r3
 800dd2e:	4313      	orrs	r3, r2
 800dd30:	9304      	str	r3, [sp, #16]
 800dd32:	46a2      	mov	sl, r4
 800dd34:	e7d2      	b.n	800dcdc <_svfiprintf_r+0x9c>
 800dd36:	9b03      	ldr	r3, [sp, #12]
 800dd38:	1d19      	adds	r1, r3, #4
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	9103      	str	r1, [sp, #12]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	bfbb      	ittet	lt
 800dd42:	425b      	neglt	r3, r3
 800dd44:	f042 0202 	orrlt.w	r2, r2, #2
 800dd48:	9307      	strge	r3, [sp, #28]
 800dd4a:	9307      	strlt	r3, [sp, #28]
 800dd4c:	bfb8      	it	lt
 800dd4e:	9204      	strlt	r2, [sp, #16]
 800dd50:	7823      	ldrb	r3, [r4, #0]
 800dd52:	2b2e      	cmp	r3, #46	; 0x2e
 800dd54:	d10c      	bne.n	800dd70 <_svfiprintf_r+0x130>
 800dd56:	7863      	ldrb	r3, [r4, #1]
 800dd58:	2b2a      	cmp	r3, #42	; 0x2a
 800dd5a:	d135      	bne.n	800ddc8 <_svfiprintf_r+0x188>
 800dd5c:	9b03      	ldr	r3, [sp, #12]
 800dd5e:	1d1a      	adds	r2, r3, #4
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	9203      	str	r2, [sp, #12]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	bfb8      	it	lt
 800dd68:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dd6c:	3402      	adds	r4, #2
 800dd6e:	9305      	str	r3, [sp, #20]
 800dd70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800de3c <_svfiprintf_r+0x1fc>
 800dd74:	7821      	ldrb	r1, [r4, #0]
 800dd76:	2203      	movs	r2, #3
 800dd78:	4650      	mov	r0, sl
 800dd7a:	f7f2 fab1 	bl	80002e0 <memchr>
 800dd7e:	b140      	cbz	r0, 800dd92 <_svfiprintf_r+0x152>
 800dd80:	2340      	movs	r3, #64	; 0x40
 800dd82:	eba0 000a 	sub.w	r0, r0, sl
 800dd86:	fa03 f000 	lsl.w	r0, r3, r0
 800dd8a:	9b04      	ldr	r3, [sp, #16]
 800dd8c:	4303      	orrs	r3, r0
 800dd8e:	3401      	adds	r4, #1
 800dd90:	9304      	str	r3, [sp, #16]
 800dd92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd96:	4826      	ldr	r0, [pc, #152]	; (800de30 <_svfiprintf_r+0x1f0>)
 800dd98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd9c:	2206      	movs	r2, #6
 800dd9e:	f7f2 fa9f 	bl	80002e0 <memchr>
 800dda2:	2800      	cmp	r0, #0
 800dda4:	d038      	beq.n	800de18 <_svfiprintf_r+0x1d8>
 800dda6:	4b23      	ldr	r3, [pc, #140]	; (800de34 <_svfiprintf_r+0x1f4>)
 800dda8:	bb1b      	cbnz	r3, 800ddf2 <_svfiprintf_r+0x1b2>
 800ddaa:	9b03      	ldr	r3, [sp, #12]
 800ddac:	3307      	adds	r3, #7
 800ddae:	f023 0307 	bic.w	r3, r3, #7
 800ddb2:	3308      	adds	r3, #8
 800ddb4:	9303      	str	r3, [sp, #12]
 800ddb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddb8:	4433      	add	r3, r6
 800ddba:	9309      	str	r3, [sp, #36]	; 0x24
 800ddbc:	e767      	b.n	800dc8e <_svfiprintf_r+0x4e>
 800ddbe:	fb0c 3202 	mla	r2, ip, r2, r3
 800ddc2:	460c      	mov	r4, r1
 800ddc4:	2001      	movs	r0, #1
 800ddc6:	e7a5      	b.n	800dd14 <_svfiprintf_r+0xd4>
 800ddc8:	2300      	movs	r3, #0
 800ddca:	3401      	adds	r4, #1
 800ddcc:	9305      	str	r3, [sp, #20]
 800ddce:	4619      	mov	r1, r3
 800ddd0:	f04f 0c0a 	mov.w	ip, #10
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddda:	3a30      	subs	r2, #48	; 0x30
 800dddc:	2a09      	cmp	r2, #9
 800ddde:	d903      	bls.n	800dde8 <_svfiprintf_r+0x1a8>
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d0c5      	beq.n	800dd70 <_svfiprintf_r+0x130>
 800dde4:	9105      	str	r1, [sp, #20]
 800dde6:	e7c3      	b.n	800dd70 <_svfiprintf_r+0x130>
 800dde8:	fb0c 2101 	mla	r1, ip, r1, r2
 800ddec:	4604      	mov	r4, r0
 800ddee:	2301      	movs	r3, #1
 800ddf0:	e7f0      	b.n	800ddd4 <_svfiprintf_r+0x194>
 800ddf2:	ab03      	add	r3, sp, #12
 800ddf4:	9300      	str	r3, [sp, #0]
 800ddf6:	462a      	mov	r2, r5
 800ddf8:	4b0f      	ldr	r3, [pc, #60]	; (800de38 <_svfiprintf_r+0x1f8>)
 800ddfa:	a904      	add	r1, sp, #16
 800ddfc:	4638      	mov	r0, r7
 800ddfe:	f3af 8000 	nop.w
 800de02:	1c42      	adds	r2, r0, #1
 800de04:	4606      	mov	r6, r0
 800de06:	d1d6      	bne.n	800ddb6 <_svfiprintf_r+0x176>
 800de08:	89ab      	ldrh	r3, [r5, #12]
 800de0a:	065b      	lsls	r3, r3, #25
 800de0c:	f53f af2c 	bmi.w	800dc68 <_svfiprintf_r+0x28>
 800de10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de12:	b01d      	add	sp, #116	; 0x74
 800de14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de18:	ab03      	add	r3, sp, #12
 800de1a:	9300      	str	r3, [sp, #0]
 800de1c:	462a      	mov	r2, r5
 800de1e:	4b06      	ldr	r3, [pc, #24]	; (800de38 <_svfiprintf_r+0x1f8>)
 800de20:	a904      	add	r1, sp, #16
 800de22:	4638      	mov	r0, r7
 800de24:	f000 f9d4 	bl	800e1d0 <_printf_i>
 800de28:	e7eb      	b.n	800de02 <_svfiprintf_r+0x1c2>
 800de2a:	bf00      	nop
 800de2c:	08010498 	.word	0x08010498
 800de30:	080104a2 	.word	0x080104a2
 800de34:	00000000 	.word	0x00000000
 800de38:	0800db89 	.word	0x0800db89
 800de3c:	0801049e 	.word	0x0801049e

0800de40 <__sfputc_r>:
 800de40:	6893      	ldr	r3, [r2, #8]
 800de42:	3b01      	subs	r3, #1
 800de44:	2b00      	cmp	r3, #0
 800de46:	b410      	push	{r4}
 800de48:	6093      	str	r3, [r2, #8]
 800de4a:	da08      	bge.n	800de5e <__sfputc_r+0x1e>
 800de4c:	6994      	ldr	r4, [r2, #24]
 800de4e:	42a3      	cmp	r3, r4
 800de50:	db01      	blt.n	800de56 <__sfputc_r+0x16>
 800de52:	290a      	cmp	r1, #10
 800de54:	d103      	bne.n	800de5e <__sfputc_r+0x1e>
 800de56:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de5a:	f000 bb33 	b.w	800e4c4 <__swbuf_r>
 800de5e:	6813      	ldr	r3, [r2, #0]
 800de60:	1c58      	adds	r0, r3, #1
 800de62:	6010      	str	r0, [r2, #0]
 800de64:	7019      	strb	r1, [r3, #0]
 800de66:	4608      	mov	r0, r1
 800de68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de6c:	4770      	bx	lr

0800de6e <__sfputs_r>:
 800de6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de70:	4606      	mov	r6, r0
 800de72:	460f      	mov	r7, r1
 800de74:	4614      	mov	r4, r2
 800de76:	18d5      	adds	r5, r2, r3
 800de78:	42ac      	cmp	r4, r5
 800de7a:	d101      	bne.n	800de80 <__sfputs_r+0x12>
 800de7c:	2000      	movs	r0, #0
 800de7e:	e007      	b.n	800de90 <__sfputs_r+0x22>
 800de80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de84:	463a      	mov	r2, r7
 800de86:	4630      	mov	r0, r6
 800de88:	f7ff ffda 	bl	800de40 <__sfputc_r>
 800de8c:	1c43      	adds	r3, r0, #1
 800de8e:	d1f3      	bne.n	800de78 <__sfputs_r+0xa>
 800de90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800de94 <_vfiprintf_r>:
 800de94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de98:	460d      	mov	r5, r1
 800de9a:	b09d      	sub	sp, #116	; 0x74
 800de9c:	4614      	mov	r4, r2
 800de9e:	4698      	mov	r8, r3
 800dea0:	4606      	mov	r6, r0
 800dea2:	b118      	cbz	r0, 800deac <_vfiprintf_r+0x18>
 800dea4:	6983      	ldr	r3, [r0, #24]
 800dea6:	b90b      	cbnz	r3, 800deac <_vfiprintf_r+0x18>
 800dea8:	f7ff fc80 	bl	800d7ac <__sinit>
 800deac:	4b89      	ldr	r3, [pc, #548]	; (800e0d4 <_vfiprintf_r+0x240>)
 800deae:	429d      	cmp	r5, r3
 800deb0:	d11b      	bne.n	800deea <_vfiprintf_r+0x56>
 800deb2:	6875      	ldr	r5, [r6, #4]
 800deb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800deb6:	07d9      	lsls	r1, r3, #31
 800deb8:	d405      	bmi.n	800dec6 <_vfiprintf_r+0x32>
 800deba:	89ab      	ldrh	r3, [r5, #12]
 800debc:	059a      	lsls	r2, r3, #22
 800debe:	d402      	bmi.n	800dec6 <_vfiprintf_r+0x32>
 800dec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dec2:	f7ff fd11 	bl	800d8e8 <__retarget_lock_acquire_recursive>
 800dec6:	89ab      	ldrh	r3, [r5, #12]
 800dec8:	071b      	lsls	r3, r3, #28
 800deca:	d501      	bpl.n	800ded0 <_vfiprintf_r+0x3c>
 800decc:	692b      	ldr	r3, [r5, #16]
 800dece:	b9eb      	cbnz	r3, 800df0c <_vfiprintf_r+0x78>
 800ded0:	4629      	mov	r1, r5
 800ded2:	4630      	mov	r0, r6
 800ded4:	f000 fb5a 	bl	800e58c <__swsetup_r>
 800ded8:	b1c0      	cbz	r0, 800df0c <_vfiprintf_r+0x78>
 800deda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dedc:	07dc      	lsls	r4, r3, #31
 800dede:	d50e      	bpl.n	800defe <_vfiprintf_r+0x6a>
 800dee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dee4:	b01d      	add	sp, #116	; 0x74
 800dee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deea:	4b7b      	ldr	r3, [pc, #492]	; (800e0d8 <_vfiprintf_r+0x244>)
 800deec:	429d      	cmp	r5, r3
 800deee:	d101      	bne.n	800def4 <_vfiprintf_r+0x60>
 800def0:	68b5      	ldr	r5, [r6, #8]
 800def2:	e7df      	b.n	800deb4 <_vfiprintf_r+0x20>
 800def4:	4b79      	ldr	r3, [pc, #484]	; (800e0dc <_vfiprintf_r+0x248>)
 800def6:	429d      	cmp	r5, r3
 800def8:	bf08      	it	eq
 800defa:	68f5      	ldreq	r5, [r6, #12]
 800defc:	e7da      	b.n	800deb4 <_vfiprintf_r+0x20>
 800defe:	89ab      	ldrh	r3, [r5, #12]
 800df00:	0598      	lsls	r0, r3, #22
 800df02:	d4ed      	bmi.n	800dee0 <_vfiprintf_r+0x4c>
 800df04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df06:	f7ff fcf0 	bl	800d8ea <__retarget_lock_release_recursive>
 800df0a:	e7e9      	b.n	800dee0 <_vfiprintf_r+0x4c>
 800df0c:	2300      	movs	r3, #0
 800df0e:	9309      	str	r3, [sp, #36]	; 0x24
 800df10:	2320      	movs	r3, #32
 800df12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df16:	f8cd 800c 	str.w	r8, [sp, #12]
 800df1a:	2330      	movs	r3, #48	; 0x30
 800df1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e0e0 <_vfiprintf_r+0x24c>
 800df20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df24:	f04f 0901 	mov.w	r9, #1
 800df28:	4623      	mov	r3, r4
 800df2a:	469a      	mov	sl, r3
 800df2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df30:	b10a      	cbz	r2, 800df36 <_vfiprintf_r+0xa2>
 800df32:	2a25      	cmp	r2, #37	; 0x25
 800df34:	d1f9      	bne.n	800df2a <_vfiprintf_r+0x96>
 800df36:	ebba 0b04 	subs.w	fp, sl, r4
 800df3a:	d00b      	beq.n	800df54 <_vfiprintf_r+0xc0>
 800df3c:	465b      	mov	r3, fp
 800df3e:	4622      	mov	r2, r4
 800df40:	4629      	mov	r1, r5
 800df42:	4630      	mov	r0, r6
 800df44:	f7ff ff93 	bl	800de6e <__sfputs_r>
 800df48:	3001      	adds	r0, #1
 800df4a:	f000 80aa 	beq.w	800e0a2 <_vfiprintf_r+0x20e>
 800df4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df50:	445a      	add	r2, fp
 800df52:	9209      	str	r2, [sp, #36]	; 0x24
 800df54:	f89a 3000 	ldrb.w	r3, [sl]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	f000 80a2 	beq.w	800e0a2 <_vfiprintf_r+0x20e>
 800df5e:	2300      	movs	r3, #0
 800df60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df68:	f10a 0a01 	add.w	sl, sl, #1
 800df6c:	9304      	str	r3, [sp, #16]
 800df6e:	9307      	str	r3, [sp, #28]
 800df70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df74:	931a      	str	r3, [sp, #104]	; 0x68
 800df76:	4654      	mov	r4, sl
 800df78:	2205      	movs	r2, #5
 800df7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df7e:	4858      	ldr	r0, [pc, #352]	; (800e0e0 <_vfiprintf_r+0x24c>)
 800df80:	f7f2 f9ae 	bl	80002e0 <memchr>
 800df84:	9a04      	ldr	r2, [sp, #16]
 800df86:	b9d8      	cbnz	r0, 800dfc0 <_vfiprintf_r+0x12c>
 800df88:	06d1      	lsls	r1, r2, #27
 800df8a:	bf44      	itt	mi
 800df8c:	2320      	movmi	r3, #32
 800df8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df92:	0713      	lsls	r3, r2, #28
 800df94:	bf44      	itt	mi
 800df96:	232b      	movmi	r3, #43	; 0x2b
 800df98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df9c:	f89a 3000 	ldrb.w	r3, [sl]
 800dfa0:	2b2a      	cmp	r3, #42	; 0x2a
 800dfa2:	d015      	beq.n	800dfd0 <_vfiprintf_r+0x13c>
 800dfa4:	9a07      	ldr	r2, [sp, #28]
 800dfa6:	4654      	mov	r4, sl
 800dfa8:	2000      	movs	r0, #0
 800dfaa:	f04f 0c0a 	mov.w	ip, #10
 800dfae:	4621      	mov	r1, r4
 800dfb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dfb4:	3b30      	subs	r3, #48	; 0x30
 800dfb6:	2b09      	cmp	r3, #9
 800dfb8:	d94e      	bls.n	800e058 <_vfiprintf_r+0x1c4>
 800dfba:	b1b0      	cbz	r0, 800dfea <_vfiprintf_r+0x156>
 800dfbc:	9207      	str	r2, [sp, #28]
 800dfbe:	e014      	b.n	800dfea <_vfiprintf_r+0x156>
 800dfc0:	eba0 0308 	sub.w	r3, r0, r8
 800dfc4:	fa09 f303 	lsl.w	r3, r9, r3
 800dfc8:	4313      	orrs	r3, r2
 800dfca:	9304      	str	r3, [sp, #16]
 800dfcc:	46a2      	mov	sl, r4
 800dfce:	e7d2      	b.n	800df76 <_vfiprintf_r+0xe2>
 800dfd0:	9b03      	ldr	r3, [sp, #12]
 800dfd2:	1d19      	adds	r1, r3, #4
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	9103      	str	r1, [sp, #12]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	bfbb      	ittet	lt
 800dfdc:	425b      	neglt	r3, r3
 800dfde:	f042 0202 	orrlt.w	r2, r2, #2
 800dfe2:	9307      	strge	r3, [sp, #28]
 800dfe4:	9307      	strlt	r3, [sp, #28]
 800dfe6:	bfb8      	it	lt
 800dfe8:	9204      	strlt	r2, [sp, #16]
 800dfea:	7823      	ldrb	r3, [r4, #0]
 800dfec:	2b2e      	cmp	r3, #46	; 0x2e
 800dfee:	d10c      	bne.n	800e00a <_vfiprintf_r+0x176>
 800dff0:	7863      	ldrb	r3, [r4, #1]
 800dff2:	2b2a      	cmp	r3, #42	; 0x2a
 800dff4:	d135      	bne.n	800e062 <_vfiprintf_r+0x1ce>
 800dff6:	9b03      	ldr	r3, [sp, #12]
 800dff8:	1d1a      	adds	r2, r3, #4
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	9203      	str	r2, [sp, #12]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	bfb8      	it	lt
 800e002:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e006:	3402      	adds	r4, #2
 800e008:	9305      	str	r3, [sp, #20]
 800e00a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e0f0 <_vfiprintf_r+0x25c>
 800e00e:	7821      	ldrb	r1, [r4, #0]
 800e010:	2203      	movs	r2, #3
 800e012:	4650      	mov	r0, sl
 800e014:	f7f2 f964 	bl	80002e0 <memchr>
 800e018:	b140      	cbz	r0, 800e02c <_vfiprintf_r+0x198>
 800e01a:	2340      	movs	r3, #64	; 0x40
 800e01c:	eba0 000a 	sub.w	r0, r0, sl
 800e020:	fa03 f000 	lsl.w	r0, r3, r0
 800e024:	9b04      	ldr	r3, [sp, #16]
 800e026:	4303      	orrs	r3, r0
 800e028:	3401      	adds	r4, #1
 800e02a:	9304      	str	r3, [sp, #16]
 800e02c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e030:	482c      	ldr	r0, [pc, #176]	; (800e0e4 <_vfiprintf_r+0x250>)
 800e032:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e036:	2206      	movs	r2, #6
 800e038:	f7f2 f952 	bl	80002e0 <memchr>
 800e03c:	2800      	cmp	r0, #0
 800e03e:	d03f      	beq.n	800e0c0 <_vfiprintf_r+0x22c>
 800e040:	4b29      	ldr	r3, [pc, #164]	; (800e0e8 <_vfiprintf_r+0x254>)
 800e042:	bb1b      	cbnz	r3, 800e08c <_vfiprintf_r+0x1f8>
 800e044:	9b03      	ldr	r3, [sp, #12]
 800e046:	3307      	adds	r3, #7
 800e048:	f023 0307 	bic.w	r3, r3, #7
 800e04c:	3308      	adds	r3, #8
 800e04e:	9303      	str	r3, [sp, #12]
 800e050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e052:	443b      	add	r3, r7
 800e054:	9309      	str	r3, [sp, #36]	; 0x24
 800e056:	e767      	b.n	800df28 <_vfiprintf_r+0x94>
 800e058:	fb0c 3202 	mla	r2, ip, r2, r3
 800e05c:	460c      	mov	r4, r1
 800e05e:	2001      	movs	r0, #1
 800e060:	e7a5      	b.n	800dfae <_vfiprintf_r+0x11a>
 800e062:	2300      	movs	r3, #0
 800e064:	3401      	adds	r4, #1
 800e066:	9305      	str	r3, [sp, #20]
 800e068:	4619      	mov	r1, r3
 800e06a:	f04f 0c0a 	mov.w	ip, #10
 800e06e:	4620      	mov	r0, r4
 800e070:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e074:	3a30      	subs	r2, #48	; 0x30
 800e076:	2a09      	cmp	r2, #9
 800e078:	d903      	bls.n	800e082 <_vfiprintf_r+0x1ee>
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d0c5      	beq.n	800e00a <_vfiprintf_r+0x176>
 800e07e:	9105      	str	r1, [sp, #20]
 800e080:	e7c3      	b.n	800e00a <_vfiprintf_r+0x176>
 800e082:	fb0c 2101 	mla	r1, ip, r1, r2
 800e086:	4604      	mov	r4, r0
 800e088:	2301      	movs	r3, #1
 800e08a:	e7f0      	b.n	800e06e <_vfiprintf_r+0x1da>
 800e08c:	ab03      	add	r3, sp, #12
 800e08e:	9300      	str	r3, [sp, #0]
 800e090:	462a      	mov	r2, r5
 800e092:	4b16      	ldr	r3, [pc, #88]	; (800e0ec <_vfiprintf_r+0x258>)
 800e094:	a904      	add	r1, sp, #16
 800e096:	4630      	mov	r0, r6
 800e098:	f3af 8000 	nop.w
 800e09c:	4607      	mov	r7, r0
 800e09e:	1c78      	adds	r0, r7, #1
 800e0a0:	d1d6      	bne.n	800e050 <_vfiprintf_r+0x1bc>
 800e0a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e0a4:	07d9      	lsls	r1, r3, #31
 800e0a6:	d405      	bmi.n	800e0b4 <_vfiprintf_r+0x220>
 800e0a8:	89ab      	ldrh	r3, [r5, #12]
 800e0aa:	059a      	lsls	r2, r3, #22
 800e0ac:	d402      	bmi.n	800e0b4 <_vfiprintf_r+0x220>
 800e0ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e0b0:	f7ff fc1b 	bl	800d8ea <__retarget_lock_release_recursive>
 800e0b4:	89ab      	ldrh	r3, [r5, #12]
 800e0b6:	065b      	lsls	r3, r3, #25
 800e0b8:	f53f af12 	bmi.w	800dee0 <_vfiprintf_r+0x4c>
 800e0bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e0be:	e711      	b.n	800dee4 <_vfiprintf_r+0x50>
 800e0c0:	ab03      	add	r3, sp, #12
 800e0c2:	9300      	str	r3, [sp, #0]
 800e0c4:	462a      	mov	r2, r5
 800e0c6:	4b09      	ldr	r3, [pc, #36]	; (800e0ec <_vfiprintf_r+0x258>)
 800e0c8:	a904      	add	r1, sp, #16
 800e0ca:	4630      	mov	r0, r6
 800e0cc:	f000 f880 	bl	800e1d0 <_printf_i>
 800e0d0:	e7e4      	b.n	800e09c <_vfiprintf_r+0x208>
 800e0d2:	bf00      	nop
 800e0d4:	08010458 	.word	0x08010458
 800e0d8:	08010478 	.word	0x08010478
 800e0dc:	08010438 	.word	0x08010438
 800e0e0:	08010498 	.word	0x08010498
 800e0e4:	080104a2 	.word	0x080104a2
 800e0e8:	00000000 	.word	0x00000000
 800e0ec:	0800de6f 	.word	0x0800de6f
 800e0f0:	0801049e 	.word	0x0801049e

0800e0f4 <_printf_common>:
 800e0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0f8:	4616      	mov	r6, r2
 800e0fa:	4699      	mov	r9, r3
 800e0fc:	688a      	ldr	r2, [r1, #8]
 800e0fe:	690b      	ldr	r3, [r1, #16]
 800e100:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e104:	4293      	cmp	r3, r2
 800e106:	bfb8      	it	lt
 800e108:	4613      	movlt	r3, r2
 800e10a:	6033      	str	r3, [r6, #0]
 800e10c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e110:	4607      	mov	r7, r0
 800e112:	460c      	mov	r4, r1
 800e114:	b10a      	cbz	r2, 800e11a <_printf_common+0x26>
 800e116:	3301      	adds	r3, #1
 800e118:	6033      	str	r3, [r6, #0]
 800e11a:	6823      	ldr	r3, [r4, #0]
 800e11c:	0699      	lsls	r1, r3, #26
 800e11e:	bf42      	ittt	mi
 800e120:	6833      	ldrmi	r3, [r6, #0]
 800e122:	3302      	addmi	r3, #2
 800e124:	6033      	strmi	r3, [r6, #0]
 800e126:	6825      	ldr	r5, [r4, #0]
 800e128:	f015 0506 	ands.w	r5, r5, #6
 800e12c:	d106      	bne.n	800e13c <_printf_common+0x48>
 800e12e:	f104 0a19 	add.w	sl, r4, #25
 800e132:	68e3      	ldr	r3, [r4, #12]
 800e134:	6832      	ldr	r2, [r6, #0]
 800e136:	1a9b      	subs	r3, r3, r2
 800e138:	42ab      	cmp	r3, r5
 800e13a:	dc26      	bgt.n	800e18a <_printf_common+0x96>
 800e13c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e140:	1e13      	subs	r3, r2, #0
 800e142:	6822      	ldr	r2, [r4, #0]
 800e144:	bf18      	it	ne
 800e146:	2301      	movne	r3, #1
 800e148:	0692      	lsls	r2, r2, #26
 800e14a:	d42b      	bmi.n	800e1a4 <_printf_common+0xb0>
 800e14c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e150:	4649      	mov	r1, r9
 800e152:	4638      	mov	r0, r7
 800e154:	47c0      	blx	r8
 800e156:	3001      	adds	r0, #1
 800e158:	d01e      	beq.n	800e198 <_printf_common+0xa4>
 800e15a:	6823      	ldr	r3, [r4, #0]
 800e15c:	68e5      	ldr	r5, [r4, #12]
 800e15e:	6832      	ldr	r2, [r6, #0]
 800e160:	f003 0306 	and.w	r3, r3, #6
 800e164:	2b04      	cmp	r3, #4
 800e166:	bf08      	it	eq
 800e168:	1aad      	subeq	r5, r5, r2
 800e16a:	68a3      	ldr	r3, [r4, #8]
 800e16c:	6922      	ldr	r2, [r4, #16]
 800e16e:	bf0c      	ite	eq
 800e170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e174:	2500      	movne	r5, #0
 800e176:	4293      	cmp	r3, r2
 800e178:	bfc4      	itt	gt
 800e17a:	1a9b      	subgt	r3, r3, r2
 800e17c:	18ed      	addgt	r5, r5, r3
 800e17e:	2600      	movs	r6, #0
 800e180:	341a      	adds	r4, #26
 800e182:	42b5      	cmp	r5, r6
 800e184:	d11a      	bne.n	800e1bc <_printf_common+0xc8>
 800e186:	2000      	movs	r0, #0
 800e188:	e008      	b.n	800e19c <_printf_common+0xa8>
 800e18a:	2301      	movs	r3, #1
 800e18c:	4652      	mov	r2, sl
 800e18e:	4649      	mov	r1, r9
 800e190:	4638      	mov	r0, r7
 800e192:	47c0      	blx	r8
 800e194:	3001      	adds	r0, #1
 800e196:	d103      	bne.n	800e1a0 <_printf_common+0xac>
 800e198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e19c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1a0:	3501      	adds	r5, #1
 800e1a2:	e7c6      	b.n	800e132 <_printf_common+0x3e>
 800e1a4:	18e1      	adds	r1, r4, r3
 800e1a6:	1c5a      	adds	r2, r3, #1
 800e1a8:	2030      	movs	r0, #48	; 0x30
 800e1aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e1ae:	4422      	add	r2, r4
 800e1b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e1b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e1b8:	3302      	adds	r3, #2
 800e1ba:	e7c7      	b.n	800e14c <_printf_common+0x58>
 800e1bc:	2301      	movs	r3, #1
 800e1be:	4622      	mov	r2, r4
 800e1c0:	4649      	mov	r1, r9
 800e1c2:	4638      	mov	r0, r7
 800e1c4:	47c0      	blx	r8
 800e1c6:	3001      	adds	r0, #1
 800e1c8:	d0e6      	beq.n	800e198 <_printf_common+0xa4>
 800e1ca:	3601      	adds	r6, #1
 800e1cc:	e7d9      	b.n	800e182 <_printf_common+0x8e>
	...

0800e1d0 <_printf_i>:
 800e1d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e1d4:	7e0f      	ldrb	r7, [r1, #24]
 800e1d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e1d8:	2f78      	cmp	r7, #120	; 0x78
 800e1da:	4691      	mov	r9, r2
 800e1dc:	4680      	mov	r8, r0
 800e1de:	460c      	mov	r4, r1
 800e1e0:	469a      	mov	sl, r3
 800e1e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e1e6:	d807      	bhi.n	800e1f8 <_printf_i+0x28>
 800e1e8:	2f62      	cmp	r7, #98	; 0x62
 800e1ea:	d80a      	bhi.n	800e202 <_printf_i+0x32>
 800e1ec:	2f00      	cmp	r7, #0
 800e1ee:	f000 80d8 	beq.w	800e3a2 <_printf_i+0x1d2>
 800e1f2:	2f58      	cmp	r7, #88	; 0x58
 800e1f4:	f000 80a3 	beq.w	800e33e <_printf_i+0x16e>
 800e1f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e1fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e200:	e03a      	b.n	800e278 <_printf_i+0xa8>
 800e202:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e206:	2b15      	cmp	r3, #21
 800e208:	d8f6      	bhi.n	800e1f8 <_printf_i+0x28>
 800e20a:	a101      	add	r1, pc, #4	; (adr r1, 800e210 <_printf_i+0x40>)
 800e20c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e210:	0800e269 	.word	0x0800e269
 800e214:	0800e27d 	.word	0x0800e27d
 800e218:	0800e1f9 	.word	0x0800e1f9
 800e21c:	0800e1f9 	.word	0x0800e1f9
 800e220:	0800e1f9 	.word	0x0800e1f9
 800e224:	0800e1f9 	.word	0x0800e1f9
 800e228:	0800e27d 	.word	0x0800e27d
 800e22c:	0800e1f9 	.word	0x0800e1f9
 800e230:	0800e1f9 	.word	0x0800e1f9
 800e234:	0800e1f9 	.word	0x0800e1f9
 800e238:	0800e1f9 	.word	0x0800e1f9
 800e23c:	0800e389 	.word	0x0800e389
 800e240:	0800e2ad 	.word	0x0800e2ad
 800e244:	0800e36b 	.word	0x0800e36b
 800e248:	0800e1f9 	.word	0x0800e1f9
 800e24c:	0800e1f9 	.word	0x0800e1f9
 800e250:	0800e3ab 	.word	0x0800e3ab
 800e254:	0800e1f9 	.word	0x0800e1f9
 800e258:	0800e2ad 	.word	0x0800e2ad
 800e25c:	0800e1f9 	.word	0x0800e1f9
 800e260:	0800e1f9 	.word	0x0800e1f9
 800e264:	0800e373 	.word	0x0800e373
 800e268:	682b      	ldr	r3, [r5, #0]
 800e26a:	1d1a      	adds	r2, r3, #4
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	602a      	str	r2, [r5, #0]
 800e270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e278:	2301      	movs	r3, #1
 800e27a:	e0a3      	b.n	800e3c4 <_printf_i+0x1f4>
 800e27c:	6820      	ldr	r0, [r4, #0]
 800e27e:	6829      	ldr	r1, [r5, #0]
 800e280:	0606      	lsls	r6, r0, #24
 800e282:	f101 0304 	add.w	r3, r1, #4
 800e286:	d50a      	bpl.n	800e29e <_printf_i+0xce>
 800e288:	680e      	ldr	r6, [r1, #0]
 800e28a:	602b      	str	r3, [r5, #0]
 800e28c:	2e00      	cmp	r6, #0
 800e28e:	da03      	bge.n	800e298 <_printf_i+0xc8>
 800e290:	232d      	movs	r3, #45	; 0x2d
 800e292:	4276      	negs	r6, r6
 800e294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e298:	485e      	ldr	r0, [pc, #376]	; (800e414 <_printf_i+0x244>)
 800e29a:	230a      	movs	r3, #10
 800e29c:	e019      	b.n	800e2d2 <_printf_i+0x102>
 800e29e:	680e      	ldr	r6, [r1, #0]
 800e2a0:	602b      	str	r3, [r5, #0]
 800e2a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e2a6:	bf18      	it	ne
 800e2a8:	b236      	sxthne	r6, r6
 800e2aa:	e7ef      	b.n	800e28c <_printf_i+0xbc>
 800e2ac:	682b      	ldr	r3, [r5, #0]
 800e2ae:	6820      	ldr	r0, [r4, #0]
 800e2b0:	1d19      	adds	r1, r3, #4
 800e2b2:	6029      	str	r1, [r5, #0]
 800e2b4:	0601      	lsls	r1, r0, #24
 800e2b6:	d501      	bpl.n	800e2bc <_printf_i+0xec>
 800e2b8:	681e      	ldr	r6, [r3, #0]
 800e2ba:	e002      	b.n	800e2c2 <_printf_i+0xf2>
 800e2bc:	0646      	lsls	r6, r0, #25
 800e2be:	d5fb      	bpl.n	800e2b8 <_printf_i+0xe8>
 800e2c0:	881e      	ldrh	r6, [r3, #0]
 800e2c2:	4854      	ldr	r0, [pc, #336]	; (800e414 <_printf_i+0x244>)
 800e2c4:	2f6f      	cmp	r7, #111	; 0x6f
 800e2c6:	bf0c      	ite	eq
 800e2c8:	2308      	moveq	r3, #8
 800e2ca:	230a      	movne	r3, #10
 800e2cc:	2100      	movs	r1, #0
 800e2ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e2d2:	6865      	ldr	r5, [r4, #4]
 800e2d4:	60a5      	str	r5, [r4, #8]
 800e2d6:	2d00      	cmp	r5, #0
 800e2d8:	bfa2      	ittt	ge
 800e2da:	6821      	ldrge	r1, [r4, #0]
 800e2dc:	f021 0104 	bicge.w	r1, r1, #4
 800e2e0:	6021      	strge	r1, [r4, #0]
 800e2e2:	b90e      	cbnz	r6, 800e2e8 <_printf_i+0x118>
 800e2e4:	2d00      	cmp	r5, #0
 800e2e6:	d04d      	beq.n	800e384 <_printf_i+0x1b4>
 800e2e8:	4615      	mov	r5, r2
 800e2ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800e2ee:	fb03 6711 	mls	r7, r3, r1, r6
 800e2f2:	5dc7      	ldrb	r7, [r0, r7]
 800e2f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e2f8:	4637      	mov	r7, r6
 800e2fa:	42bb      	cmp	r3, r7
 800e2fc:	460e      	mov	r6, r1
 800e2fe:	d9f4      	bls.n	800e2ea <_printf_i+0x11a>
 800e300:	2b08      	cmp	r3, #8
 800e302:	d10b      	bne.n	800e31c <_printf_i+0x14c>
 800e304:	6823      	ldr	r3, [r4, #0]
 800e306:	07de      	lsls	r6, r3, #31
 800e308:	d508      	bpl.n	800e31c <_printf_i+0x14c>
 800e30a:	6923      	ldr	r3, [r4, #16]
 800e30c:	6861      	ldr	r1, [r4, #4]
 800e30e:	4299      	cmp	r1, r3
 800e310:	bfde      	ittt	le
 800e312:	2330      	movle	r3, #48	; 0x30
 800e314:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e318:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e31c:	1b52      	subs	r2, r2, r5
 800e31e:	6122      	str	r2, [r4, #16]
 800e320:	f8cd a000 	str.w	sl, [sp]
 800e324:	464b      	mov	r3, r9
 800e326:	aa03      	add	r2, sp, #12
 800e328:	4621      	mov	r1, r4
 800e32a:	4640      	mov	r0, r8
 800e32c:	f7ff fee2 	bl	800e0f4 <_printf_common>
 800e330:	3001      	adds	r0, #1
 800e332:	d14c      	bne.n	800e3ce <_printf_i+0x1fe>
 800e334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e338:	b004      	add	sp, #16
 800e33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e33e:	4835      	ldr	r0, [pc, #212]	; (800e414 <_printf_i+0x244>)
 800e340:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e344:	6829      	ldr	r1, [r5, #0]
 800e346:	6823      	ldr	r3, [r4, #0]
 800e348:	f851 6b04 	ldr.w	r6, [r1], #4
 800e34c:	6029      	str	r1, [r5, #0]
 800e34e:	061d      	lsls	r5, r3, #24
 800e350:	d514      	bpl.n	800e37c <_printf_i+0x1ac>
 800e352:	07df      	lsls	r7, r3, #31
 800e354:	bf44      	itt	mi
 800e356:	f043 0320 	orrmi.w	r3, r3, #32
 800e35a:	6023      	strmi	r3, [r4, #0]
 800e35c:	b91e      	cbnz	r6, 800e366 <_printf_i+0x196>
 800e35e:	6823      	ldr	r3, [r4, #0]
 800e360:	f023 0320 	bic.w	r3, r3, #32
 800e364:	6023      	str	r3, [r4, #0]
 800e366:	2310      	movs	r3, #16
 800e368:	e7b0      	b.n	800e2cc <_printf_i+0xfc>
 800e36a:	6823      	ldr	r3, [r4, #0]
 800e36c:	f043 0320 	orr.w	r3, r3, #32
 800e370:	6023      	str	r3, [r4, #0]
 800e372:	2378      	movs	r3, #120	; 0x78
 800e374:	4828      	ldr	r0, [pc, #160]	; (800e418 <_printf_i+0x248>)
 800e376:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e37a:	e7e3      	b.n	800e344 <_printf_i+0x174>
 800e37c:	0659      	lsls	r1, r3, #25
 800e37e:	bf48      	it	mi
 800e380:	b2b6      	uxthmi	r6, r6
 800e382:	e7e6      	b.n	800e352 <_printf_i+0x182>
 800e384:	4615      	mov	r5, r2
 800e386:	e7bb      	b.n	800e300 <_printf_i+0x130>
 800e388:	682b      	ldr	r3, [r5, #0]
 800e38a:	6826      	ldr	r6, [r4, #0]
 800e38c:	6961      	ldr	r1, [r4, #20]
 800e38e:	1d18      	adds	r0, r3, #4
 800e390:	6028      	str	r0, [r5, #0]
 800e392:	0635      	lsls	r5, r6, #24
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	d501      	bpl.n	800e39c <_printf_i+0x1cc>
 800e398:	6019      	str	r1, [r3, #0]
 800e39a:	e002      	b.n	800e3a2 <_printf_i+0x1d2>
 800e39c:	0670      	lsls	r0, r6, #25
 800e39e:	d5fb      	bpl.n	800e398 <_printf_i+0x1c8>
 800e3a0:	8019      	strh	r1, [r3, #0]
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	6123      	str	r3, [r4, #16]
 800e3a6:	4615      	mov	r5, r2
 800e3a8:	e7ba      	b.n	800e320 <_printf_i+0x150>
 800e3aa:	682b      	ldr	r3, [r5, #0]
 800e3ac:	1d1a      	adds	r2, r3, #4
 800e3ae:	602a      	str	r2, [r5, #0]
 800e3b0:	681d      	ldr	r5, [r3, #0]
 800e3b2:	6862      	ldr	r2, [r4, #4]
 800e3b4:	2100      	movs	r1, #0
 800e3b6:	4628      	mov	r0, r5
 800e3b8:	f7f1 ff92 	bl	80002e0 <memchr>
 800e3bc:	b108      	cbz	r0, 800e3c2 <_printf_i+0x1f2>
 800e3be:	1b40      	subs	r0, r0, r5
 800e3c0:	6060      	str	r0, [r4, #4]
 800e3c2:	6863      	ldr	r3, [r4, #4]
 800e3c4:	6123      	str	r3, [r4, #16]
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e3cc:	e7a8      	b.n	800e320 <_printf_i+0x150>
 800e3ce:	6923      	ldr	r3, [r4, #16]
 800e3d0:	462a      	mov	r2, r5
 800e3d2:	4649      	mov	r1, r9
 800e3d4:	4640      	mov	r0, r8
 800e3d6:	47d0      	blx	sl
 800e3d8:	3001      	adds	r0, #1
 800e3da:	d0ab      	beq.n	800e334 <_printf_i+0x164>
 800e3dc:	6823      	ldr	r3, [r4, #0]
 800e3de:	079b      	lsls	r3, r3, #30
 800e3e0:	d413      	bmi.n	800e40a <_printf_i+0x23a>
 800e3e2:	68e0      	ldr	r0, [r4, #12]
 800e3e4:	9b03      	ldr	r3, [sp, #12]
 800e3e6:	4298      	cmp	r0, r3
 800e3e8:	bfb8      	it	lt
 800e3ea:	4618      	movlt	r0, r3
 800e3ec:	e7a4      	b.n	800e338 <_printf_i+0x168>
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	4632      	mov	r2, r6
 800e3f2:	4649      	mov	r1, r9
 800e3f4:	4640      	mov	r0, r8
 800e3f6:	47d0      	blx	sl
 800e3f8:	3001      	adds	r0, #1
 800e3fa:	d09b      	beq.n	800e334 <_printf_i+0x164>
 800e3fc:	3501      	adds	r5, #1
 800e3fe:	68e3      	ldr	r3, [r4, #12]
 800e400:	9903      	ldr	r1, [sp, #12]
 800e402:	1a5b      	subs	r3, r3, r1
 800e404:	42ab      	cmp	r3, r5
 800e406:	dcf2      	bgt.n	800e3ee <_printf_i+0x21e>
 800e408:	e7eb      	b.n	800e3e2 <_printf_i+0x212>
 800e40a:	2500      	movs	r5, #0
 800e40c:	f104 0619 	add.w	r6, r4, #25
 800e410:	e7f5      	b.n	800e3fe <_printf_i+0x22e>
 800e412:	bf00      	nop
 800e414:	080104a9 	.word	0x080104a9
 800e418:	080104ba 	.word	0x080104ba

0800e41c <_sbrk_r>:
 800e41c:	b538      	push	{r3, r4, r5, lr}
 800e41e:	4d06      	ldr	r5, [pc, #24]	; (800e438 <_sbrk_r+0x1c>)
 800e420:	2300      	movs	r3, #0
 800e422:	4604      	mov	r4, r0
 800e424:	4608      	mov	r0, r1
 800e426:	602b      	str	r3, [r5, #0]
 800e428:	f7f3 fc40 	bl	8001cac <_sbrk>
 800e42c:	1c43      	adds	r3, r0, #1
 800e42e:	d102      	bne.n	800e436 <_sbrk_r+0x1a>
 800e430:	682b      	ldr	r3, [r5, #0]
 800e432:	b103      	cbz	r3, 800e436 <_sbrk_r+0x1a>
 800e434:	6023      	str	r3, [r4, #0]
 800e436:	bd38      	pop	{r3, r4, r5, pc}
 800e438:	24021d3c 	.word	0x24021d3c

0800e43c <__sread>:
 800e43c:	b510      	push	{r4, lr}
 800e43e:	460c      	mov	r4, r1
 800e440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e444:	f000 f9aa 	bl	800e79c <_read_r>
 800e448:	2800      	cmp	r0, #0
 800e44a:	bfab      	itete	ge
 800e44c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e44e:	89a3      	ldrhlt	r3, [r4, #12]
 800e450:	181b      	addge	r3, r3, r0
 800e452:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e456:	bfac      	ite	ge
 800e458:	6563      	strge	r3, [r4, #84]	; 0x54
 800e45a:	81a3      	strhlt	r3, [r4, #12]
 800e45c:	bd10      	pop	{r4, pc}

0800e45e <__swrite>:
 800e45e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e462:	461f      	mov	r7, r3
 800e464:	898b      	ldrh	r3, [r1, #12]
 800e466:	05db      	lsls	r3, r3, #23
 800e468:	4605      	mov	r5, r0
 800e46a:	460c      	mov	r4, r1
 800e46c:	4616      	mov	r6, r2
 800e46e:	d505      	bpl.n	800e47c <__swrite+0x1e>
 800e470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e474:	2302      	movs	r3, #2
 800e476:	2200      	movs	r2, #0
 800e478:	f000 f928 	bl	800e6cc <_lseek_r>
 800e47c:	89a3      	ldrh	r3, [r4, #12]
 800e47e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e482:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e486:	81a3      	strh	r3, [r4, #12]
 800e488:	4632      	mov	r2, r6
 800e48a:	463b      	mov	r3, r7
 800e48c:	4628      	mov	r0, r5
 800e48e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e492:	f000 b869 	b.w	800e568 <_write_r>

0800e496 <__sseek>:
 800e496:	b510      	push	{r4, lr}
 800e498:	460c      	mov	r4, r1
 800e49a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e49e:	f000 f915 	bl	800e6cc <_lseek_r>
 800e4a2:	1c43      	adds	r3, r0, #1
 800e4a4:	89a3      	ldrh	r3, [r4, #12]
 800e4a6:	bf15      	itete	ne
 800e4a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800e4aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e4ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e4b2:	81a3      	strheq	r3, [r4, #12]
 800e4b4:	bf18      	it	ne
 800e4b6:	81a3      	strhne	r3, [r4, #12]
 800e4b8:	bd10      	pop	{r4, pc}

0800e4ba <__sclose>:
 800e4ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4be:	f000 b8d3 	b.w	800e668 <_close_r>
	...

0800e4c4 <__swbuf_r>:
 800e4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4c6:	460e      	mov	r6, r1
 800e4c8:	4614      	mov	r4, r2
 800e4ca:	4605      	mov	r5, r0
 800e4cc:	b118      	cbz	r0, 800e4d6 <__swbuf_r+0x12>
 800e4ce:	6983      	ldr	r3, [r0, #24]
 800e4d0:	b90b      	cbnz	r3, 800e4d6 <__swbuf_r+0x12>
 800e4d2:	f7ff f96b 	bl	800d7ac <__sinit>
 800e4d6:	4b21      	ldr	r3, [pc, #132]	; (800e55c <__swbuf_r+0x98>)
 800e4d8:	429c      	cmp	r4, r3
 800e4da:	d12b      	bne.n	800e534 <__swbuf_r+0x70>
 800e4dc:	686c      	ldr	r4, [r5, #4]
 800e4de:	69a3      	ldr	r3, [r4, #24]
 800e4e0:	60a3      	str	r3, [r4, #8]
 800e4e2:	89a3      	ldrh	r3, [r4, #12]
 800e4e4:	071a      	lsls	r2, r3, #28
 800e4e6:	d52f      	bpl.n	800e548 <__swbuf_r+0x84>
 800e4e8:	6923      	ldr	r3, [r4, #16]
 800e4ea:	b36b      	cbz	r3, 800e548 <__swbuf_r+0x84>
 800e4ec:	6923      	ldr	r3, [r4, #16]
 800e4ee:	6820      	ldr	r0, [r4, #0]
 800e4f0:	1ac0      	subs	r0, r0, r3
 800e4f2:	6963      	ldr	r3, [r4, #20]
 800e4f4:	b2f6      	uxtb	r6, r6
 800e4f6:	4283      	cmp	r3, r0
 800e4f8:	4637      	mov	r7, r6
 800e4fa:	dc04      	bgt.n	800e506 <__swbuf_r+0x42>
 800e4fc:	4621      	mov	r1, r4
 800e4fe:	4628      	mov	r0, r5
 800e500:	f7ff f8c0 	bl	800d684 <_fflush_r>
 800e504:	bb30      	cbnz	r0, 800e554 <__swbuf_r+0x90>
 800e506:	68a3      	ldr	r3, [r4, #8]
 800e508:	3b01      	subs	r3, #1
 800e50a:	60a3      	str	r3, [r4, #8]
 800e50c:	6823      	ldr	r3, [r4, #0]
 800e50e:	1c5a      	adds	r2, r3, #1
 800e510:	6022      	str	r2, [r4, #0]
 800e512:	701e      	strb	r6, [r3, #0]
 800e514:	6963      	ldr	r3, [r4, #20]
 800e516:	3001      	adds	r0, #1
 800e518:	4283      	cmp	r3, r0
 800e51a:	d004      	beq.n	800e526 <__swbuf_r+0x62>
 800e51c:	89a3      	ldrh	r3, [r4, #12]
 800e51e:	07db      	lsls	r3, r3, #31
 800e520:	d506      	bpl.n	800e530 <__swbuf_r+0x6c>
 800e522:	2e0a      	cmp	r6, #10
 800e524:	d104      	bne.n	800e530 <__swbuf_r+0x6c>
 800e526:	4621      	mov	r1, r4
 800e528:	4628      	mov	r0, r5
 800e52a:	f7ff f8ab 	bl	800d684 <_fflush_r>
 800e52e:	b988      	cbnz	r0, 800e554 <__swbuf_r+0x90>
 800e530:	4638      	mov	r0, r7
 800e532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e534:	4b0a      	ldr	r3, [pc, #40]	; (800e560 <__swbuf_r+0x9c>)
 800e536:	429c      	cmp	r4, r3
 800e538:	d101      	bne.n	800e53e <__swbuf_r+0x7a>
 800e53a:	68ac      	ldr	r4, [r5, #8]
 800e53c:	e7cf      	b.n	800e4de <__swbuf_r+0x1a>
 800e53e:	4b09      	ldr	r3, [pc, #36]	; (800e564 <__swbuf_r+0xa0>)
 800e540:	429c      	cmp	r4, r3
 800e542:	bf08      	it	eq
 800e544:	68ec      	ldreq	r4, [r5, #12]
 800e546:	e7ca      	b.n	800e4de <__swbuf_r+0x1a>
 800e548:	4621      	mov	r1, r4
 800e54a:	4628      	mov	r0, r5
 800e54c:	f000 f81e 	bl	800e58c <__swsetup_r>
 800e550:	2800      	cmp	r0, #0
 800e552:	d0cb      	beq.n	800e4ec <__swbuf_r+0x28>
 800e554:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e558:	e7ea      	b.n	800e530 <__swbuf_r+0x6c>
 800e55a:	bf00      	nop
 800e55c:	08010458 	.word	0x08010458
 800e560:	08010478 	.word	0x08010478
 800e564:	08010438 	.word	0x08010438

0800e568 <_write_r>:
 800e568:	b538      	push	{r3, r4, r5, lr}
 800e56a:	4d07      	ldr	r5, [pc, #28]	; (800e588 <_write_r+0x20>)
 800e56c:	4604      	mov	r4, r0
 800e56e:	4608      	mov	r0, r1
 800e570:	4611      	mov	r1, r2
 800e572:	2200      	movs	r2, #0
 800e574:	602a      	str	r2, [r5, #0]
 800e576:	461a      	mov	r2, r3
 800e578:	f7f2 ff28 	bl	80013cc <_write>
 800e57c:	1c43      	adds	r3, r0, #1
 800e57e:	d102      	bne.n	800e586 <_write_r+0x1e>
 800e580:	682b      	ldr	r3, [r5, #0]
 800e582:	b103      	cbz	r3, 800e586 <_write_r+0x1e>
 800e584:	6023      	str	r3, [r4, #0]
 800e586:	bd38      	pop	{r3, r4, r5, pc}
 800e588:	24021d3c 	.word	0x24021d3c

0800e58c <__swsetup_r>:
 800e58c:	4b32      	ldr	r3, [pc, #200]	; (800e658 <__swsetup_r+0xcc>)
 800e58e:	b570      	push	{r4, r5, r6, lr}
 800e590:	681d      	ldr	r5, [r3, #0]
 800e592:	4606      	mov	r6, r0
 800e594:	460c      	mov	r4, r1
 800e596:	b125      	cbz	r5, 800e5a2 <__swsetup_r+0x16>
 800e598:	69ab      	ldr	r3, [r5, #24]
 800e59a:	b913      	cbnz	r3, 800e5a2 <__swsetup_r+0x16>
 800e59c:	4628      	mov	r0, r5
 800e59e:	f7ff f905 	bl	800d7ac <__sinit>
 800e5a2:	4b2e      	ldr	r3, [pc, #184]	; (800e65c <__swsetup_r+0xd0>)
 800e5a4:	429c      	cmp	r4, r3
 800e5a6:	d10f      	bne.n	800e5c8 <__swsetup_r+0x3c>
 800e5a8:	686c      	ldr	r4, [r5, #4]
 800e5aa:	89a3      	ldrh	r3, [r4, #12]
 800e5ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e5b0:	0719      	lsls	r1, r3, #28
 800e5b2:	d42c      	bmi.n	800e60e <__swsetup_r+0x82>
 800e5b4:	06dd      	lsls	r5, r3, #27
 800e5b6:	d411      	bmi.n	800e5dc <__swsetup_r+0x50>
 800e5b8:	2309      	movs	r3, #9
 800e5ba:	6033      	str	r3, [r6, #0]
 800e5bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e5c0:	81a3      	strh	r3, [r4, #12]
 800e5c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e5c6:	e03e      	b.n	800e646 <__swsetup_r+0xba>
 800e5c8:	4b25      	ldr	r3, [pc, #148]	; (800e660 <__swsetup_r+0xd4>)
 800e5ca:	429c      	cmp	r4, r3
 800e5cc:	d101      	bne.n	800e5d2 <__swsetup_r+0x46>
 800e5ce:	68ac      	ldr	r4, [r5, #8]
 800e5d0:	e7eb      	b.n	800e5aa <__swsetup_r+0x1e>
 800e5d2:	4b24      	ldr	r3, [pc, #144]	; (800e664 <__swsetup_r+0xd8>)
 800e5d4:	429c      	cmp	r4, r3
 800e5d6:	bf08      	it	eq
 800e5d8:	68ec      	ldreq	r4, [r5, #12]
 800e5da:	e7e6      	b.n	800e5aa <__swsetup_r+0x1e>
 800e5dc:	0758      	lsls	r0, r3, #29
 800e5de:	d512      	bpl.n	800e606 <__swsetup_r+0x7a>
 800e5e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e5e2:	b141      	cbz	r1, 800e5f6 <__swsetup_r+0x6a>
 800e5e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e5e8:	4299      	cmp	r1, r3
 800e5ea:	d002      	beq.n	800e5f2 <__swsetup_r+0x66>
 800e5ec:	4630      	mov	r0, r6
 800e5ee:	f7ff f9eb 	bl	800d9c8 <_free_r>
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	6363      	str	r3, [r4, #52]	; 0x34
 800e5f6:	89a3      	ldrh	r3, [r4, #12]
 800e5f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e5fc:	81a3      	strh	r3, [r4, #12]
 800e5fe:	2300      	movs	r3, #0
 800e600:	6063      	str	r3, [r4, #4]
 800e602:	6923      	ldr	r3, [r4, #16]
 800e604:	6023      	str	r3, [r4, #0]
 800e606:	89a3      	ldrh	r3, [r4, #12]
 800e608:	f043 0308 	orr.w	r3, r3, #8
 800e60c:	81a3      	strh	r3, [r4, #12]
 800e60e:	6923      	ldr	r3, [r4, #16]
 800e610:	b94b      	cbnz	r3, 800e626 <__swsetup_r+0x9a>
 800e612:	89a3      	ldrh	r3, [r4, #12]
 800e614:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e61c:	d003      	beq.n	800e626 <__swsetup_r+0x9a>
 800e61e:	4621      	mov	r1, r4
 800e620:	4630      	mov	r0, r6
 800e622:	f7ff f989 	bl	800d938 <__smakebuf_r>
 800e626:	89a0      	ldrh	r0, [r4, #12]
 800e628:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e62c:	f010 0301 	ands.w	r3, r0, #1
 800e630:	d00a      	beq.n	800e648 <__swsetup_r+0xbc>
 800e632:	2300      	movs	r3, #0
 800e634:	60a3      	str	r3, [r4, #8]
 800e636:	6963      	ldr	r3, [r4, #20]
 800e638:	425b      	negs	r3, r3
 800e63a:	61a3      	str	r3, [r4, #24]
 800e63c:	6923      	ldr	r3, [r4, #16]
 800e63e:	b943      	cbnz	r3, 800e652 <__swsetup_r+0xc6>
 800e640:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e644:	d1ba      	bne.n	800e5bc <__swsetup_r+0x30>
 800e646:	bd70      	pop	{r4, r5, r6, pc}
 800e648:	0781      	lsls	r1, r0, #30
 800e64a:	bf58      	it	pl
 800e64c:	6963      	ldrpl	r3, [r4, #20]
 800e64e:	60a3      	str	r3, [r4, #8]
 800e650:	e7f4      	b.n	800e63c <__swsetup_r+0xb0>
 800e652:	2000      	movs	r0, #0
 800e654:	e7f7      	b.n	800e646 <__swsetup_r+0xba>
 800e656:	bf00      	nop
 800e658:	24000038 	.word	0x24000038
 800e65c:	08010458 	.word	0x08010458
 800e660:	08010478 	.word	0x08010478
 800e664:	08010438 	.word	0x08010438

0800e668 <_close_r>:
 800e668:	b538      	push	{r3, r4, r5, lr}
 800e66a:	4d06      	ldr	r5, [pc, #24]	; (800e684 <_close_r+0x1c>)
 800e66c:	2300      	movs	r3, #0
 800e66e:	4604      	mov	r4, r0
 800e670:	4608      	mov	r0, r1
 800e672:	602b      	str	r3, [r5, #0]
 800e674:	f7f2 fe3e 	bl	80012f4 <_close>
 800e678:	1c43      	adds	r3, r0, #1
 800e67a:	d102      	bne.n	800e682 <_close_r+0x1a>
 800e67c:	682b      	ldr	r3, [r5, #0]
 800e67e:	b103      	cbz	r3, 800e682 <_close_r+0x1a>
 800e680:	6023      	str	r3, [r4, #0]
 800e682:	bd38      	pop	{r3, r4, r5, pc}
 800e684:	24021d3c 	.word	0x24021d3c

0800e688 <_fstat_r>:
 800e688:	b538      	push	{r3, r4, r5, lr}
 800e68a:	4d07      	ldr	r5, [pc, #28]	; (800e6a8 <_fstat_r+0x20>)
 800e68c:	2300      	movs	r3, #0
 800e68e:	4604      	mov	r4, r0
 800e690:	4608      	mov	r0, r1
 800e692:	4611      	mov	r1, r2
 800e694:	602b      	str	r3, [r5, #0]
 800e696:	f7f2 fe55 	bl	8001344 <_fstat>
 800e69a:	1c43      	adds	r3, r0, #1
 800e69c:	d102      	bne.n	800e6a4 <_fstat_r+0x1c>
 800e69e:	682b      	ldr	r3, [r5, #0]
 800e6a0:	b103      	cbz	r3, 800e6a4 <_fstat_r+0x1c>
 800e6a2:	6023      	str	r3, [r4, #0]
 800e6a4:	bd38      	pop	{r3, r4, r5, pc}
 800e6a6:	bf00      	nop
 800e6a8:	24021d3c 	.word	0x24021d3c

0800e6ac <_isatty_r>:
 800e6ac:	b538      	push	{r3, r4, r5, lr}
 800e6ae:	4d06      	ldr	r5, [pc, #24]	; (800e6c8 <_isatty_r+0x1c>)
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	4604      	mov	r4, r0
 800e6b4:	4608      	mov	r0, r1
 800e6b6:	602b      	str	r3, [r5, #0]
 800e6b8:	f7f2 fe06 	bl	80012c8 <_isatty>
 800e6bc:	1c43      	adds	r3, r0, #1
 800e6be:	d102      	bne.n	800e6c6 <_isatty_r+0x1a>
 800e6c0:	682b      	ldr	r3, [r5, #0]
 800e6c2:	b103      	cbz	r3, 800e6c6 <_isatty_r+0x1a>
 800e6c4:	6023      	str	r3, [r4, #0]
 800e6c6:	bd38      	pop	{r3, r4, r5, pc}
 800e6c8:	24021d3c 	.word	0x24021d3c

0800e6cc <_lseek_r>:
 800e6cc:	b538      	push	{r3, r4, r5, lr}
 800e6ce:	4d07      	ldr	r5, [pc, #28]	; (800e6ec <_lseek_r+0x20>)
 800e6d0:	4604      	mov	r4, r0
 800e6d2:	4608      	mov	r0, r1
 800e6d4:	4611      	mov	r1, r2
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	602a      	str	r2, [r5, #0]
 800e6da:	461a      	mov	r2, r3
 800e6dc:	f7f2 fe21 	bl	8001322 <_lseek>
 800e6e0:	1c43      	adds	r3, r0, #1
 800e6e2:	d102      	bne.n	800e6ea <_lseek_r+0x1e>
 800e6e4:	682b      	ldr	r3, [r5, #0]
 800e6e6:	b103      	cbz	r3, 800e6ea <_lseek_r+0x1e>
 800e6e8:	6023      	str	r3, [r4, #0]
 800e6ea:	bd38      	pop	{r3, r4, r5, pc}
 800e6ec:	24021d3c 	.word	0x24021d3c

0800e6f0 <memmove>:
 800e6f0:	4288      	cmp	r0, r1
 800e6f2:	b510      	push	{r4, lr}
 800e6f4:	eb01 0402 	add.w	r4, r1, r2
 800e6f8:	d902      	bls.n	800e700 <memmove+0x10>
 800e6fa:	4284      	cmp	r4, r0
 800e6fc:	4623      	mov	r3, r4
 800e6fe:	d807      	bhi.n	800e710 <memmove+0x20>
 800e700:	1e43      	subs	r3, r0, #1
 800e702:	42a1      	cmp	r1, r4
 800e704:	d008      	beq.n	800e718 <memmove+0x28>
 800e706:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e70a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e70e:	e7f8      	b.n	800e702 <memmove+0x12>
 800e710:	4402      	add	r2, r0
 800e712:	4601      	mov	r1, r0
 800e714:	428a      	cmp	r2, r1
 800e716:	d100      	bne.n	800e71a <memmove+0x2a>
 800e718:	bd10      	pop	{r4, pc}
 800e71a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e71e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e722:	e7f7      	b.n	800e714 <memmove+0x24>

0800e724 <__malloc_lock>:
 800e724:	4801      	ldr	r0, [pc, #4]	; (800e72c <__malloc_lock+0x8>)
 800e726:	f7ff b8df 	b.w	800d8e8 <__retarget_lock_acquire_recursive>
 800e72a:	bf00      	nop
 800e72c:	24021d30 	.word	0x24021d30

0800e730 <__malloc_unlock>:
 800e730:	4801      	ldr	r0, [pc, #4]	; (800e738 <__malloc_unlock+0x8>)
 800e732:	f7ff b8da 	b.w	800d8ea <__retarget_lock_release_recursive>
 800e736:	bf00      	nop
 800e738:	24021d30 	.word	0x24021d30

0800e73c <_realloc_r>:
 800e73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e740:	4680      	mov	r8, r0
 800e742:	4614      	mov	r4, r2
 800e744:	460e      	mov	r6, r1
 800e746:	b921      	cbnz	r1, 800e752 <_realloc_r+0x16>
 800e748:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e74c:	4611      	mov	r1, r2
 800e74e:	f7ff b9a7 	b.w	800daa0 <_malloc_r>
 800e752:	b92a      	cbnz	r2, 800e760 <_realloc_r+0x24>
 800e754:	f7ff f938 	bl	800d9c8 <_free_r>
 800e758:	4625      	mov	r5, r4
 800e75a:	4628      	mov	r0, r5
 800e75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e760:	f000 f82e 	bl	800e7c0 <_malloc_usable_size_r>
 800e764:	4284      	cmp	r4, r0
 800e766:	4607      	mov	r7, r0
 800e768:	d802      	bhi.n	800e770 <_realloc_r+0x34>
 800e76a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e76e:	d812      	bhi.n	800e796 <_realloc_r+0x5a>
 800e770:	4621      	mov	r1, r4
 800e772:	4640      	mov	r0, r8
 800e774:	f7ff f994 	bl	800daa0 <_malloc_r>
 800e778:	4605      	mov	r5, r0
 800e77a:	2800      	cmp	r0, #0
 800e77c:	d0ed      	beq.n	800e75a <_realloc_r+0x1e>
 800e77e:	42bc      	cmp	r4, r7
 800e780:	4622      	mov	r2, r4
 800e782:	4631      	mov	r1, r6
 800e784:	bf28      	it	cs
 800e786:	463a      	movcs	r2, r7
 800e788:	f7fe fdd2 	bl	800d330 <memcpy>
 800e78c:	4631      	mov	r1, r6
 800e78e:	4640      	mov	r0, r8
 800e790:	f7ff f91a 	bl	800d9c8 <_free_r>
 800e794:	e7e1      	b.n	800e75a <_realloc_r+0x1e>
 800e796:	4635      	mov	r5, r6
 800e798:	e7df      	b.n	800e75a <_realloc_r+0x1e>
	...

0800e79c <_read_r>:
 800e79c:	b538      	push	{r3, r4, r5, lr}
 800e79e:	4d07      	ldr	r5, [pc, #28]	; (800e7bc <_read_r+0x20>)
 800e7a0:	4604      	mov	r4, r0
 800e7a2:	4608      	mov	r0, r1
 800e7a4:	4611      	mov	r1, r2
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	602a      	str	r2, [r5, #0]
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	f7f2 fde6 	bl	800137c <_read>
 800e7b0:	1c43      	adds	r3, r0, #1
 800e7b2:	d102      	bne.n	800e7ba <_read_r+0x1e>
 800e7b4:	682b      	ldr	r3, [r5, #0]
 800e7b6:	b103      	cbz	r3, 800e7ba <_read_r+0x1e>
 800e7b8:	6023      	str	r3, [r4, #0]
 800e7ba:	bd38      	pop	{r3, r4, r5, pc}
 800e7bc:	24021d3c 	.word	0x24021d3c

0800e7c0 <_malloc_usable_size_r>:
 800e7c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7c4:	1f18      	subs	r0, r3, #4
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	bfbc      	itt	lt
 800e7ca:	580b      	ldrlt	r3, [r1, r0]
 800e7cc:	18c0      	addlt	r0, r0, r3
 800e7ce:	4770      	bx	lr

0800e7d0 <_init>:
 800e7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7d2:	bf00      	nop
 800e7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7d6:	bc08      	pop	{r3}
 800e7d8:	469e      	mov	lr, r3
 800e7da:	4770      	bx	lr

0800e7dc <_fini>:
 800e7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7de:	bf00      	nop
 800e7e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7e2:	bc08      	pop	{r3}
 800e7e4:	469e      	mov	lr, r3
 800e7e6:	4770      	bx	lr
